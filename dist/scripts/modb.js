(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

module.exports.Dispatcher = require('./lib/Dispatcher')

},{"./lib/Dispatcher":2}],2:[function(require,module,exports){
/*
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Dispatcher
 * @typechecks
 */

"use strict";

var invariant = require('./invariant');

var _lastID = 1;
var _prefix = 'ID_';

/**
 * Dispatcher is used to broadcast payloads to registered callbacks. This is
 * different from generic pub-sub systems in two ways:
 *
 *   1) Callbacks are not subscribed to particular events. Every payload is
 *      dispatched to every registered callback.
 *   2) Callbacks can be deferred in whole or part until other callbacks have
 *      been executed.
 *
 * For example, consider this hypothetical flight destination form, which
 * selects a default city when a country is selected:
 *
 *   var flightDispatcher = new Dispatcher();
 *
 *   // Keeps track of which country is selected
 *   var CountryStore = {country: null};
 *
 *   // Keeps track of which city is selected
 *   var CityStore = {city: null};
 *
 *   // Keeps track of the base flight price of the selected city
 *   var FlightPriceStore = {price: null}
 *
 * When a user changes the selected city, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
 *
 * This payload is digested by `CityStore`:
 *
 *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
 *
 * When the user selects a country, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
 *
 * This payload is digested by both stores:
 *
 *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
 *
 * When the callback to update `CountryStore` is registered, we save a reference
 * to the returned token. Using this token with `waitFor()`, we can guarantee
 * that `CountryStore` is updated before the callback that updates `CityStore`
 * needs to query its data.
 *
 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
 *
 * The usage of `waitFor()` can be chained, for example:
 *
 *   FlightPriceStore.dispatchToken =
 *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *
 *         case 'city-update':
 *           FlightPriceStore.price =
 *             FlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
 *
 * The `country-update` payload will be guaranteed to invoke the stores'
 * registered callbacks in order: `CountryStore`, `CityStore`, then
 * `FlightPriceStore`.
 */

  function Dispatcher() {
    this.$Dispatcher_callbacks = {};
    this.$Dispatcher_isPending = {};
    this.$Dispatcher_isHandled = {};
    this.$Dispatcher_isDispatching = false;
    this.$Dispatcher_pendingPayload = null;
  }

  /**
   * Registers a callback to be invoked with every dispatched payload. Returns
   * a token that can be used with `waitFor()`.
   *
   * @param {function} callback
   * @return {string}
   */
  Dispatcher.prototype.register=function(callback) {
    var id = _prefix + _lastID++;
    this.$Dispatcher_callbacks[id] = callback;
    return id;
  };

  /**
   * Removes a callback based on its token.
   *
   * @param {string} id
   */
  Dispatcher.prototype.unregister=function(id) {
    invariant(
      this.$Dispatcher_callbacks[id],
      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',
      id
    );
    delete this.$Dispatcher_callbacks[id];
  };

  /**
   * Waits for the callbacks specified to be invoked before continuing execution
   * of the current callback. This method should only be used by a callback in
   * response to a dispatched payload.
   *
   * @param {array<string>} ids
   */
  Dispatcher.prototype.waitFor=function(ids) {
    invariant(
      this.$Dispatcher_isDispatching,
      'Dispatcher.waitFor(...): Must be invoked while dispatching.'
    );
    for (var ii = 0; ii < ids.length; ii++) {
      var id = ids[ii];
      if (this.$Dispatcher_isPending[id]) {
        invariant(
          this.$Dispatcher_isHandled[id],
          'Dispatcher.waitFor(...): Circular dependency detected while ' +
          'waiting for `%s`.',
          id
        );
        continue;
      }
      invariant(
        this.$Dispatcher_callbacks[id],
        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',
        id
      );
      this.$Dispatcher_invokeCallback(id);
    }
  };

  /**
   * Dispatches a payload to all registered callbacks.
   *
   * @param {object} payload
   */
  Dispatcher.prototype.dispatch=function(payload) {
    invariant(
      !this.$Dispatcher_isDispatching,
      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'
    );
    this.$Dispatcher_startDispatching(payload);
    try {
      for (var id in this.$Dispatcher_callbacks) {
        if (this.$Dispatcher_isPending[id]) {
          continue;
        }
        this.$Dispatcher_invokeCallback(id);
      }
    } finally {
      this.$Dispatcher_stopDispatching();
    }
  };

  /**
   * Is this Dispatcher currently dispatching.
   *
   * @return {boolean}
   */
  Dispatcher.prototype.isDispatching=function() {
    return this.$Dispatcher_isDispatching;
  };

  /**
   * Call the callback stored with the given id. Also do some internal
   * bookkeeping.
   *
   * @param {string} id
   * @internal
   */
  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {
    this.$Dispatcher_isPending[id] = true;
    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);
    this.$Dispatcher_isHandled[id] = true;
  };

  /**
   * Set up bookkeeping needed when dispatching.
   *
   * @param {object} payload
   * @internal
   */
  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {
    for (var id in this.$Dispatcher_callbacks) {
      this.$Dispatcher_isPending[id] = false;
      this.$Dispatcher_isHandled[id] = false;
    }
    this.$Dispatcher_pendingPayload = payload;
    this.$Dispatcher_isDispatching = true;
  };

  /**
   * Clear bookkeeping used for dispatching.
   *
   * @internal
   */
  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {
    this.$Dispatcher_pendingPayload = null;
    this.$Dispatcher_isDispatching = false;
  };


module.exports = Dispatcher;

},{"./invariant":3}],3:[function(require,module,exports){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (false) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],4:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],5:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],6:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.5.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.5.0';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      REARG_FLAG = 128,
      ARY_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_DROP_WHILE_FLAG = 0,
      LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /**
   * Used to match ES template delimiters.
   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)
   * for more details.
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect named functions. */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to detect hexadecimal string values. */
  var reHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /**
   * Used to match `RegExp` special characters.
   * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)
   * for more details.
   */
  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to detect functions containing a `this` reference. */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to detect and test for whitespace. */
  var whitespace = (
    // Basic whitespace characters.
    ' \t\x0b\f\xa0\ufeff' +

    // Line terminators.
    '\n\r\u2028\u2029' +

    // Unicode category "Zs" space separators.
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    'window', 'WinRTError'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used as an internal `_.debounce` options object by `_.throttle`. */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it is the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare to `other`.
   * @param {*} other The value to compare to `value`.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsReflexive = value === value,
          othIsReflexive = other === other;

      if (value > other || !valIsReflexive || (typeof value == 'undefined' && othIsReflexive)) {
        return 1;
      }
      if (value < other || !othIsReflexive || (typeof other == 'undefined' && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it is not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.max` and `_.min` as the default callback for string values.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the code unit of the first character of the string.
   */
  function charAtCallback(string) {
    return string.charCodeAt(0);
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of each element
   * in a collection and stable sort them in the following order:
   *
   * If orders is unspecified, sort in ascending order for all properties.
   * Otherwise, for each property, sort in ascending order if its corresponding value in
   * orders is true, and descending order if false.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        return result * (orders[index] ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   * If `fromRight` is provided elements of `array` are iterated from right to left.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return (value && typeof value == 'object') || false;
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'add': function(a, b) { return a + b; } });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'sub': function(a, b) { return a - b; } });
   *
   * _.isFunction(_.add);
   * // => true
   * _.isFunction(_.sub);
   * // => false
   *
   * lodash.isFunction(lodash.add);
   * // => false
   * lodash.isFunction(lodash.sub);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to detect DOM support. */
    var document = (document = context.window) && document.document;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to the length of n-tuples for `_.unzip`. */
    var getLength = baseProperty('length');

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the `toStringTag` of values.
     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
     * for more details.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = context._;

    /** Used to detect if a method is native. */
    var reNative = RegExp('^' +
      escapeRegExp(objToString)
      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
        ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        push = arrayProto.push,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = isNative(Set = context.Set) && Set,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

    /** Used to clone array buffers. */
    var Float64Array = (function() {
      // Safari 5 errors when using an array buffer to initialize a typed array
      // where the array buffer's `byteLength` is not a multiple of the typed
      // array's `BYTES_PER_ELEMENT`.
      try {
        var func = isNative(func = context.Float64Array) && func,
            result = new func(new ArrayBuffer(10), 0, 1) && func;
      } catch(e) {}
      return result;
    }());

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsFinite = context.isFinite,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used as the size, in bytes, of each `Float64Array` element. */
    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

    /**
     * Used as the maximum length of an array-like value.
     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
     * for more details.
     */
    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that return a boolean or single value will
     * automatically end the chain returning the unwrapped value. Explicit chaining
     * may be enabled using `_.chain`. The execution of chained methods is lazy,
     * that is, execution is deferred until `_#value` is implicitly or explicitly
     * called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization that merges iteratees to avoid creating intermediate
     * arrays and reduce the number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
     * `keysIn`, `map`, `mapValues`, `matches`, `matchesProperty`, `memoize`, `merge`,
     * `mixin`, `negate`, `noop`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,
     * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`,
     * `spread`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`,
     * `throttle`, `thru`, `times`, `toArray`, `toPlainObject`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,
     * `without`, `wrap`, `xor`, `zip`, and `zipObject`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
     * `identity`, `includes`, `indexOf`, `inRange`, `isArguments`, `isArray`,
     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`,
     * `isFinite`,`isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,
     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`,
     * `noConflict`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`,
     * `random`, `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`,
     * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`,
     * `startCase`, `startsWith`, `sum`, `template`, `trim`, `trimLeft`,
     * `trimRight`, `trunc`, `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, n) {
     *   return sum + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function(x) {

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but Firefox OS certified apps, older Opera mobile browsers, and
       * the PlayStation 3; forced `false` for Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if the DOM is supported.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.dom = document.createDocumentFragment().nodeType === 11;
      } catch(e) {
        support.dom = false;
      }

      /**
       * Detect if `arguments` object indexes are non-enumerable.
       *
       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
       * checks for indexes that exceed their function's formal parameters with
       * associated values of `0`.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
      } catch(e) {
        support.nonEnumArgs = true;
      }
    }(0, 0));

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = null;
      this.__dir__ = 1;
      this.__dropCount__ = 0;
      this.__filtered__ = false;
      this.__iteratees__ = null;
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = null;
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var actions = this.__actions__,
          iteratees = this.__iteratees__,
          views = this.__views__,
          result = new LazyWrapper(this.__wrapped__);

      result.__actions__ = actions ? arrayCopy(actions) : null;
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = views ? arrayCopy(views) : null;
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value();
      if (!isArray(array)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var dir = this.__dir__,
          isRight = dir < 0,
          view = getView(0, array.length, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          takeCount = nativeMin(length, this.__takeCount__),
          iteratees = this.__iteratees__,
          iterLength = iteratees ? iteratees.length : 0,
          resIndex = 0,
          result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type;

          if (type == LAZY_DROP_WHILE_FLAG) {
            if (data.done && (isRight ? (index > data.index) : (index < data.index))) {
              data.count = 0;
              data.done = false;
            }
            data.index = index;
            if (!data.done) {
              var limit = data.limit;
              if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {
                continue outer;
              }
            }
          } else {
            var computed = iteratee(value);
            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Adds `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * A specialized version of `_.max` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     */
    function arrayMax(array) {
      var index = -1,
          length = array.length,
          result = NEGATIVE_INFINITY;

      while (++index < length) {
        var value = array[index];
        if (value > result) {
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.min` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     */
    function arrayMin(array) {
      var index = -1,
          length = array.length,
          result = POSITIVE_INFINITY;

      while (++index < length) {
        var value = array[index];
        if (value < result) {
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return typeof objectValue == 'undefined' ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This method is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (typeof objectValue == 'undefined' || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize assigning values.
     * @returns {Object} Returns the destination object.
     */
    function baseAssign(object, source, customizer) {
      var props = keys(source);
      if (!customizer) {
        return baseCopy(source, object, props);
      }
      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (typeof value == 'undefined' && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.at` without support for strings and individual
     * key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} [props] The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          length = collection.length,
          isArr = isLength(length),
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          key = parseFloat(key);
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = collection[key];
        }
      }
      return result;
    }

    /**
     * Copies the properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Array} props The property names to copy.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, object, props) {
      if (!props) {
        props = object;
        object = {};
      }
      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.bindAll` without support for individual
     * method name arguments.
     *
     * @private
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {string[]} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     */
    function baseBindAll(object, methodNames) {
      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return (typeof thisArg != 'undefined' && isBindable(func))
          ? bindCallback(func, thisArg, argCount)
          : func;
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return typeof thisArg == 'undefined'
        ? baseProperty(func + '')
        : baseMatchesProperty(func + '', thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (typeof result != 'undefined') {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseCopy(value, result, keys(value));
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function Object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          Object.prototype = prototype;
          var result = new Object;
          Object.prototype = null;
        }
        return result || context.Object();
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The `arguments` object to slice and provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args, fromIndex) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, baseSlice(args, fromIndex)); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= 200) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    function baseEach(collection, iteratee) {
      var length = collection ? collection.length : 0;
      if (!isLength(length)) {
        return baseForOwn(collection, iteratee);
      }
      var index = -1,
          iterable = toObject(collection);

      while (++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    }

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    function baseEachRight(collection, iteratee) {
      var length = collection ? collection.length : 0;
      if (!isLength(length)) {
        return baseForOwnRight(collection, iteratee);
      }
      var iterable = toObject(collection);
      while (length--) {
        if (iteratee(iterable[length], length, iterable) === false) {
          break;
        }
      }
      return collection;
    }

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} isDeep Specify a deep flatten.
     * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.
     * @param {number} fromIndex The index to start from.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, fromIndex) {
      var index = fromIndex - 1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            value = baseFlatten(value, isDeep, isStrict, 0);
          }
          var valIndex = -1,
              valLength = value.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[++resIndex] = value[valIndex];
          }
        } else if (!isStrict) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iterator functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    function baseFor(object, iteratee, keysFunc) {
      var index = -1,
          iterable = toObject(object),
          props = keysFunc(object),
          length = props.length;

      while (++index < length) {
        var key = props[index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    function baseForRight(object, iteratee, keysFunc) {
      var iterable = toObject(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[length];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invoke` which requires additional arguments
     * to be provided as an array of arguments rather than individually.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {Array} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     */
    function baseInvoke(collection, methodName, args) {
      var index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = isLength(length) ? Array(length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? methodName : (value != null && value[methodName]);
        result[++index] = func ? func.apply(value, args) : undefined;
      });
      return result;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {
      // Exit early for identical values.
      if (value === other) {
        // Treat `+0` vs. `-0` as not equal.
        return value !== 0 || (1 / value == 1 / other);
      }
      var valType = typeof value,
          othType = typeof other;

      // Exit early for unlike primitive values.
      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
          value == null || other == null) {
        // Return `false` unless both values are `NaN`.
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (valWrapped || othWrapped) {
        return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The source property names to match.
     * @param {Array} values The source values to match.
     * @param {Array} strictCompareFlags Strict comparison flags for source values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      var index = -1,
          noCustomizer = !customizer;

      while (++index < length) {
        if ((noCustomizer && strictCompareFlags[index])
              ? values[index] !== object[props[index]]
              : !hasOwnProperty.call(object, props[index])
            ) {
          return false;
        }
      }
      index = -1;
      while (++index < length) {
        var key = props[index];
        if (noCustomizer && strictCompareFlags[index]) {
          var result = hasOwnProperty.call(object, key);
        } else {
          var objValue = object[key],
              srcValue = values[index];

          result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (typeof result == 'undefined') {
            result = baseIsEqual(srcValue, objValue, customizer, true);
          }
        }
        if (!result) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var result = [];
      baseEach(collection, function(value, key, collection) {
        result.push(iteratee(value, key, collection));
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var props = keys(source),
          length = props.length;

      if (length == 1) {
        var key = props[0],
            value = source[key];

        if (isStrictComparable(value)) {
          return function(object) {
            return object != null && object[key] === value && hasOwnProperty.call(object, key);
          };
        }
      }
      var values = Array(length),
          strictCompareFlags = Array(length);

      while (length--) {
        value = source[props[length]];
        values[length] = value;
        strictCompareFlags[length] = isStrictComparable(value);
      }
      return function(object) {
        return baseIsMatch(object, props, values, strictCompareFlags);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not coerce `key`
     * to a string.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} value The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(key, value) {
      if (isStrictComparable(value)) {
        return function(object) {
          return object != null && object[key] === value;
        };
      }
      return function(object) {
        return object != null && baseIsEqual(value, object[key], null, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns the destination object.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));
      (isSrcArr ? arrayEach : baseForOwn)(source, function(srcValue, key, source) {
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          return baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = typeof result == 'undefined';

        if (isCommon) {
          result = srcValue;
        }
        if ((isSrcArr || typeof result != 'undefined') &&
            (isCommon || (result === result ? (result !== value) : (value === value)))) {
          object[key] = result;
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = typeof result == 'undefined';

      if (isCommon) {
        result = srcValue;
        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (value ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` which does not coerce `key` to a string.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     */
    function basePullAt(array, indexes) {
      var length = indexes.length,
          result = baseAt(array, indexes);

      indexes.sort(baseCompareAscending);
      while (length--) {
        var index = parseFloat(indexes[length]);
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands or `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string[]} props The property names to sort by.
     * @param {boolean[]} orders The sort orders of `props`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, props, orders) {
      var index = -1,
          length = collection.length,
          result = isLength(length) ? Array(length) : [];

      baseEach(collection, function(value) {
        var length = props.length,
            criteria = Array(length);

        while (length--) {
          criteria[length] = value == null ? undefined : value[props[length]];
        }
        result[++index] = { 'criteria': criteria, 'index': index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= 200,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * returned by `keysFunc`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved unwrapped value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var args = [result],
            action = actions[index];

        push.apply(args, action.args);
        result = action.func.apply(action.thisArg, args);
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest, instead
     *  of the lowest, index at which a value should be inserted into `array`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (retHighest ? (computed <= value) : (computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest, instead
     *  of the lowest, index at which a value should be inserted into `array`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsUndef = typeof value == 'undefined';

      while (low < high) {
        var mid = floor((low + high) / 2),
            computed = iteratee(array[mid]),
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || typeof computed != 'undefined');
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (typeof thisArg == 'undefined') {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      return bufferSlice.call(buffer, 0);
    }
    if (!bufferSlice) {
      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
        var byteLength = buffer.byteLength,
            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
            result = new ArrayBuffer(byteLength);

        if (floatLength) {
          var view = new Float64Array(result, 0, floatLength);
          view.set(new Float64Array(buffer, 0, floatLength));
        }
        if (byteLength != offset) {
          view = new Uint8Array(result, offset);
          view.set(new Uint8Array(buffer, offset));
        }
        return result;
      };
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(argsLength + leftLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var pad = argsIndex;
      while (++rightIndex < rightLength) {
        result[pad + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[pad + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an accumulator
     * object composed from the results of running each element in the collection
     * through an iteratee.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that assigns properties of source object(s) to a given
     * destination object.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return function() {
        var args = arguments,
            length = args.length,
            object = args[0];

        if (length < 2 || object == null) {
          return object;
        }
        var customizer = args[length - 2],
            thisArg = args[length - 1],
            guard = args[3];

        if (length > 3 && typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = (length > 2 && typeof thisArg == 'function') ? thisArg : null;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(args[1], args[2], guard)) {
          customizer = length == 3 ? null : customizer;
          length = 2;
        }
        var index = 0;
        while (++index < length) {
          var source = args[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
      return new SetCache(values);
    };

    /**
     * Creates a function to compose other functions into a single function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new composer function.
     */
    function createComposer(fromRight) {
      return function() {
        var length = arguments.length,
            index = length,
            fromIndex = fromRight ? (length - 1) : 0;

        if (!length) {
          return function() { return arguments[0]; };
        }
        var funcs = Array(length);
        while (index--) {
          funcs[index] = arguments[index];
          if (typeof funcs[index] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
        }
        return function() {
          var index = fromIndex,
              result = funcs[index].apply(this, arguments);

          while ((fromRight ? index-- : ++index < length)) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, arguments);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that gets the extremum value of a collection.
     *
     * @private
     * @param {Function} arrayFunc The function to get the extremum value from an array.
     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
     *  extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(arrayFunc, isMin) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = null;
        }
        var func = getCallback(),
            noIteratee = iteratee == null;

        if (!(func === baseCallback && noIteratee)) {
          noIteratee = false;
          iteratee = func(iteratee, thisArg, 3);
        }
        if (noIteratee) {
          var isArr = isArray(collection);
          if (!isArr && isString(collection)) {
            iteratee = charAtCallback;
          } else {
            return arrayFunc(isArr ? collection : toIterable(collection));
          }
        }
        return extremumBy(collection, iteratee, isMin);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

      var Ctor = !isBindKey && createCtorWrapper(func),
          key = func;

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : null,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : null,
                newHoldersRight = isCurry ? null : argsHolders,
                newPartials = isCurry ? args : null,
                newPartialsRight = isCurry ? null : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var result = createHybridWrapper(func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity);
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this;
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        var fn = (this && this !== root && this instanceof wrapper) ? (Ctor || createCtorWrapper(func)) : func;
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the pad required for `string` based on the given padding length.
     * The `chars` string may be truncated if the number of padding characters
     * exceeds the padding length.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPad(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(argsLength + leftLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = null;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = null;
      }
      var data = !isBindKey && getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data && data !== true) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length,
          result = true;

      if (arrLength != othLength && !(isWhere && othLength > arrLength)) {
        return false;
      }
      // Deep compare the contents, ignoring non-numeric properties.
      while (result && ++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        result = undefined;
        if (customizer) {
          result = isWhere
            ? customizer(othValue, arrValue, index)
            : customizer(arrValue, othValue, index);
        }
        if (typeof result == 'undefined') {
          // Recursively compare arrays (susceptible to call stack limits).
          if (isWhere) {
            var othIndex = othLength;
            while (othIndex--) {
              othValue = other[othIndex];
              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
              if (result) {
                break;
              }
            }
          } else {
            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
          }
        }
      }
      return !!result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} value The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            // But, treat `-0` vs. `+0` as not equal.
            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isWhere) {
        return false;
      }
      var hasCtor,
          index = -1;

      while (++index < objLength) {
        var key = objProps[index],
            result = hasOwnProperty.call(other, key);

        if (result) {
          var objValue = object[key],
              othValue = other[key];

          result = undefined;
          if (customizer) {
            result = isWhere
              ? customizer(othValue, objValue, key)
              : customizer(objValue, othValue, key);
          }
          if (typeof result == 'undefined') {
            // Recursively compare objects (susceptible to call stack limits).
            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
          }
        }
        if (!result) {
          return false;
        }
        hasCtor || (hasCtor = key == 'constructor');
      }
      if (!hasCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments; (value, index, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [isMin] Specify returning the minimum, instead of the
     *  maximum, extremum value.
     * @returns {*} Returns the extremum value.
     */
    function extremumBy(collection, iteratee, isMin) {
      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
          computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = iteratee(value, index, collection);
        if ((isMin ? (current < computed) : (current > computed)) ||
            (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} [transforms] The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms ? transforms.length : 0;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Checks if `func` is eligible for `this` binding.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is eligible, else `false`.
     */
    function isBindable(func) {
      var support = lodash.support,
          result = !(support.funcNames ? func.name : support.funcDecomp);

      if (!result) {
        var source = fnToString.call(func);
        if (!support.funcNames) {
          result = !reFuncName.test(source);
        }
        if (!result) {
          // Check if `func` references the `this` keyword and store the result.
          result = reThis.test(source) || isNative(func);
          baseSetData(func, result);
        }
      }
      return result;
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = +value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number') {
        var length = object.length,
            prereq = isLength(length) && isIndex(index, length);
      } else {
        prereq = type == 'string' && index in object;
      }
      if (prereq) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on ES `ToLength`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
     * for more details.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask;

      var arityFlags = ARY_FLAG | REARG_FLAG,
          bindFlags = BIND_FLAG | BIND_KEY_FLAG,
          comboFlags = arityFlags | bindFlags | CURRY_BOUND_FLAG | CURRY_RIGHT_FLAG;

      var isAry = bitmask & ARY_FLAG && !(srcBitmask & ARY_FLAG),
          isRearg = bitmask & REARG_FLAG && !(srcBitmask & REARG_FLAG),
          argPos = (isRearg ? data : source)[7],
          ary = (isAry ? data : source)[8];

      var isCommon = !(bitmask >= REARG_FLAG && srcBitmask > bindFlags) &&
        !(bitmask > bindFlags && srcBitmask >= REARG_FLAG);

      var isCombo = (newBitmask >= arityFlags && newBitmask <= comboFlags) &&
        (bitmask < REARG_FLAG || ((isRearg || isAry) && argPos.length <= ary));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * A specialized version of `_.pick` that picks `object` properties specified
     * by the `props` array.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` that picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `_.isPlainObject` which checks if `value`
     * is an object created by the `Object` constructor or has a `[[Prototype]]`
     * of `null`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var Ctor,
          support = lodash.support;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
          (!hasOwnProperty.call(value, 'constructor') &&
            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length,
          support = lodash.support;

      var allowIndexes = length && isLength(length) &&
        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isLength(value.length)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(+size || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(ceil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using
     * `SameValueZero` for equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    function difference() {
      var args = arguments,
          index = -1,
          length = args.length;

      while (++index < length) {
        var value = args[index];
        if (isArray(value) || isArguments(value)) {
          break;
        }
      }
      return baseDifference(value, baseFlatten(args, false, true, ++index));
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      predicate = getCallback(predicate, thisArg, 3);
      while (length-- && predicate(array[length], length, array)) {}
      return baseSlice(array, 0, length + 1);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var index = -1;
      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length && predicate(array[index], index, array)) {}
      return baseSlice(array, index);
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for, instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      predicate = getCallback(predicate, thisArg, 3);
      while (length--) {
        if (predicate(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]];
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4];
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep, false, 0) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4];
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true, false, 0) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
     * it is used as the offset from the end of `array`. If `array` is sorted
     * providing `true` for `fromIndex` performs a faster binary search.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value),
            other = array[index];

        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values in all provided arrays using `SameValueZero`
     * for equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = [],
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf;

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push((isCommon && value.length >= 120) ? createCache(argsIndex && value) : null);
        }
      }
      argsLength = args.length;
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [],
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          argsIndex = argsLength;
          while (--argsIndex) {
            var cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using `SameValueZero` for equality
     * comparisons.
     *
     * **Notes:**
     *  - Unlike `_.without`, this method mutates `array`.
     *  - `SameValueZero` comparisons are like strict equality comparisons, e.g. `===`,
     *    except that `NaN` matches `NaN`. See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     *    for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    function pullAt(array) {
      return basePullAt(array || [], baseFlatten(arguments, false, false, 1));
    }

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This function is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    function sortedIndex(array, value, iteratee, thisArg) {
      var func = getCallback(iteratee);
      return (func === baseCallback && iteratee == null)
        ? binaryIndex(array, value)
        : binaryIndexBy(array, value, func(iteratee, thisArg, 1));
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    function sortedLastIndex(array, value, iteratee, thisArg) {
      var func = getCallback(iteratee);
      return (func === baseCallback && iteratee == null)
        ? binaryIndex(array, value, true)
        : binaryIndexBy(array, value, func(iteratee, thisArg, 1), true);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      predicate = getCallback(predicate, thisArg, 3);
      while (length-- && predicate(array[length], length, array)) {}
      return baseSlice(array, length + 1);
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var index = -1;
      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length && predicate(array[index], index, array)) {}
      return baseSlice(array, 0, index);
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * `SameValueZero` for equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, false, true, 0));
    }

    /**
     * Creates a duplicate-value-free version of an array using `SameValueZero`
     * for equality comparisons. Providing `true` for `isSorted` performs a faster
     * search algorithm for sorted arrays. If an iteratee function is provided it
     * is invoked for each value in the array to generate the criterion by which
     * uniqueness is computed. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1]);
     * // => [1, 2]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
        isSorted = false;
      }
      var func = getCallback();
      if (!(func === baseCallback && iteratee == null)) {
        iteratee = func(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-`_.zip`
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      var index = -1,
          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
          result = Array(length);

      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * Creates an array excluding all provided values using `SameValueZero` for
     * equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    function without(array) {
      return baseDifference(array, baseSlice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Symmetric_difference) for
     * more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseDifference(result, array).concat(baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var length = arguments.length,
          array = Array(length);

      while (length--) {
        array[length] = arguments[length];
      }
      return unzip(array);
    }

    /**
     * Creates an object composed from arrays of property names and values. Provide
     * either a single two dimensional array, e.g. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _([1, 2, 3])
     *  .last()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => [3]
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapper = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapper = wrapper.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapper.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapper = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapper = wrapper.plant(other);
     *
     * otherWrapper.value();
     * // => [9, 16]
     *
     * wrapper.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        if (this.__actions__.length) {
          value = new LazyWrapper(this);
        }
        return new LodashWrapper(value.reverse(), this.__chain__);
      }
      return this.thru(function(value) {
        return value.reverse();
      });
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var length = collection ? collection.length : 0;
      if (isLength(length)) {
        collection = toIterable(collection);
      }
      return baseAt(collection, baseFlatten(arguments, false, false, 1));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    function find(collection, predicate, thisArg) {
      if (isArray(collection)) {
        var index = findIndex(collection, predicate, thisArg);
        return index > -1 ? collection[index] : undefined;
      }
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Iterator functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee, thisArg) {
      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, bindCallback(iteratee, thisArg, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).join(',');
     * // => logs each value from right to left and returns the array
     */
    function forEachRight(collection, iteratee, thisArg) {
      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, bindCallback(iteratee, thisArg, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using `SameValueZero` for equality
     * comparisons. If `fromIndex` is negative, it is used as the offset from
     * the end of `collection`.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex) {
      var length = collection ? collection.length : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (!length) {
        return false;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      } else {
        fromIndex = 0;
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
        : (getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in `collection`,
     * returning an array of the results of each invoked method. Any additional
     * arguments are provided to each invoked method. If `methodName` is a function
     * it is invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      return baseInvoke(collection, methodName, baseSlice(arguments, 2));
    }

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as interatees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`, `drop`,
     * `dropRight`, `fill`, `flatten`, `invert`, `max`, `min`, `parseInt`, `slice`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimLeft`, `trimRight`,
     * `trunc`, `random`, `range`, `sample`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     *  create a `_.property` or `_.matches` style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the value of `key` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} key The key of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, key) {
      return map(collection, baseProperty(key));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg`and invoked with four arguments;
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as interatees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `merge`, and `sortAllBy`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator, thisArg) {
      var func = isArray(collection) ? arrayReduce : baseReduce;
      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator, thisArg) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce;
      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See [Wikipedia](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      collection = toIterable(collection);

      var index = -1,
          length = collection.length,
          result = Array(length);

      while (++index < length) {
        var rand = baseRandom(0, index);
        if (index != rand) {
          result[index] = result[rand];
        }
        result[rand] = collection[index];
      }
      return result;
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity] The function
     *  invoked per iteration. If a property name or an object is provided it is
     *  used to create a `_.property` or `_.matches` style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      var index = -1,
          length = collection.length,
          result = isLength(length) ? Array(length) : [];

      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = null;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      baseEach(collection, function(value, key, collection) {
        result[++index] = { 'criteria': iteratee(value, key, collection), 'index': index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it sorts by property names
     * instead of an iteratee function.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(string|string[])} props The property names to sort by,
     *  specified as individual property names or arrays of property names.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 26 },
     *   { 'user': 'fred',   'age': 30 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortByAll(collection) {
      if (collection == null) {
        return [];
      }
      var args = arguments,
          guard = args[3];

      if (guard && isIterateeCall(args[1], args[2], guard)) {
        args = [collection, args[1]];
      }
      return baseSortByOrder(collection, baseFlatten(args, false, false, 1), []);
    }

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the property names to sort by. A truthy value in `orders`
     * will sort the corresponding property name in ascending order while a
     * falsey value will sort it in descending order.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string[]} props The property names to sort by.
     * @param {boolean[]} orders The sort orders of `props`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 26 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);
     * // => [['barney', 36], ['barney', 26], ['fred', 40], ['fred', 30]]
     */
    function sortByOrder(collection, props, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(props, orders, guard)) {
        orders = null;
      }
      if (!isArray(props)) {
        props = props == null ? [] : [props];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, props, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = null;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        } else {
          func = null;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the `length`
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    function bind(func, thisArg) {
      var bitmask = BIND_FLAG;
      if (arguments.length > 2) {
        var partials = baseSlice(arguments, 2),
            holders = replaceHolders(partials, bind.placeholder);

        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the `length` property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    function bindAll(object) {
      return baseBindAll(object,
        arguments.length > 1
          ? baseFlatten(arguments, false, false, 1)
          : functions(object)
      );
    }

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (arguments.length > 2) {
        var partials = baseSlice(arguments, 2),
            holders = replaceHolders(partials, bindKey.placeholder);

        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    }

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the `length` property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      if (guard && isIterateeCall(func, arity, guard)) {
        arity = null;
      }
      var result = createWrapper(func, CURRY_FLAG, null, null, null, null, null, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the `length` property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      if (guard && isIterateeCall(func, arity, guard)) {
        arity = null;
      }
      var result = createWrapper(func, CURRY_RIGHT_FLAG, null, null, null, null, null, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a function that delays invoking `func` until after `wait` milliseconds
     * have elapsed since the last time it was invoked. The created function comes
     * with a `cancel` method to cancel delayed invocations. Provide an options
     * object to indicate that `func` should be invoked on the leading and/or
     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
     * function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      return baseDelay(func, 1, arguments, 1);
    }

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      return baseDelay(func, wait, arguments, 2);
    }

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createComposer();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createComposer(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the ES `Map` method interface
     * of `get`, `has`, and `set`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            cache = memoized.cache,
            key = resolver ? resolver.apply(this, args) : args[0];

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(func, 2);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the `length` property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    function partial(func) {
      var partials = baseSlice(arguments, 1),
          holders = replaceHolders(partials, partial.placeholder);

      return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
    }

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the `length` property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    function partialRight(func) {
      var partials = baseSlice(arguments, 1),
          holders = replaceHolders(partials, partialRight.placeholder);

      return createWrapper(func, PARTIAL_RIGHT_FLAG, null, partials, holders);
    }

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    function rearg(func) {
      var indexes = baseFlatten(arguments, false, false, 1);
      return createWrapper(func, REARG_FLAG, null, null, null, indexes);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and the array of arguments provided to the created
     * function much like [Function#apply](http://es5.github.io/#x15.3.4.3).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {*} Returns the new function.
     * @example
     *
     * var spread = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * spread(['Fred', 'hello']);
     * // => 'Fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a function that only invokes `func` at most once per every `wait`
     * milliseconds. The created function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the throttled function return the result of the last
     * `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = +wait;
      debounceOptions.trailing = trailing;
      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the structured clone algorithm.
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
      return baseClone(value, isDeep, customizer);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the structured clone algorithm.
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
      return baseClone(value, true, customizer);
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      var length = isObjectLike(value) ? value.length : undefined;
      return (isLength(length) && objToString.call(value) == argsTag) || false;
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return (value === true || value === false || isObjectLike(value) && objToString.call(value) == boolTag) || false;
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return (isObjectLike(value) && objToString.call(value) == dateTag) || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return (value && value.nodeType === 1 && isObjectLike(value) &&
        (objToString.call(value).indexOf('Element') > -1)) || false;
    }
    // Fallback for environments without DOM support.
    if (!support.dom) {
      isElement = function(value) {
        return (value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value)) || false;
      };
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      var length = value.length;
      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments; (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
        return value === other;
      }
      var result = customizer ? customizer(value, other) : undefined;
      return typeof result == 'undefined' ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return (isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag) || false;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on ES `Number.isFinite`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    var isFinite = nativeNumIsFinite || function(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    };

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return objToString.call(value) == funcTag;
    };

    /**
     * Checks if `value` is the language type of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return type == 'function' || (value && type == 'object') || false;
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments; (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      var props = keys(source),
          length = props.length;

      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
      if (!customizer && length == 1) {
        var key = props[0],
            value = source[key];

        if (isStrictComparable(value)) {
          return object != null && value === object[key] && hasOwnProperty.call(object, key);
        }
      }
      var values = Array(length),
          strictCompareFlags = Array(length);

      while (length--) {
        value = values[length] = source[props[length]];
        strictCompareFlags[length] = isStrictComparable(value);
      }
      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as native `isNaN` which returns `true`
     * for `undefined` and other non-numeric values. See the [ES5 spec](https://es5.github.io/#x15.1.2.4)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (objToString.call(value) == funcTag) {
        return reNative.test(fnToString.call(value));
      }
      return (isObjectLike(value) && reHostCtor.test(value)) || false;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag) || false;
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && objToString.call(value) == objectTag)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? value.length : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments;
     * (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return typeof value == 'undefined' ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(baseAssign);

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = null;
      }
      return properties ? baseCopy(properties, result, keys(properties)) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    function defaults(object) {
      if (object == null) {
        return object;
      }
      var args = arrayCopy(arguments);
      args.push(assignDefaults);
      return assign.apply(undefined, args);
    }

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element `predicate` returns truthy for, instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(object, predicate, baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(object, predicate, baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments; (value, key, object). Iterator functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee, thisArg) {
      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
        iteratee = bindCallback(iteratee, thisArg, 3);
      }
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    function forInRight(object, iteratee, thisArg) {
      iteratee = bindCallback(iteratee, thisArg, 3);
      return baseForRight(object, iteratee, keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments; (value, key, object). Iterator functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee, thisArg) {
      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
        iteratee = bindCallback(iteratee, thisArg, 3);
      }
      return baseForOwn(object, iteratee);
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    function forOwnRight(object, iteratee, thisArg) {
      iteratee = bindCallback(iteratee, thisArg, 3);
      return baseForRight(object, iteratee, keys);
    }

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Checks if `key` exists as a direct property of `object` instead of an
     * inherited property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {string} key The key to check.
     * @returns {boolean} Returns `true` if `key` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 3 };
     *
     * _.has(object, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = null;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (object) {
        var Ctor = object.constructor,
            length = object.length;
      }
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && (length && isLength(length)))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee, thisArg) {
      var result = {};
      iteratee = getCallback(iteratee, thisArg, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments; (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If `predicate` is provided it is invoked for each property
     * of `object` omitting the properties `predicate` returns truthy for. The
     * predicate is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    function omit(object, predicate, thisArg) {
      if (object == null) {
        return {};
      }
      if (typeof predicate != 'function') {
        var props = arrayMap(baseFlatten(arguments, false, false, 1), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      predicate = bindCallback(predicate, thisArg, 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    }

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments; (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    function pick(object, predicate, thisArg) {
      if (object == null) {
        return {};
      }
      return typeof predicate == 'function'
        ? pickByCallback(object, bindCallback(predicate, thisArg, 3))
        : pickByArray(object, baseFlatten(arguments, false, false, 1));
    }

    /**
     * Resolves the value of property `key` on `object`. If the value of `key` is
     * a function it is invoked with the `this` binding of `object` and its result
     * is returned, else the property value is returned. If the property value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to resolve.
     * @param {*} [defaultValue] The value returned if the property value
     *  resolves to `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'user': 'fred', 'age': _.constant(40) };
     *
     * _.result(object, 'user');
     * // => 'fred'
     *
     * _.result(object, 'age');
     * // => 40
     *
     * _.result(object, 'status', 'busy');
     * // => 'busy'
     *
     * _.result(object, 'status', _.constant('busy'));
     * // => 'busy'
     */
    function result(object, key, defaultValue) {
      var value = object == null ? undefined : object[key];
      if (typeof value == 'undefined') {
        value = defaultValue;
      }
      return isFunction(value) ? value.call(object) : value;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments; (accumulator, value, key, object). Iterator functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) && Ctor.prototype);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (typeof end === 'undefined') {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= start && value < end;
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = null;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to camel case.
     * See [Wikipedia](https://en.wikipedia.org/wiki/CamelCase) for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting latin-1 supplementary letters to basic latin letters.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter);
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = typeof position == 'undefined'
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't require escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#102](https://html5sec.org/#102),
     * [#108](https://html5sec.org/#108), and [#133](https://html5sec.org/#133) of
     * the [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
     *
     * When working with HTML you should always quote attribute values to reduce
     * XSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "^", "$", ".", "|", "?", "*",
     * "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, '\\$&')
        : string;
    }

    /**
     * Converts `string` to kebab case.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles) for
     * more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it is shorter then the given
     * padding length. The `chars` string may be truncated if the number of padding
     * characters can't be evenly divided by the padding length.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = floor(mid),
          rightLength = ceil(mid);

      chars = createPad('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it is shorter then the given padding
     * length. The `chars` string may be truncated if the number of padding
     * characters exceeds the padding length.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    function padLeft(string, length, chars) {
      string = baseToString(string);
      return string && (createPad(string, length, chars) + string);
    }

    /**
     * Pads `string` on the right side if it is shorter then the given padding
     * length. The `chars` string may be truncated if the number of padding
     * characters exceeds the padding length.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    function padRight(string, length, chars) {
      string = baseToString(string);
      return string && (string + createPad(string, length, chars));
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the ES5 implementation of `parseInt`.
     * See the [ES5 spec](https://es5.github.io/#E) for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard && isIterateeCall(string, radix, guard)) {
        radix = 0;
      }
      return nativeParseInt(string, radix);
    }
    // Fallback for environments with pre-ES5 implementations.
    if (nativeParseInt(whitespace + '08') != 8) {
      parseInt = function(string, radix, guard) {
        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
        // Chrome fails to trim leading <BOM> whitespace characters.
        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        string = trim(string);
        return nativeParseInt(string, radix || (reHexPrefix.test(string) ? 16 : 10));
      };
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = floor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to snake case.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Snake_case) for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to start case.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes sourceURLs for easier debugging.
     * See the [HTML5 Rocks article on sourcemaps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for more details.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = null;
      }
      string = baseToString(string);
      options = baseAssign(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = baseAssign(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar]
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it is longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * //=> 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = null;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = null;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    function attempt() {
      var func = arguments[0],
          length = arguments.length,
          args = Array(length ? (length - 1) : 0);

      while (--length > 0) {
        args[length - 1] = arguments[length];
      }
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = null;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function which performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function which compares the property value of `key` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} key The key of the property to get.
     * @param {*} value The value to compare.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred', 'age': 40 }
     */
    function matchesProperty(key, value) {
      return baseMatchesProperty(key + '', baseClone(value, true));
    }

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=this] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * // use `_.runInContext` to avoid potential conflicts (esp. in Node.js)
     * var _ = require('lodash').runInContext();
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj && keys(source),
            methodNames = props && props.length && baseFunctions(source, props);

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__);
                (result.__actions__ = arrayCopy(this.__actions__)).push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }
              var args = [this.value()];
              push.apply(args, arguments);
              return func.apply(object, args);
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function which returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function which returns the property value of `key` on a given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'barney' }
     * ];
     *
     * var getName = _.property('user');
     *
     * _.map(users, getName);
     * // => ['fred', barney']
     *
     * _.pluck(_.sortBy(users, getName), 'user');
     * // => ['barney', 'fred']
     */
    function property(key) {
      return baseProperty(key + '');
    }

    /**
     * The inverse of `_.property`; this method creates a function which returns
     * the property value of a given key on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to inspect.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'a': 3, 'b': 1, 'c': 2 };
     *
     * _.map(['a', 'c'], _.propertyOf(object));
     * // => [3, 2]
     *
     * _.sortBy(['a', 'b', 'c'], _.propertyOf(object));
     * // => ['b', 'c', 'a']
     */
    function propertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `start` is less than `end`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = null;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(ceil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = +n;

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return augend + addend;
    }

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 };
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 };
     */
    var max = createExtremum(arrayMax);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 };
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 };
     */
    var min = createExtremum(arrayMin, true);

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6, 2]);
     * // => 12
     *
     * _.sum({ 'a': 4, 'b': 6, 'c': 2 });
     * // => 12
     */
    function sum(collection) {
      if (!isArray(collection)) {
        collection = toIterable(collection);
      }
      var length = collection.length,
          result = 0;

      while (length--) {
        result += +collection[length] || 0;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['dropWhile', 'filter', 'map', 'takeWhile'], function(methodName, type) {
      var isFilter = type != LAZY_MAP_FLAG,
          isDropWhile = type == LAZY_DROP_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var filtered = this.__filtered__,
            result = (filtered && isDropWhile) ? new LazyWrapper(this) : this.clone(),
            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

        iteratees.push({
          'done': false,
          'count': 0,
          'index': 0,
          'iteratee': getCallback(iteratee, thisArg, 1),
          'limit': -1,
          'type': type
        });

        result.__filtered__ = filtered || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      var whileName = methodName + 'While';

      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__,
            result = (filtered && !index) ? this.dropWhile() : this.clone();

        n = n == null ? 1 : nativeMax(floor(n) || 0, 0);
        if (filtered) {
          if (index) {
            result.__takeCount__ = nativeMin(result.__takeCount__, n);
          } else {
            last(result.__iteratees__).limit = n;
          }
        } else {
          var views = result.__views__ || (result.__views__ = []);
          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };

      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
        return this.reverse()[whileName](predicate, thisArg).reverse();
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : baseProperty;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);
      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

      if (typeof end != 'undefined') {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.toArray = function() {
      return this.drop(0);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName],
          checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments,
            length = args.length,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // avoid lazy use if the iteratee has a `length` other than `1`
          isLazy = useLazy = false;
        }
        var onlyLazy = isLazy && !isHybrid;
        if (retUnwrapped && !chainAll) {
          return onlyLazy
            ? func.call(value)
            : lodashFunc.call(lodash, this.value());
        }
        var interceptor = function(value) {
          var otherArgs = [value];
          push.apply(otherArgs, args);
          return lodashFunc.apply(lodash, otherArgs);
        };
        if (useLazy) {
          var wrapper = onlyLazy ? value : new LazyWrapper(this),
              result = func.apply(wrapper, args);

          if (!retUnwrapped && (isHybrid || result.__actions__)) {
            var actions = result.__actions__ || (result.__actions__ = []);
            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
          }
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['concat', 'join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Narwhal or Rhino -require.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],7:[function(require,module,exports){
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
        Constants
    ************************************/

    var numeral,
        VERSION = '1.5.3',
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;
            
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);
        
        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
        Top Level Functions
    ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };
    
    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }
        
        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }
        
        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            'use strict';
            
            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }
            
            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }

    
    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
        return mp > mn ? mp : mn;
        }, -Infinity);
    }        


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this, 
                  inputString ? inputString : defaultFormat, 
                  (roundingFunction !== undefined) ? roundingFunction : Math.round
              );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
                return inputString; 
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);            
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return numeral;
        });
    }
}).call(this);

},{}],8:[function(require,module,exports){
'use strict';

function ToObject(val) {
	if (val == null) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var keys;
	var to = ToObject(target);

	for (var s = 1; s < arguments.length; s++) {
		from = arguments[s];
		keys = Object.keys(Object(from));

		for (var i = 0; i < keys.length; i++) {
			to[keys[i]] = from[keys[i]];
		}
	}

	return to;
};

},{}],9:[function(require,module,exports){
var React = require('react');
var PanelGroup = require('./PanelGroup');

var Accordion = React.createClass({displayName: "Accordion",
  render: function () {
    return (
      React.createElement(PanelGroup, React.__spread({},  this.props, {accordion: true}), 
        this.props.children
      )
    );
  }
});

module.exports = Accordion;
},{"./PanelGroup":46,"react":280}],10:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var AffixMixin = require('./AffixMixin');
var domUtils = require('./utils/domUtils');

var Affix = React.createClass({displayName: "Affix",
  statics: {
    domUtils: domUtils
  },

  mixins: [AffixMixin],

  render: function () {
    var holderStyle = {top: this.state.affixPositionTop};
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, this.state.affixClass), style: holderStyle}), 
        this.props.children
      )
    );
  }
});

module.exports = Affix;
},{"./AffixMixin":11,"./utils/domUtils":67,"./utils/joinClasses":68,"react":280}],11:[function(require,module,exports){
/* global window, document */

var React = require('react');
var domUtils = require('./utils/domUtils');
var EventListener = require('./utils/EventListener');

var AffixMixin = {
  propTypes: {
    offset: React.PropTypes.number,
    offsetTop: React.PropTypes.number,
    offsetBottom: React.PropTypes.number
  },

  getInitialState: function () {
    return {
      affixClass: 'affix-top'
    };
  },

  getPinnedOffset: function (DOMNode) {
    if (this.pinnedOffset) {
      return this.pinnedOffset;
    }

    DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, '');
    DOMNode.className += DOMNode.className.length ? ' affix' : 'affix';

    this.pinnedOffset = domUtils.getOffset(DOMNode).top - window.pageYOffset;

    return this.pinnedOffset;
  },

  checkPosition: function () {
    var DOMNode, scrollHeight, scrollTop, position, offsetTop, offsetBottom,
        affix, affixType, affixPositionTop;

    // TODO: or not visible
    if (!this.isMounted()) {
      return;
    }

    DOMNode = this.getDOMNode();
    scrollHeight = document.documentElement.offsetHeight;
    scrollTop = window.pageYOffset;
    position = domUtils.getOffset(DOMNode);
    offsetTop;
    offsetBottom;

    if (this.affixed === 'top') {
      position.top += scrollTop;
    }

    offsetTop = this.props.offsetTop != null ?
      this.props.offsetTop : this.props.offset;
    offsetBottom = this.props.offsetBottom != null ?
      this.props.offsetBottom : this.props.offset;

    if (offsetTop == null && offsetBottom == null) {
      return;
    }
    if (offsetTop == null) {
      offsetTop = 0;
    }
    if (offsetBottom == null) {
      offsetBottom = 0;
    }

    if (this.unpin != null && (scrollTop + this.unpin <= position.top)) {
      affix = false;
    } else if (offsetBottom != null && (position.top + DOMNode.offsetHeight >= scrollHeight - offsetBottom)) {
      affix = 'bottom';
    } else if (offsetTop != null && (scrollTop <= offsetTop)) {
      affix = 'top';
    } else {
      affix = false;
    }

    if (this.affixed === affix) {
      return;
    }

    if (this.unpin != null) {
      DOMNode.style.top = '';
    }

    affixType = 'affix' + (affix ? '-' + affix : '');

    this.affixed = affix;
    this.unpin = affix === 'bottom' ?
      this.getPinnedOffset(DOMNode) : null;

    if (affix === 'bottom') {
      DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, 'affix-bottom');
      affixPositionTop = scrollHeight - offsetBottom - DOMNode.offsetHeight - domUtils.getOffset(DOMNode).top;
    }

    this.setState({
      affixClass: affixType,
      affixPositionTop: affixPositionTop
    });
  },

  checkPositionWithEventLoop: function () {
    setTimeout(this.checkPosition, 0);
  },

  componentDidMount: function () {
    this._onWindowScrollListener =
      EventListener.listen(window, 'scroll', this.checkPosition);
    this._onDocumentClickListener =
      EventListener.listen(document, 'click', this.checkPositionWithEventLoop);
  },

  componentWillUnmount: function () {
    if (this._onWindowScrollListener) {
      this._onWindowScrollListener.remove();
    }

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }
  },

  componentDidUpdate: function (prevProps, prevState) {
    if (prevState.affixClass === this.state.affixClass) {
      this.checkPositionWithEventLoop();
    }
  }
};

module.exports = AffixMixin;
},{"./utils/EventListener":60,"./utils/domUtils":67,"react":280}],12:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');


var Alert = React.createClass({displayName: "Alert",
  mixins: [BootstrapMixin],

  propTypes: {
    onDismiss: React.PropTypes.func,
    dismissAfter: React.PropTypes.number
  },

  getDefaultProps: function () {
    return {
      bsClass: 'alert',
      bsStyle: 'info'
    };
  },

  renderDismissButton: function () {
    return (
      React.createElement("button", {
        type: "button", 
        className: "close", 
        onClick: this.props.onDismiss, 
        "aria-hidden": "true"}, 
        "×"
      )
    );
  },

  render: function () {
    var classes = this.getBsClassSet();
    var isDismissable = !!this.props.onDismiss;

    classes['alert-dismissable'] = isDismissable;

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        isDismissable ? this.renderDismissButton() : null, 
        this.props.children
      )
    );
  },

  componentDidMount: function() {
    if (this.props.dismissAfter && this.props.onDismiss) {
      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
    }
  },

  componentWillUnmount: function() {
    clearTimeout(this.dismissTimer);
  }
});

module.exports = Alert;
},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],13:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var ValidComponentChildren = require('./utils/ValidComponentChildren');
var classSet = require('./utils/classSet');

var Badge = React.createClass({displayName: "Badge",
  propTypes: {
    pullRight: React.PropTypes.bool
  },

  hasContent: function () {
    return ValidComponentChildren.hasValidComponent(this.props.children) ||
      (typeof this.props.children === 'string') ||
      (typeof this.props.children === 'number')
  },

  render: function () {
    var classes = {
      'pull-right': this.props.pullRight,
      'badge': this.hasContent()
    };
    return (
      React.createElement("span", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Badge;

},{"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],14:[function(require,module,exports){
var React = require('react');
var constants = require('./constants');

var BootstrapMixin = {
  propTypes: {
    bsClass: React.PropTypes.oneOf(Object.keys(constants.CLASSES)),
    bsStyle: React.PropTypes.oneOf(Object.keys(constants.STYLES)),
    bsSize: React.PropTypes.oneOf(Object.keys(constants.SIZES))
  },

  getBsClassSet: function () {
    var classes = {};

    var bsClass = this.props.bsClass && constants.CLASSES[this.props.bsClass];
    if (bsClass) {
      classes[bsClass] = true;

      var prefix = bsClass + '-';

      var bsSize = this.props.bsSize && constants.SIZES[this.props.bsSize];
      if (bsSize) {
        classes[prefix + bsSize] = true;
      }

      var bsStyle = this.props.bsStyle && constants.STYLES[this.props.bsStyle];
      if (this.props.bsStyle) {
        classes[prefix + bsStyle] = true;
      }
    }

    return classes;
  }
};

module.exports = BootstrapMixin;
},{"./constants":57,"react":280}],15:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var Button = React.createClass({displayName: "Button",
  mixins: [BootstrapMixin],

  propTypes: {
    active:   React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    block:    React.PropTypes.bool,
    navItem:    React.PropTypes.bool,
    navDropdown: React.PropTypes.bool,
    componentClass: React.PropTypes.node,
    href: React.PropTypes.string,
    target: React.PropTypes.string
  },

  getDefaultProps: function () {
    return {
      bsClass: 'button',
      bsStyle: 'default',
      type: 'button'
    };
  },

  render: function () {
    var classes = this.props.navDropdown ? {} : this.getBsClassSet();
    var renderFuncName;

    classes['active'] = this.props.active;
    classes['btn-block'] = this.props.block;

    if (this.props.navItem) {
      return this.renderNavItem(classes);
    }

    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ?
      'renderAnchor' : 'renderButton';

    return this[renderFuncName](classes);
  },

  renderAnchor: function (classes) {

    var Component = this.props.componentClass || 'a';
    var href = this.props.href || '#';
    classes['disabled'] = this.props.disabled;

    return (
      React.createElement(Component, React.__spread({}, 
        this.props, 
        {href: href, 
        className: joinClasses(this.props.className, classSet(classes)), 
        role: "button"}), 
        this.props.children
      )
    );
  },

  renderButton: function (classes) {
    var Component = this.props.componentClass || 'button';

    return (
      React.createElement(Component, React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  },

  renderNavItem: function (classes) {
    var liClasses = {
      active: this.props.active
    };

    return (
      React.createElement("li", {className: classSet(liClasses)}, 
        this.renderAnchor(classes)
      )
    );
  }
});

module.exports = Button;

},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],16:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var Button = require('./Button');

var ButtonGroup = React.createClass({displayName: "ButtonGroup",
  mixins: [BootstrapMixin],

  propTypes: {
    vertical:  React.PropTypes.bool,
    justified: React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      bsClass: 'button-group'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();
    classes['btn-group'] = !this.props.vertical;
    classes['btn-group-vertical'] = this.props.vertical;
    classes['btn-group-justified'] = this.props.justified;

    return (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = ButtonGroup;
},{"./BootstrapMixin":14,"./Button":15,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],17:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var Button = require('./Button');

var ButtonToolbar = React.createClass({displayName: "ButtonToolbar",
  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'button-toolbar'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    return (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {role: "toolbar", 
        className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = ButtonToolbar;
},{"./BootstrapMixin":14,"./Button":15,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],18:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');
var BootstrapMixin = require('./BootstrapMixin');
var ValidComponentChildren = require('./utils/ValidComponentChildren');

var Carousel = React.createClass({displayName: "Carousel",
  mixins: [BootstrapMixin],

  propTypes: {
    slide: React.PropTypes.bool,
    indicators: React.PropTypes.bool,
    controls: React.PropTypes.bool,
    pauseOnHover: React.PropTypes.bool,
    wrap: React.PropTypes.bool,
    onSelect: React.PropTypes.func,
    onSlideEnd: React.PropTypes.func,
    activeIndex: React.PropTypes.number,
    defaultActiveIndex: React.PropTypes.number,
    direction: React.PropTypes.oneOf(['prev', 'next'])
  },

  getDefaultProps: function () {
    return {
      slide: true,
      interval: 5000,
      pauseOnHover: true,
      wrap: true,
      indicators: true,
      controls: true
    };
  },

  getInitialState: function () {
    return {
      activeIndex: this.props.defaultActiveIndex == null ?
        0 : this.props.defaultActiveIndex,
      previousActiveIndex: null,
      direction: null
    };
  },

  getDirection: function (prevIndex, index) {
    if (prevIndex === index) {
      return null;
    }

    return prevIndex > index ?
      'prev' : 'next';
  },

  componentWillReceiveProps: function (nextProps) {
    var activeIndex = this.getActiveIndex();

    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
      clearTimeout(this.timeout);
      this.setState({
        previousActiveIndex: activeIndex,
        direction: nextProps.direction != null ?
          nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
      });
    }
  },

  componentDidMount: function () {
    this.waitForNext();
  },

  componentWillUnmount: function() {
    clearTimeout(this.timeout);
  },

  next: function (e) {
    if (e) {
      e.preventDefault();
    }

    var index = this.getActiveIndex() + 1;
    var count = ValidComponentChildren.numberOf(this.props.children);

    if (index > count - 1) {
      if (!this.props.wrap) {
        return;
      }
      index = 0;
    }

    this.handleSelect(index, 'next');
  },

  prev: function (e) {
    if (e) {
      e.preventDefault();
    }

    var index = this.getActiveIndex() - 1;

    if (index < 0) {
      if (!this.props.wrap) {
        return;
      }
      index = ValidComponentChildren.numberOf(this.props.children) - 1;
    }

    this.handleSelect(index, 'prev');
  },

  pause: function () {
    this.isPaused = true;
    clearTimeout(this.timeout);
  },

  play: function () {
    this.isPaused = false;
    this.waitForNext();
  },

  waitForNext: function () {
    if (!this.isPaused && this.props.slide && this.props.interval &&
        this.props.activeIndex == null) {
      this.timeout = setTimeout(this.next, this.props.interval);
    }
  },

  handleMouseOver: function () {
    if (this.props.pauseOnHover) {
      this.pause();
    }
  },

  handleMouseOut: function () {
    if (this.isPaused) {
      this.play();
    }
  },

  render: function () {
    var classes = {
      carousel: true,
      slide: this.props.slide
    };

    return (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes)), 
        onMouseOver: this.handleMouseOver, 
        onMouseOut: this.handleMouseOut}), 
        this.props.indicators ? this.renderIndicators() : null, 
        React.createElement("div", {className: "carousel-inner", ref: "inner"}, 
          ValidComponentChildren.map(this.props.children, this.renderItem)
        ), 
        this.props.controls ? this.renderControls() : null
      )
    );
  },

  renderPrev: function () {
    return (
      React.createElement("a", {className: "left carousel-control", href: "#prev", key: 0, onClick: this.prev}, 
        React.createElement("span", {className: "glyphicon glyphicon-chevron-left"})
      )
    );
  },

  renderNext: function () {
    return (
      React.createElement("a", {className: "right carousel-control", href: "#next", key: 1, onClick: this.next}, 
        React.createElement("span", {className: "glyphicon glyphicon-chevron-right"})
      )
    );
  },

  renderControls: function () {
    if (this.props.wrap) {
      var activeIndex = this.getActiveIndex();
      var count = ValidComponentChildren.numberOf(this.props.children);

      return [
        (activeIndex !== 0) ? this.renderPrev() : null,
        (activeIndex !== count - 1) ? this.renderNext() : null
      ];
    }

    return [
      this.renderPrev(),
      this.renderNext()
    ];
  },

  renderIndicator: function (child, index) {
    var className = (index === this.getActiveIndex()) ?
      'active' : null;

    return (
      React.createElement("li", {
        key: index, 
        className: className, 
        onClick: this.handleSelect.bind(this, index, null)})
    );
  },

  renderIndicators: function () {
    var indicators = [];
    ValidComponentChildren
      .forEach(this.props.children, function(child, index) {
        indicators.push(
          this.renderIndicator(child, index),

          // Force whitespace between indicator elements, bootstrap
          // requires this for correct spacing of elements.
          ' '
        );
      }, this);

    return (
      React.createElement("ol", {className: "carousel-indicators"}, 
        indicators
      )
    );
  },

  getActiveIndex: function () {
    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
  },

  handleItemAnimateOutEnd: function () {
    this.setState({
      previousActiveIndex: null,
      direction: null
    }, function() {
      this.waitForNext();

      if (this.props.onSlideEnd) {
        this.props.onSlideEnd();
      }
    });
  },

  renderItem: function (child, index) {
    var activeIndex = this.getActiveIndex();
    var isActive = (index === activeIndex);
    var isPreviousActive = this.state.previousActiveIndex != null &&
            this.state.previousActiveIndex === index && this.props.slide;

    return cloneWithProps(
        child,
        {
          active: isActive,
          ref: child.ref,
          key: child.key ? child.key : index,
          index: index,
          animateOut: isPreviousActive,
          animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
          direction: this.state.direction,
          onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd: null
        }
      );
  },

  handleSelect: function (index, direction) {
    clearTimeout(this.timeout);

    var previousActiveIndex = this.getActiveIndex();
    direction = direction || this.getDirection(previousActiveIndex, index);

    if (this.props.onSelect) {
      this.props.onSelect(index, direction);
    }

    if (this.props.activeIndex == null && index !== previousActiveIndex) {
      if (this.state.previousActiveIndex != null) {
        // If currently animating don't activate the new index.
        // TODO: look into queuing this canceled call and
        // animating after the current animation has ended.
        return;
      }

      this.setState({
        activeIndex: index,
        previousActiveIndex: previousActiveIndex,
        direction: direction
      });
    }
  }
});

module.exports = Carousel;
},{"./BootstrapMixin":14,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/joinClasses":68,"react":280}],19:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var TransitionEvents = require('./utils/TransitionEvents');

var CarouselItem = React.createClass({displayName: "CarouselItem",
  propTypes: {
    direction: React.PropTypes.oneOf(['prev', 'next']),
    onAnimateOutEnd: React.PropTypes.func,
    active: React.PropTypes.bool,
    caption: React.PropTypes.node
  },

  getInitialState: function () {
    return {
      direction: null
    };
  },

  getDefaultProps: function () {
    return {
      animation: true
    };
  },

  handleAnimateOutEnd: function () {
    if (this.props.onAnimateOutEnd && this.isMounted()) {
      this.props.onAnimateOutEnd(this.props.index);
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (this.props.active !== nextProps.active) {
      this.setState({
        direction: null
      });
    }
  },

  componentDidUpdate: function (prevProps) {
    if (!this.props.active && prevProps.active) {
      TransitionEvents.addEndEventListener(
        this.getDOMNode(),
        this.handleAnimateOutEnd
      );
    }

    if (this.props.active !== prevProps.active) {
      setTimeout(this.startAnimation, 20);
    }
  },

  startAnimation: function () {
    if (!this.isMounted()) {
      return;
    }

    this.setState({
      direction: this.props.direction === 'prev' ?
        'right' : 'left'
    });
  },

  render: function () {
    var classes = {
      item: true,
      active: (this.props.active && !this.props.animateIn) || this.props.animateOut,
      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
    };

    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
      classes[this.state.direction] = true;
    }

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children, 
        this.props.caption ? this.renderCaption() : null
      )
    );
  },

  renderCaption: function () {
    return (
      React.createElement("div", {className: "carousel-caption"}, 
        this.props.caption
      )
    );
  }
});

module.exports = CarouselItem;
},{"./utils/TransitionEvents":62,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],20:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var constants = require('./constants');


var Col = React.createClass({displayName: "Col",
  propTypes: {
    xs: React.PropTypes.number,
    sm: React.PropTypes.number,
    md: React.PropTypes.number,
    lg: React.PropTypes.number,
    xsOffset: React.PropTypes.number,
    smOffset: React.PropTypes.number,
    mdOffset: React.PropTypes.number,
    lgOffset: React.PropTypes.number,
    xsPush: React.PropTypes.number,
    smPush: React.PropTypes.number,
    mdPush: React.PropTypes.number,
    lgPush: React.PropTypes.number,
    xsPull: React.PropTypes.number,
    smPull: React.PropTypes.number,
    mdPull: React.PropTypes.number,
    lgPull: React.PropTypes.number,
    componentClass: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      componentClass: 'div'
    };
  },

  render: function () {
    var ComponentClass = this.props.componentClass;
    var classes = {};

    Object.keys(constants.SIZES).forEach(function (key) {
      var size = constants.SIZES[key];
      var prop = size;
      var classPart = size + '-';

      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }

      prop = size + 'Offset';
      classPart = size + '-offset-';
      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }

      prop = size + 'Push';
      classPart = size + '-push-';
      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }

      prop = size + 'Pull';
      classPart = size + '-pull-';
      if (this.props[prop]) {
        classes['col-' + classPart + this.props[prop]] = true;
      }
    }, this);

    return (
      React.createElement(ComponentClass, React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Col;
},{"./constants":57,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],21:[function(require,module,exports){
var React = require('react');
var TransitionEvents = require('./utils/TransitionEvents');

var CollapsableMixin = {

  propTypes: {
    collapsable: React.PropTypes.bool,
    defaultExpanded: React.PropTypes.bool,
    expanded: React.PropTypes.bool
  },

  getInitialState: function () {
    return {
      expanded: this.props.defaultExpanded != null ? this.props.defaultExpanded : null,
      collapsing: false
    };
  },

  handleTransitionEnd: function () {
    this._collapseEnd = true;
    this.setState({
      collapsing: false
    });
  },

  componentWillReceiveProps: function (newProps) {
    if (this.props.collapsable && newProps.expanded !== this.props.expanded) {
      this._collapseEnd = false;
      this.setState({
        collapsing: true
      });
    }
  },

  _addEndTransitionListener: function () {
    var node = this.getCollapsableDOMNode();

    if (node) {
      TransitionEvents.addEndEventListener(
        node,
        this.handleTransitionEnd
      );
    }
  },

  _removeEndTransitionListener: function () {
    var node = this.getCollapsableDOMNode();

    if (node) {
      TransitionEvents.removeEndEventListener(
        node,
        this.handleTransitionEnd
      );
    }
  },

  componentDidMount: function () {
    this._afterRender();
  },

  componentWillUnmount: function () {
    this._removeEndTransitionListener();
  },

  componentWillUpdate: function (nextProps) {
    var dimension = (typeof this.getCollapsableDimension === 'function') ?
      this.getCollapsableDimension() : 'height';
    var node = this.getCollapsableDOMNode();

    this._removeEndTransitionListener();
  },

  componentDidUpdate: function (prevProps, prevState) {
    this._afterRender();
  },

  _afterRender: function () {
    if (!this.props.collapsable) {
      return;
    }

    this._addEndTransitionListener();
    setTimeout(this._updateDimensionAfterRender, 0);
  },

  _updateDimensionAfterRender: function () {
    var node = this.getCollapsableDOMNode();
    if (node) {
        var dimension = (typeof this.getCollapsableDimension === 'function') ?
            this.getCollapsableDimension() : 'height';
        node.style[dimension] = this.isExpanded() ?
            this.getCollapsableDimensionValue() + 'px' : '0px';
    }
  },

  isExpanded: function () {
    return (this.props.expanded != null) ?
      this.props.expanded : this.state.expanded;
  },

  getCollapsableClassSet: function (className) {
    var classes = {};

    if (typeof className === 'string') {
      className.split(' ').forEach(function (className) {
        if (className) {
          classes[className] = true;
        }
      });
    }

    classes.collapsing = this.state.collapsing;
    classes.collapse = !this.state.collapsing;
    classes['in'] = this.isExpanded() && !this.state.collapsing;

    return classes;
  }
};

module.exports = CollapsableMixin;

},{"./utils/TransitionEvents":62,"react":280}],22:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');
var BootstrapMixin = require('./BootstrapMixin');
var DropdownStateMixin = require('./DropdownStateMixin');
var Button = require('./Button');
var ButtonGroup = require('./ButtonGroup');
var DropdownMenu = require('./DropdownMenu');
var ValidComponentChildren = require('./utils/ValidComponentChildren');


var DropdownButton = React.createClass({displayName: "DropdownButton",
  mixins: [BootstrapMixin, DropdownStateMixin],

  propTypes: {
    pullRight: React.PropTypes.bool,
    dropup:    React.PropTypes.bool,
    title:     React.PropTypes.node,
    href:      React.PropTypes.string,
    onClick:   React.PropTypes.func,
    onSelect:  React.PropTypes.func,
    navItem:   React.PropTypes.bool,
    noCaret:   React.PropTypes.bool
  },

  render: function () {
    var renderMethod = this.props.navItem ?
      'renderNavItem' : 'renderButtonGroup';

    var caret = this.props.noCaret ?
        null : (React.createElement("span", {className: "caret"}));

    return this[renderMethod]([
      React.createElement(Button, React.__spread({}, 
        this.props, 
        {ref: "dropdownButton", 
        className: "dropdown-toggle", 
        onClick: this.handleDropdownClick, 
        key: 0, 
        navDropdown: this.props.navItem, 
        navItem: null, 
        title: null, 
        pullRight: null, 
        dropup: null}), 
        this.props.title, ' ', 
        caret
      ),
      React.createElement(DropdownMenu, {
        ref: "menu", 
        "aria-labelledby": this.props.id, 
        pullRight: this.props.pullRight, 
        key: 1}, 
        ValidComponentChildren.map(this.props.children, this.renderMenuItem)
      )
    ]);
  },

  renderButtonGroup: function (children) {
    var groupClasses = {
        'open': this.state.open,
        'dropup': this.props.dropup
      };

    return (
      React.createElement(ButtonGroup, {
        bsSize: this.props.bsSize, 
        className: joinClasses(this.props.className, classSet(groupClasses))}, 
        children
      )
    );
  },

  renderNavItem: function (children) {
    var classes = {
        'dropdown': true,
        'open': this.state.open,
        'dropup': this.props.dropup
      };

    return (
      React.createElement("li", {className: joinClasses(this.props.className, classSet(classes))}, 
        children
      )
    );
  },

  renderMenuItem: function (child, index) {
    // Only handle the option selection if an onSelect prop has been set on the
    // component or it's child, this allows a user not to pass an onSelect
    // handler and have the browser preform the default action.
    var handleOptionSelect = this.props.onSelect || child.props.onSelect ?
      this.handleOptionSelect : null;

    return cloneWithProps(
      child,
      {
        // Capture onSelect events
        onSelect: createChainedFunction(child.props.onSelect, handleOptionSelect),

        // Force special props to be transferred
        key: child.key ? child.key : index,
        ref: child.ref
      }
    );
  },

  handleDropdownClick: function (e) {
    e.preventDefault();

    this.setDropdownState(!this.state.open);
  },

  handleOptionSelect: function (key) {
    if (this.props.onSelect) {
      this.props.onSelect(key);
    }

    this.setDropdownState(false);
  }
});

module.exports = DropdownButton;

},{"./BootstrapMixin":14,"./Button":15,"./ButtonGroup":16,"./DropdownMenu":23,"./DropdownStateMixin":24,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/joinClasses":68,"react":280}],23:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');
var ValidComponentChildren = require('./utils/ValidComponentChildren');

var DropdownMenu = React.createClass({displayName: "DropdownMenu",
  propTypes: {
    pullRight: React.PropTypes.bool,
    onSelect: React.PropTypes.func
  },

  render: function () {
    var classes = {
        'dropdown-menu': true,
        'dropdown-menu-right': this.props.pullRight
      };

    return (
        React.createElement("ul", React.__spread({}, 
          this.props, 
          {className: joinClasses(this.props.className, classSet(classes)), 
          role: "menu"}), 
          ValidComponentChildren.map(this.props.children, this.renderMenuItem)
        )
      );
  },

  renderMenuItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        // Capture onSelect events
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),

        // Force special props to be transferred
        key: child.key ? child.key : index,
        ref: child.ref
      }
    );
  }
});

module.exports = DropdownMenu;
},{"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/joinClasses":68,"react":280}],24:[function(require,module,exports){
var React = require('react');
var EventListener = require('./utils/EventListener');

/**
 * Checks whether a node is within
 * a root nodes tree
 *
 * @param {DOMElement} node
 * @param {DOMElement} root
 * @returns {boolean}
 */
function isNodeInRoot(node, root) {
  while (node) {
    if (node === root) {
      return true;
    }
    node = node.parentNode;
  }

  return false;
}

var DropdownStateMixin = {
  getInitialState: function () {
    return {
      open: false
    };
  },

  setDropdownState: function (newState, onStateChangeComplete) {
    if (newState) {
      this.bindRootCloseHandlers();
    } else {
      this.unbindRootCloseHandlers();
    }

    this.setState({
      open: newState
    }, onStateChangeComplete);
  },

  handleDocumentKeyUp: function (e) {
    if (e.keyCode === 27) {
      this.setDropdownState(false);
    }
  },

  handleDocumentClick: function (e) {
    // If the click originated from within this component
    // don't do anything.
    if (isNodeInRoot(e.target, this.getDOMNode())) {
      return;
    }

    this.setDropdownState(false);
  },

  bindRootCloseHandlers: function () {
    this._onDocumentClickListener =
      EventListener.listen(document, 'click', this.handleDocumentClick);
    this._onDocumentKeyupListener =
      EventListener.listen(document, 'keyup', this.handleDocumentKeyUp);
  },

  unbindRootCloseHandlers: function () {
    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    if (this._onDocumentKeyupListener) {
      this._onDocumentKeyupListener.remove();
    }
  },

  componentWillUnmount: function () {
    this.unbindRootCloseHandlers();
  }
};

module.exports = DropdownStateMixin;
},{"./utils/EventListener":60,"react":280}],25:[function(require,module,exports){
/*global document */
// TODO: listen for onTransitionEnd to remove el
function getElementsAndSelf (root, classes){
  var els = root.querySelectorAll('.' + classes.join('.'));

  els = [].map.call(els, function(e){ return e; });

  for(var i = 0; i < classes.length; i++){
    if( !root.className.match(new RegExp('\\b' +  classes[i] + '\\b'))){
      return els;
    }
  }
  els.unshift(root);
  return els;
}

module.exports = {
  _fadeIn: function () {
    var els;

    if (this.isMounted()) {
      els = getElementsAndSelf(this.getDOMNode(), ['fade']);

      if (els.length) {
        els.forEach(function (el) {
          el.className += ' in';
        });
      }
    }
  },

  _fadeOut: function () {
    var els = getElementsAndSelf(this._fadeOutEl, ['fade', 'in']);

    if (els.length) {
      els.forEach(function (el) {
        el.className = el.className.replace(/\bin\b/, '');
      });
    }

    setTimeout(this._handleFadeOutEnd, 300);
  },

  _handleFadeOutEnd: function () {
    if (this._fadeOutEl && this._fadeOutEl.parentNode) {
      this._fadeOutEl.parentNode.removeChild(this._fadeOutEl);
    }
  },

  componentDidMount: function () {
    if (document.querySelectorAll) {
      // Firefox needs delay for transition to be triggered
      setTimeout(this._fadeIn, 20);
    }
  },

  componentWillUnmount: function () {
    var els = getElementsAndSelf(this.getDOMNode(), ['fade']),
        container = (this.props.container && this.props.container.getDOMNode()) || document.body;

    if (els.length) {
      this._fadeOutEl = document.createElement('div');
      container.appendChild(this._fadeOutEl);
      this._fadeOutEl.appendChild(this.getDOMNode().cloneNode(true));
      // Firefox needs delay for transition to be triggered
      setTimeout(this._fadeOut, 20);
    }
  }
};

},{}],26:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var constants = require('./constants');

var Glyphicon = React.createClass({displayName: "Glyphicon",
  mixins: [BootstrapMixin],

  propTypes: {
    glyph: React.PropTypes.oneOf(constants.GLYPHS).isRequired
  },

  getDefaultProps: function () {
    return {
      bsClass: 'glyphicon'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    classes['glyphicon-' + this.props.glyph] = true;

    return (
      React.createElement("span", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Glyphicon;
},{"./BootstrapMixin":14,"./constants":57,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],27:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var Grid = React.createClass({displayName: "Grid",
  propTypes: {
    fluid: React.PropTypes.bool,
    componentClass: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      componentClass: 'div'
    };
  },

  render: function () {
    var ComponentClass = this.props.componentClass;
    var className = this.props.fluid ? 'container-fluid' : 'container';

    return (
      React.createElement(ComponentClass, React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, className)}), 
        this.props.children
      )
    );
  }
});

module.exports = Grid;
},{"./utils/joinClasses":68,"react":280}],28:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var Button = require('./Button');

var Input = React.createClass({displayName: "Input",
  propTypes: {
    type: React.PropTypes.string,
    label: React.PropTypes.node,
    help: React.PropTypes.node,
    addonBefore: React.PropTypes.node,
    addonAfter: React.PropTypes.node,
    buttonBefore: React.PropTypes.node,
    buttonAfter: React.PropTypes.node,
    bsStyle: function(props) {
      if (props.type === 'submit') {
        // Return early if `type=submit` as the `Button` component
        // it transfers these props to has its own propType checks.
        return;
      }

      return React.PropTypes.oneOf(['success', 'warning', 'error']).apply(null, arguments);
    },
    hasFeedback: React.PropTypes.bool,
    groupClassName: React.PropTypes.string,
    wrapperClassName: React.PropTypes.string,
    labelClassName: React.PropTypes.string,
    disabled: React.PropTypes.bool
  },

  getInputDOMNode: function () {
    return this.refs.input.getDOMNode();
  },

  getValue: function () {
    if (this.props.type === 'static') {
      return this.props.value;
    }
    else if (this.props.type) {
      if (this.props.type == "select" && this.props.multiple) {
        return this.getSelectedOptions();
      } else {
        return this.getInputDOMNode().value;
      }
    }
    else {
      throw Error('Cannot use getValue without specifying input type.');
    }
  },

  getChecked: function () {
    return this.getInputDOMNode().checked;
  },

  getSelectedOptions: function () {
    var values = [];

    Array.prototype.forEach.call(
      this.getInputDOMNode().getElementsByTagName('option'),
      function (option) {
        if (option.selected) {
          var value = option.getAttribute('value') || option.innerHTML;

          values.push(value);
        }
      }
    );

    return values;
  },

  isCheckboxOrRadio: function () {
    return this.props.type === 'radio' || this.props.type === 'checkbox';
  },

  isFile: function () {
    return this.props.type === 'file';
  },

  renderInput: function () {
    var input = null;

    if (!this.props.type) {
      return this.props.children
    }

    switch (this.props.type) {
      case 'select':
        input = (
          React.createElement("select", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'form-control'), ref: "input", key: "input"}), 
            this.props.children
          )
        );
        break;
      case 'textarea':
        input = React.createElement("textarea", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'form-control'), ref: "input", key: "input"}));
        break;
      case 'static':
        input = (
          React.createElement("p", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'form-control-static'), ref: "input", key: "input"}), 
            this.props.value
          )
        );
        break;
      case 'submit':
        input = (
          React.createElement(Button, React.__spread({},  this.props, {componentClass: "input", ref: "input", key: "input"}))
        );
        break;
      default:
        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
        input = React.createElement("input", React.__spread({},  this.props, {className: joinClasses(this.props.className, className), ref: "input", key: "input"}));
    }

    return input;
  },

  renderInputGroup: function (children) {
    var addonBefore = this.props.addonBefore ? (
      React.createElement("span", {className: "input-group-addon", key: "addonBefore"}, 
        this.props.addonBefore
      )
    ) : null;

    var addonAfter = this.props.addonAfter ? (
      React.createElement("span", {className: "input-group-addon", key: "addonAfter"}, 
        this.props.addonAfter
      )
    ) : null;

    var buttonBefore = this.props.buttonBefore ? (
      React.createElement("span", {className: "input-group-btn"}, 
        this.props.buttonBefore
      )
    ) : null;

    var buttonAfter = this.props.buttonAfter ? (
      React.createElement("span", {className: "input-group-btn"}, 
        this.props.buttonAfter
      )
    ) : null;

    return addonBefore || addonAfter || buttonBefore || buttonAfter ? (
      React.createElement("div", {className: "input-group", key: "input-group"}, 
        addonBefore, 
        buttonBefore, 
        children, 
        addonAfter, 
        buttonAfter
      )
    ) : children;
  },

  renderIcon: function () {
    var classes = {
      'glyphicon': true,
      'form-control-feedback': true,
      'glyphicon-ok': this.props.bsStyle === 'success',
      'glyphicon-warning-sign': this.props.bsStyle === 'warning',
      'glyphicon-remove': this.props.bsStyle === 'error'
    };

    return this.props.hasFeedback ? (
      React.createElement("span", {className: classSet(classes), key: "icon"})
    ) : null;
  },

  renderHelp: function () {
    return this.props.help ? (
      React.createElement("span", {className: "help-block", key: "help"}, 
        this.props.help
      )
    ) : null;
  },

  renderCheckboxandRadioWrapper: function (children) {
    var classes = {
      'checkbox': this.props.type === 'checkbox',
      'radio': this.props.type === 'radio'
    };

    return (
      React.createElement("div", {className: classSet(classes), key: "checkboxRadioWrapper"}, 
        children
      )
    );
  },

  renderWrapper: function (children) {
    return this.props.wrapperClassName ? (
      React.createElement("div", {className: this.props.wrapperClassName, key: "wrapper"}, 
        children
      )
    ) : children;
  },

  renderLabel: function (children) {
    var classes = {
      'control-label': !this.isCheckboxOrRadio()
    };
    classes[this.props.labelClassName] = this.props.labelClassName;

    return this.props.label ? (
      React.createElement("label", {htmlFor: this.props.id, className: classSet(classes), key: "label"}, 
        children, 
        this.props.label
      )
    ) : children;
  },

  renderFormGroup: function (children) {
    var classes = {
      'form-group': true,
      'has-feedback': this.props.hasFeedback,
      'has-success': this.props.bsStyle === 'success',
      'has-warning': this.props.bsStyle === 'warning',
      'has-error': this.props.bsStyle === 'error'
    };
    classes[this.props.groupClassName] = this.props.groupClassName;

    return (
      React.createElement("div", {className: classSet(classes)}, 
        children
      )
    );
  },

  render: function () {
    if (this.isCheckboxOrRadio()) {
      return this.renderFormGroup(
        this.renderWrapper([
          this.renderCheckboxandRadioWrapper(
            this.renderLabel(
              this.renderInput()
            )
          ),
          this.renderHelp()
        ])
      );
    }
    else {
      return this.renderFormGroup([
        this.renderLabel(),
        this.renderWrapper([
          this.renderInputGroup(
            this.renderInput()
          ),
          this.renderIcon(),
          this.renderHelp()
        ])
      ]);
    }
  }
});

module.exports = Input;

},{"./Button":15,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],29:[function(require,module,exports){
// https://www.npmjs.org/package/react-interpolate-component
'use strict';

var React = require('react');
var ValidComponentChildren = require('./utils/ValidComponentChildren');
var assign = require('./utils/Object.assign');

var REGEXP = /\%\((.+?)\)s/;

var Interpolate = React.createClass({
  displayName: 'Interpolate',

  propTypes: {
    format: React.PropTypes.string
  },

  getDefaultProps: function() {
    return { component: 'span' };
  },

  render: function() {
    var format = (ValidComponentChildren.hasValidComponent(this.props.children) ||
        (typeof this.props.children === 'string')) ?
        this.props.children : this.props.format;
    var parent = this.props.component;
    var unsafe = this.props.unsafe === true;
    var props = assign({}, this.props);

    delete props.children;
    delete props.format;
    delete props.component;
    delete props.unsafe;

    if (unsafe) {
      var content = format.split(REGEXP).reduce(function(memo, match, index) {
        var html;

        if (index % 2 === 0) {
          html = match;
        } else {
          html = props[match];
          delete props[match];
        }

        if (React.isValidElement(html)) {
          throw new Error('cannot interpolate a React component into unsafe text');
        }

        memo += html;

        return memo;
      }, '');

      props.dangerouslySetInnerHTML = { __html: content };

      return React.createElement(parent, props);
    } else {
      var kids = format.split(REGEXP).reduce(function(memo, match, index) {
        var child;

        if (index % 2 === 0) {
          if (match.length === 0) {
            return memo;
          }

          child = match;
        } else {
          child = props[match];
          delete props[match];
        }

        memo.push(child);

        return memo;
      }, []);

      return React.createElement(parent, props, kids);
    }
  }
});

module.exports = Interpolate;

},{"./utils/Object.assign":61,"./utils/ValidComponentChildren":63,"react":280}],30:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var Jumbotron = React.createClass({displayName: "Jumbotron",

  render: function () {
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'jumbotron')}), 
        this.props.children
      )
    );
  }
});

module.exports = Jumbotron;
},{"./utils/joinClasses":68,"react":280}],31:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var Label = React.createClass({displayName: "Label",
  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'label',
      bsStyle: 'default'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    return (
      React.createElement("span", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Label;
},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],32:[function(require,module,exports){
var React = require('react');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');

var ListGroup = React.createClass({displayName: "ListGroup",
  propTypes: {
    onClick: React.PropTypes.func
  },

  render: function () {
    return (
      React.createElement("div", {className: "list-group"}, 
        ValidComponentChildren.map(this.props.children, this.renderListItem)
      )
    );
  },

  renderListItem: function (child, index) {
    return cloneWithProps(child, {
      onClick: createChainedFunction(child.props.onClick, this.props.onClick),
      ref: child.ref,
      key: child.key ? child.key : index
    });
  }
});

module.exports = ListGroup;

},{"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"react":280}],33:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var BootstrapMixin = require('./BootstrapMixin');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');

var ListGroupItem = React.createClass({displayName: "ListGroupItem",
  mixins: [BootstrapMixin],

  propTypes: {
    bsStyle: React.PropTypes.oneOf(['danger','info','success','warning']),
    active: React.PropTypes.any,
    disabled: React.PropTypes.any,
    header: React.PropTypes.node,
    onClick: React.PropTypes.func,
    eventKey: React.PropTypes.any,
    href: React.PropTypes.string,
    target: React.PropTypes.string
  },

  getDefaultProps: function () {
    return {
      bsClass: 'list-group-item'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    classes['active'] = this.props.active;
    classes['disabled'] = this.props.disabled;

    if (this.props.href || this.props.target || this.props.onClick) {
      return this.renderAnchor(classes);
    } else {
      return this.renderSpan(classes);
    }
  },

  renderSpan: function (classes) {
    return (
      React.createElement("span", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.header ? this.renderStructuredContent() : this.props.children
      )
    );
  },

  renderAnchor: function (classes) {
    return (
      React.createElement("a", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes)), 
        onClick: this.handleClick}), 
        this.props.header ? this.renderStructuredContent() : this.props.children
      )
    );
  },

  renderStructuredContent: function () {
    var header;
    if (React.isValidElement(this.props.header)) {
      header = cloneWithProps(this.props.header, {
        className: 'list-group-item-heading'
      });
    } else {
      header = (
        React.createElement("h4", {className: "list-group-item-heading"}, 
          this.props.header
        )
      );
    }

    var content = (
      React.createElement("p", {className: "list-group-item-text"}, 
        this.props.children
      )
    );

    return {
      header: header,
      content: content
    };
  },

  handleClick: function (e) {
    if (this.props.onClick) {
      e.preventDefault();
      this.props.onClick(this.props.eventKey, this.props.href, this.props.target);
    }
  }
});

module.exports = ListGroupItem;

},{"./BootstrapMixin":14,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/joinClasses":68,"react":280}],34:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');

var MenuItem = React.createClass({displayName: "MenuItem",
  propTypes: {
    header:    React.PropTypes.bool,
    divider:   React.PropTypes.bool,
    href:      React.PropTypes.string,
    title:     React.PropTypes.string,
    target:    React.PropTypes.string,
    onSelect:  React.PropTypes.func,
    eventKey:  React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      href: '#'
    };
  },

  handleClick: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();
      this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
    }
  },

  renderAnchor: function () {
    return (
      React.createElement("a", {onClick: this.handleClick, href: this.props.href, target: this.props.target, title: this.props.title, tabIndex: "-1"}, 
        this.props.children
      )
    );
  },

  render: function () {
    var classes = {
        'dropdown-header': this.props.header,
        'divider': this.props.divider
      };

    var children = null;
    if (this.props.header) {
      children = this.props.children;
    } else if (!this.props.divider) {
      children = this.renderAnchor();
    }

    return (
      React.createElement("li", React.__spread({},  this.props, {role: "presentation", title: null, href: null, 
        className: joinClasses(this.props.className, classSet(classes))}), 
        children
      )
    );
  }
});

module.exports = MenuItem;
},{"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],35:[function(require,module,exports){
/* global document:false */

var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var FadeMixin = require('./FadeMixin');
var EventListener = require('./utils/EventListener');


// TODO:
// - aria-labelledby
// - Add `modal-body` div if only one child passed in that doesn't already have it
// - Tests

var Modal = React.createClass({displayName: "Modal",
  mixins: [BootstrapMixin, FadeMixin],

  propTypes: {
    title: React.PropTypes.node,
    backdrop: React.PropTypes.oneOf(['static', true, false]),
    keyboard: React.PropTypes.bool,
    closeButton: React.PropTypes.bool,
    animation: React.PropTypes.bool,
    onRequestHide: React.PropTypes.func.isRequired
  },

  getDefaultProps: function () {
    return {
      bsClass: 'modal',
      backdrop: true,
      keyboard: true,
      animation: true,
      closeButton: true
    };
  },

  render: function () {
    var modalStyle = {display: 'block'};
    var dialogClasses = this.getBsClassSet();
    delete dialogClasses.modal;
    dialogClasses['modal-dialog'] = true;

    var classes = {
      modal: true,
      fade: this.props.animation,
      'in': !this.props.animation || !document.querySelectorAll
    };

    var modal = (
      React.createElement("div", React.__spread({}, 
        this.props, 
        {title: null, 
        tabIndex: "-1", 
        role: "dialog", 
        style: modalStyle, 
        className: joinClasses(this.props.className, classSet(classes)), 
        onClick: this.props.backdrop === true ? this.handleBackdropClick : null, 
        ref: "modal"}), 
        React.createElement("div", {className: classSet(dialogClasses)}, 
          React.createElement("div", {className: "modal-content"}, 
            this.props.title ? this.renderHeader() : null, 
            this.props.children
          )
        )
      )
    );

    return this.props.backdrop ?
      this.renderBackdrop(modal) : modal;
  },

  renderBackdrop: function (modal) {
    var classes = {
      'modal-backdrop': true,
      'fade': this.props.animation
    };

    classes['in'] = !this.props.animation || !document.querySelectorAll;

    var onClick = this.props.backdrop === true ?
      this.handleBackdropClick : null;

    return (
      React.createElement("div", null, 
        React.createElement("div", {className: classSet(classes), ref: "backdrop", onClick: onClick}), 
        modal
      )
    );
  },

  renderHeader: function () {
    var closeButton;
    if (this.props.closeButton) {
      closeButton = (
          React.createElement("button", {type: "button", className: "close", "aria-hidden": "true", onClick: this.props.onRequestHide}, "×")
        );
    }

    return (
      React.createElement("div", {className: "modal-header"}, 
        closeButton, 
        this.renderTitle()
      )
    );
  },

  renderTitle: function () {
    return (
      React.isValidElement(this.props.title) ?
        this.props.title : React.createElement("h4", {className: "modal-title"}, this.props.title)
    );
  },

  iosClickHack: function () {
    // IOS only allows click events to be delegated to the document on elements
    // it considers 'clickable' - anchors, buttons, etc. We fake a click handler on the
    // DOM nodes themselves. Remove if handled by React: https://github.com/facebook/react/issues/1169
    this.refs.modal.getDOMNode().onclick = function () {};
    this.refs.backdrop.getDOMNode().onclick = function () {};
  },

  componentDidMount: function () {
    this._onDocumentKeyupListener =
      EventListener.listen(document, 'keyup', this.handleDocumentKeyUp);

    var container = (this.props.container && this.props.container.getDOMNode()) || document.body;
    container.className += container.className.length ? ' modal-open' : 'modal-open';

    if (this.props.backdrop) {
      this.iosClickHack();
    }
  },

  componentDidUpdate: function (prevProps) {
    if (this.props.backdrop && this.props.backdrop !== prevProps.backdrop) {
      this.iosClickHack();
    }
  },

  componentWillUnmount: function () {
    this._onDocumentKeyupListener.remove();
    var container = (this.props.container && this.props.container.getDOMNode()) || document.body;
    container.className = container.className.replace(/ ?modal-open/, '');
  },

  handleBackdropClick: function (e) {
    if (e.target !== e.currentTarget) {
      return;
    }

    this.props.onRequestHide();
  },

  handleDocumentKeyUp: function (e) {
    if (this.props.keyboard && e.keyCode === 27) {
      this.props.onRequestHide();
    }
  }
});

module.exports = Modal;

},{"./BootstrapMixin":14,"./FadeMixin":25,"./utils/EventListener":60,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],36:[function(require,module,exports){
var React = require('react');
var OverlayMixin = require('./OverlayMixin');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');

var ModalTrigger = React.createClass({displayName: "ModalTrigger",
  mixins: [OverlayMixin],

  propTypes: {
    modal: React.PropTypes.node.isRequired
  },

  getInitialState: function () {
    return {
      isOverlayShown: false
    };
  },

  show: function () {
    this.setState({
      isOverlayShown: true
    });
  },

  hide: function () {
    this.setState({
      isOverlayShown: false
    });
  },

  toggle: function () {
    this.setState({
      isOverlayShown: !this.state.isOverlayShown
    });
  },

  renderOverlay: function () {
    if (!this.state.isOverlayShown) {
      return React.createElement("span", null);
    }

    return cloneWithProps(
      this.props.modal,
      {
        onRequestHide: this.hide
      }
    );
  },

  render: function () {
    var child = React.Children.only(this.props.children);
    return cloneWithProps(
      child,
      {
        onClick: createChainedFunction(child.props.onClick, this.toggle)
      }
    );
  }
});

module.exports = ModalTrigger;
},{"./OverlayMixin":40,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"react":280}],37:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var BootstrapMixin = require('./BootstrapMixin');
var CollapsableMixin = require('./CollapsableMixin');
var classSet = require('./utils/classSet');
var domUtils = require('./utils/domUtils');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');


var Nav = React.createClass({displayName: "Nav",
  mixins: [BootstrapMixin, CollapsableMixin],

  propTypes: {
    bsStyle: React.PropTypes.oneOf(['tabs','pills']),
    stacked: React.PropTypes.bool,
    justified: React.PropTypes.bool,
    onSelect: React.PropTypes.func,
    collapsable: React.PropTypes.bool,
    expanded: React.PropTypes.bool,
    navbar: React.PropTypes.bool,
    eventKey: React.PropTypes.any,
    right: React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      bsClass: 'nav'
    };
  },

  getCollapsableDOMNode: function () {
    return this.getDOMNode();
  },

  getCollapsableDimensionValue: function () {
    var node = this.refs.ul.getDOMNode(),
        height = node.offsetHeight,
        computedStyles = domUtils.getComputedStyles(node);

    return height + parseInt(computedStyles.marginTop, 10) + parseInt(computedStyles.marginBottom, 10);
  },

  render: function () {
    var classes = this.props.collapsable ? this.getCollapsableClassSet() : {};

    classes['navbar-collapse'] = this.props.collapsable;

    if (this.props.navbar && !this.props.collapsable) {
      return (this.renderUl());
    }

    return (
      React.createElement("nav", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.renderUl()
      )
    );
  },

  renderUl: function () {
    var classes = this.getBsClassSet();

    classes['nav-stacked'] = this.props.stacked;
    classes['nav-justified'] = this.props.justified;
    classes['navbar-nav'] = this.props.navbar;
    classes['pull-right'] = this.props.pullRight;
    classes['navbar-right'] = this.props.right;

    return (
      React.createElement("ul", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), ref: "ul"}), 
        ValidComponentChildren.map(this.props.children, this.renderNavItem)
      )
    );
  },

  getChildActiveProp: function (child) {
    if (child.props.active) {
      return true;
    }
    if (this.props.activeKey != null) {
      if (child.props.eventKey == this.props.activeKey) {
        return true;
      }
    }
    if (this.props.activeHref != null) {
      if (child.props.href === this.props.activeHref) {
        return true;
      }
    }

    return child.props.active;
  },

  renderNavItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        active: this.getChildActiveProp(child),
        activeKey: this.props.activeKey,
        activeHref: this.props.activeHref,
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),
        ref: child.ref,
        key: child.key ? child.key : index,
        navItem: true
      }
    );
  }
});

module.exports = Nav;

},{"./BootstrapMixin":14,"./CollapsableMixin":21,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/domUtils":67,"./utils/joinClasses":68,"react":280}],38:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var NavItem = React.createClass({displayName: "NavItem",
  mixins: [BootstrapMixin],

  propTypes: {
    onSelect: React.PropTypes.func,
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    href: React.PropTypes.string,
    title: React.PropTypes.string,
    eventKey: React.PropTypes.any,
    target: React.PropTypes.string
  },

  getDefaultProps: function () {
    return {
      href: '#'
    };
  },

  render: function () {
    var $__0= 
        
        
        
        
        
        
           this.props,disabled=$__0.disabled,active=$__0.active,href=$__0.href,title=$__0.title,target=$__0.target,children=$__0.children,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{disabled:1,active:1,href:1,title:1,target:1,children:1}),
        classes = {
          'active': active,
          'disabled': disabled
        };

    return (
      React.createElement("li", React.__spread({},  props, {className: joinClasses(props.className, classSet(classes))}), 
        React.createElement("a", {
          href: href, 
          title: title, 
          target: target, 
          onClick: this.handleClick, 
          ref: "anchor"}, 
          children 
        )
      )
    );
  },

  handleClick: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
      }
    }
  }
});

module.exports = NavItem;
},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],39:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var BootstrapMixin = require('./BootstrapMixin');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');
var Nav = require('./Nav');


var Navbar = React.createClass({displayName: "Navbar",
  mixins: [BootstrapMixin],

  propTypes: {
    fixedTop: React.PropTypes.bool,
    fixedBottom: React.PropTypes.bool,
    staticTop: React.PropTypes.bool,
    inverse: React.PropTypes.bool,
    fluid: React.PropTypes.bool,
    role: React.PropTypes.string,
    componentClass: React.PropTypes.node.isRequired,
    brand: React.PropTypes.node,
    toggleButton: React.PropTypes.node,
    onToggle: React.PropTypes.func,
    navExpanded: React.PropTypes.bool,
    defaultNavExpanded: React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      bsClass: 'navbar',
      bsStyle: 'default',
      role: 'navigation',
      componentClass: 'Nav'
    };
  },

  getInitialState: function () {
    return {
      navExpanded: this.props.defaultNavExpanded
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onSelect` handler.
    return !this._isChanging;
  },

  handleToggle: function () {
    if (this.props.onToggle) {
      this._isChanging = true;
      this.props.onToggle();
      this._isChanging = false;
    }

    this.setState({
      navExpanded: !this.state.navExpanded
    });
  },

  isNavExpanded: function () {
    return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
  },

  render: function () {
    var classes = this.getBsClassSet();
    var ComponentClass = this.props.componentClass;

    classes['navbar-fixed-top'] = this.props.fixedTop;
    classes['navbar-fixed-bottom'] = this.props.fixedBottom;
    classes['navbar-static-top'] = this.props.staticTop;
    classes['navbar-inverse'] = this.props.inverse;

    return (
      React.createElement(ComponentClass, React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        React.createElement("div", {className: this.props.fluid ? 'container-fluid' : 'container'}, 
          (this.props.brand || this.props.toggleButton || this.props.toggleNavKey) ? this.renderHeader() : null, 
          ValidComponentChildren.map(this.props.children, this.renderChild)
        )
      )
    );
  },

  renderChild: function (child, index) {
    return cloneWithProps(child, {
      navbar: true,
      collapsable: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey,
      expanded: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey && this.isNavExpanded(),
      key: child.key ? child.key : index,
      ref: child.ref
    });
  },

  renderHeader: function () {
    var brand;

    if (this.props.brand) {
      brand = React.isValidElement(this.props.brand) ?
        cloneWithProps(this.props.brand, {
          className: 'navbar-brand'
        }) : React.createElement("span", {className: "navbar-brand"}, this.props.brand);
    }

    return (
      React.createElement("div", {className: "navbar-header"}, 
        brand, 
        (this.props.toggleButton || this.props.toggleNavKey != null) ? this.renderToggleButton() : null
      )
    );
  },

  renderToggleButton: function () {
    var children;

    if (React.isValidElement(this.props.toggleButton)) {
      return cloneWithProps(this.props.toggleButton, {
        className: 'navbar-toggle',
        onClick: createChainedFunction(this.handleToggle, this.props.toggleButton.props.onClick)
      });
    }

    children = (this.props.toggleButton != null) ?
      this.props.toggleButton : [
        React.createElement("span", {className: "sr-only", key: 0}, "Toggle navigation"),
        React.createElement("span", {className: "icon-bar", key: 1}),
        React.createElement("span", {className: "icon-bar", key: 2}),
        React.createElement("span", {className: "icon-bar", key: 3})
    ];

    return (
      React.createElement("button", {className: "navbar-toggle", type: "button", onClick: this.handleToggle}, 
        children
      )
    );
  }
});

module.exports = Navbar;

},{"./BootstrapMixin":14,"./Nav":37,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/joinClasses":68,"react":280}],40:[function(require,module,exports){
var React = require('react');
var CustomPropTypes = require('./utils/CustomPropTypes');

module.exports = {
  propTypes: {
    container: CustomPropTypes.mountable
  },

  getDefaultProps: function () {
    return {
      container: {
        // Provide `getDOMNode` fn mocking a React component API. The `document.body`
        // reference needs to be contained within this function so that it is not accessed
        // in environments where it would not be defined, e.g. nodejs. Equally this is needed
        // before the body is defined where `document.body === null`, this ensures
        // `document.body` is only accessed after componentDidMount.
        getDOMNode: function getDOMNode() {
          return document.body;
        }
      }
    };
  },

  componentWillUnmount: function () {
    this._unrenderOverlay();
    if (this._overlayTarget) {
      this.getContainerDOMNode()
        .removeChild(this._overlayTarget);
      this._overlayTarget = null;
    }
  },

  componentDidUpdate: function () {
    this._renderOverlay();
  },

  componentDidMount: function () {
    this._renderOverlay();
  },

  _mountOverlayTarget: function () {
    this._overlayTarget = document.createElement('div');
    this.getContainerDOMNode()
      .appendChild(this._overlayTarget);
  },

  _renderOverlay: function () {
    if (!this._overlayTarget) {
      this._mountOverlayTarget();
    }

    var overlay = this.renderOverlay();

    // Save reference to help testing
    if (overlay !== null) {
      this._overlayInstance = React.render(overlay, this._overlayTarget);
    } else {
      // Unrender if the component is null for transitions to null
      this._unrenderOverlay();
    }
  },

  _unrenderOverlay: function () {
    React.unmountComponentAtNode(this._overlayTarget);
    this._overlayInstance = null;
  },

  getOverlayDOMNode: function () {
    if (!this.isMounted()) {
      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
    }

    if (this._overlayInstance) {
      return this._overlayInstance.getDOMNode();
    }

    return null;
  },

  getContainerDOMNode: function () {
    return this.props.container.getDOMNode ?
      this.props.container.getDOMNode() : this.props.container;
  }
};

},{"./utils/CustomPropTypes":59,"react":280}],41:[function(require,module,exports){
var React = require('react');
var OverlayMixin = require('./OverlayMixin');
var domUtils = require('./utils/domUtils');
var cloneWithProps = require('./utils/cloneWithProps');

var createChainedFunction = require('./utils/createChainedFunction');
var assign = require('./utils/Object.assign');

/**
 * Check if value one is inside or equal to the of value
 *
 * @param {string} one
 * @param {string|array} of
 * @returns {boolean}
 */
function isOneOf(one, of) {
  if (Array.isArray(of)) {
    return of.indexOf(one) >= 0;
  }
  return one === of;
}

var OverlayTrigger = React.createClass({displayName: "OverlayTrigger",
  mixins: [OverlayMixin],

  propTypes: {
    trigger: React.PropTypes.oneOfType([
      React.PropTypes.oneOf(['manual', 'click', 'hover', 'focus']),
      React.PropTypes.arrayOf(React.PropTypes.oneOf(['click', 'hover', 'focus']))
    ]),
    placement: React.PropTypes.oneOf(['top','right', 'bottom', 'left']),
    delay: React.PropTypes.number,
    delayShow: React.PropTypes.number,
    delayHide: React.PropTypes.number,
    defaultOverlayShown: React.PropTypes.bool,
    overlay: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      placement: 'right',
      trigger: ['hover', 'focus']
    };
  },

  getInitialState: function () {
    return {
      isOverlayShown: this.props.defaultOverlayShown == null ?
        false : this.props.defaultOverlayShown,
      overlayLeft: null,
      overlayTop: null
    };
  },

  show: function () {
    this.setState({
      isOverlayShown: true
    }, function() {
      this.updateOverlayPosition();
    });
  },

  hide: function () {
    this.setState({
      isOverlayShown: false
    });
  },

  toggle: function () {
    this.state.isOverlayShown ?
      this.hide() : this.show();
  },

  renderOverlay: function () {
    if (!this.state.isOverlayShown) {
      return React.createElement("span", null);
    }

    return cloneWithProps(
      this.props.overlay,
      {
        onRequestHide: this.hide,
        placement: this.props.placement,
        positionLeft: this.state.overlayLeft,
        positionTop: this.state.overlayTop
      }
    );
  },

  render: function () {
    if (this.props.trigger === 'manual') {
      return React.Children.only(this.props.children);
    }

    var props = {};

    if (isOneOf('click', this.props.trigger)) {
      props.onClick = createChainedFunction(this.toggle, this.props.onClick);
    }

    if (isOneOf('hover', this.props.trigger)) {
      props.onMouseOver = createChainedFunction(this.handleDelayedShow, this.props.onMouseOver);
      props.onMouseOut = createChainedFunction(this.handleDelayedHide, this.props.onMouseOut);
    }

    if (isOneOf('focus', this.props.trigger)) {
      props.onFocus = createChainedFunction(this.handleDelayedShow, this.props.onFocus);
      props.onBlur = createChainedFunction(this.handleDelayedHide, this.props.onBlur);
    }

    return cloneWithProps(
      React.Children.only(this.props.children),
      props
    );
  },

  componentWillUnmount: function() {
    clearTimeout(this._hoverDelay);
  },

  componentDidMount: function() {
    this.updateOverlayPosition();
  },

  handleDelayedShow: function () {
    if (this._hoverDelay != null) {
      clearTimeout(this._hoverDelay);
      this._hoverDelay = null;
      return;
    }

    var delay = this.props.delayShow != null ?
      this.props.delayShow : this.props.delay;

    if (!delay) {
      this.show();
      return;
    }

    this._hoverDelay = setTimeout(function() {
      this._hoverDelay = null;
      this.show();
    }.bind(this), delay);
  },

  handleDelayedHide: function () {
    if (this._hoverDelay != null) {
      clearTimeout(this._hoverDelay);
      this._hoverDelay = null;
      return;
    }

    var delay = this.props.delayHide != null ?
      this.props.delayHide : this.props.delay;

    if (!delay) {
      this.hide();
      return;
    }

    this._hoverDelay = setTimeout(function() {
      this._hoverDelay = null;
      this.hide();
    }.bind(this), delay);
  },

  updateOverlayPosition: function () {
    if (!this.isMounted()) {
      return;
    }

    var pos = this.calcOverlayPosition();

    this.setState({
      overlayLeft: pos.left,
      overlayTop: pos.top
    });
  },

  calcOverlayPosition: function () {
    var childOffset = this.getPosition();

    var overlayNode = this.getOverlayDOMNode();
    var overlayHeight = overlayNode.offsetHeight;
    var overlayWidth = overlayNode.offsetWidth;

    switch (this.props.placement) {
      case 'right':
        return {
          top: childOffset.top + childOffset.height / 2 - overlayHeight / 2,
          left: childOffset.left + childOffset.width
        };
      case 'left':
        return {
          top: childOffset.top + childOffset.height / 2 - overlayHeight / 2,
          left: childOffset.left - overlayWidth
        };
      case 'top':
        return {
          top: childOffset.top - overlayHeight,
          left: childOffset.left + childOffset.width / 2 - overlayWidth / 2
        };
      case 'bottom':
        return {
          top: childOffset.top + childOffset.height,
          left: childOffset.left + childOffset.width / 2 - overlayWidth / 2
        };
      default:
        throw new Error('calcOverlayPosition(): No such placement of "' + this.props.placement + '" found.');
    }
  },

  getPosition: function () {
    var node = this.getDOMNode();
    var container = this.getContainerDOMNode();

    var offset = container.tagName == 'BODY' ?
      domUtils.getOffset(node) : domUtils.getPosition(node, container);

    return assign({}, offset, {
      height: node.offsetHeight,
      width: node.offsetWidth
    });
  }
});

module.exports = OverlayTrigger;
},{"./OverlayMixin":40,"./utils/Object.assign":61,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/domUtils":67,"react":280}],42:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var PageHeader = React.createClass({displayName: "PageHeader",

  render: function () {
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, 'page-header')}), 
        React.createElement("h1", null, this.props.children)
      )
    );
  }
});

module.exports = PageHeader;
},{"./utils/joinClasses":68,"react":280}],43:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');

var PageItem = React.createClass({displayName: "PageItem",

  propTypes: {
    href: React.PropTypes.string,
    target: React.PropTypes.string,
    disabled: React.PropTypes.bool,
    previous: React.PropTypes.bool,
    next: React.PropTypes.bool,
    onSelect: React.PropTypes.func,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      href: '#'
    };
  },

  render: function () {
    var classes = {
      'disabled': this.props.disabled,
      'previous': this.props.previous,
      'next': this.props.next
    };

    return (
      React.createElement("li", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, classSet(classes))}), 
        React.createElement("a", {
          href: this.props.href, 
          title: this.props.title, 
          target: this.props.target, 
          onClick: this.handleSelect, 
          ref: "anchor"}, 
          this.props.children
        )
      )
    );
  },

  handleSelect: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
      }
    }
  }
});

module.exports = PageItem;
},{"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],44:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');

var Pager = React.createClass({displayName: "Pager",

  propTypes: {
    onSelect: React.PropTypes.func
  },

  render: function () {
    return (
      React.createElement("ul", React.__spread({}, 
        this.props, 
        {className: joinClasses(this.props.className, 'pager')}), 
        ValidComponentChildren.map(this.props.children, this.renderPageItem)
      )
    );
  },

  renderPageItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),
        ref: child.ref,
        key: child.key ? child.key : index
      }
    );
  }
});

module.exports = Pager;
},{"./utils/ValidComponentChildren":63,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/joinClasses":68,"react":280}],45:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var BootstrapMixin = require('./BootstrapMixin');
var CollapsableMixin = require('./CollapsableMixin');

var Panel = React.createClass({displayName: "Panel",
  mixins: [BootstrapMixin, CollapsableMixin],

  propTypes: {
    onSelect: React.PropTypes.func,
    header: React.PropTypes.node,
    footer: React.PropTypes.node,
    eventKey: React.PropTypes.any
  },

  getDefaultProps: function () {
    return {
      bsClass: 'panel',
      bsStyle: 'default'
    };
  },

  handleSelect: function (e) {
    if (this.props.onSelect) {
      this._isChanging = true;
      this.props.onSelect(this.props.eventKey);
      this._isChanging = false;
    }

    e.preventDefault();

    this.setState({
      expanded: !this.state.expanded
    });
  },

  shouldComponentUpdate: function () {
    return !this._isChanging;
  },

  getCollapsableDimensionValue: function () {
    return this.refs.panel.getDOMNode().scrollHeight;
  },

  getCollapsableDOMNode: function () {
    if (!this.isMounted() || !this.refs || !this.refs.panel) {
      return null;
    }

    return this.refs.panel.getDOMNode();
  },

  render: function () {
    var classes = this.getBsClassSet();
    classes['panel'] = true;

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), 
        id: this.props.collapsable ? null : this.props.id, onSelect: null}), 
        this.renderHeading(), 
        this.props.collapsable ? this.renderCollapsableBody() : this.renderBody(), 
        this.renderFooter()
      )
    );
  },

  renderCollapsableBody: function () {
    return (
      React.createElement("div", {className: classSet(this.getCollapsableClassSet('panel-collapse')), id: this.props.id, ref: "panel"}, 
        this.renderBody()
      )
    );
  },

  renderBody: function () {
    var allChildren = this.props.children;
    var bodyElements = [];

    function getProps() {
      return {key: bodyElements.length};
    }

    function addPanelChild (child) {
      bodyElements.push(cloneWithProps(child, getProps()));
    }

    function addPanelBody (children) {
      bodyElements.push(
        React.createElement("div", React.__spread({className: "panel-body"},  getProps()), 
          children
        )
      );
    }

    // Handle edge cases where we should not iterate through children.
    if (!Array.isArray(allChildren) || allChildren.length == 0) {
      if (this.shouldRenderFill(allChildren)) {
        addPanelChild(allChildren);
      } else {
        addPanelBody(allChildren);
      }
    } else {
      var panelBodyChildren = [];

      function maybeRenderPanelBody () {
        if (panelBodyChildren.length == 0) {
          return;
        }

        addPanelBody(panelBodyChildren);
        panelBodyChildren = [];
      }

      allChildren.forEach(function(child) {
        if (this.shouldRenderFill(child)) {
          maybeRenderPanelBody();

          // Separately add the filled element.
          addPanelChild(child);
        } else {
          panelBodyChildren.push(child);
        }
      }.bind(this));

      maybeRenderPanelBody();
    }

    return bodyElements;
  },

  shouldRenderFill: function (child) {
    return React.isValidElement(child) && child.props.fill != null
  },

  renderHeading: function () {
    var header = this.props.header;

    if (!header) {
      return null;
    }

    if (!React.isValidElement(header) || Array.isArray(header)) {
      header = this.props.collapsable ?
        this.renderCollapsableTitle(header) : header;
    } else if (this.props.collapsable) {
      header = cloneWithProps(header, {
        className: 'panel-title',
        children: this.renderAnchor(header.props.children)
      });
    } else {
      header = cloneWithProps(header, {
        className: 'panel-title'
      });
    }

    return (
      React.createElement("div", {className: "panel-heading"}, 
        header
      )
    );
  },

  renderAnchor: function (header) {
    return (
      React.createElement("a", {
        href: '#' + (this.props.id || ''), 
        className: this.isExpanded() ? null : 'collapsed', 
        onClick: this.handleSelect}, 
        header
      )
    );
  },

  renderCollapsableTitle: function (header) {
    return (
      React.createElement("h4", {className: "panel-title"}, 
        this.renderAnchor(header)
      )
    );
  },

  renderFooter: function () {
    if (!this.props.footer) {
      return null;
    }

    return (
      React.createElement("div", {className: "panel-footer"}, 
        this.props.footer
      )
    );
  }
});

module.exports = Panel;

},{"./BootstrapMixin":14,"./CollapsableMixin":21,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/joinClasses":68,"react":280}],46:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var BootstrapMixin = require('./BootstrapMixin');
var ValidComponentChildren = require('./utils/ValidComponentChildren');

var PanelGroup = React.createClass({displayName: "PanelGroup",
  mixins: [BootstrapMixin],

  propTypes: {
    collapsable: React.PropTypes.bool,
    activeKey: React.PropTypes.any,
    defaultActiveKey: React.PropTypes.any,
    onSelect: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      bsClass: 'panel-group'
    };
  },

  getInitialState: function () {
    var defaultActiveKey = this.props.defaultActiveKey;

    return {
      activeKey: defaultActiveKey
    };
  },

  render: function () {
    var classes = this.getBsClassSet();
    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), onSelect: null}), 
        ValidComponentChildren.map(this.props.children, this.renderPanel)
      )
    );
  },

  renderPanel: function (child, index) {
    var activeKey =
      this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

    var props = {
      bsStyle: child.props.bsStyle || this.props.bsStyle,
      key: child.key ? child.key : index,
      ref: child.ref
    };

    if (this.props.accordion) {
      props.collapsable = true;
      props.expanded = (child.props.eventKey === activeKey);
      props.onSelect = this.handleSelect;
    }

    return cloneWithProps(
      child,
      props
    );
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onSelect` handler.
    return !this._isChanging;
  },

  handleSelect: function (key) {
    if (this.props.onSelect) {
      this._isChanging = true;
      this.props.onSelect(key);
      this._isChanging = false;
    }

    if (this.state.activeKey === key) {
      key = null;
    }

    this.setState({
      activeKey: key
    });
  }
});

module.exports = PanelGroup;
},{"./BootstrapMixin":14,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/joinClasses":68,"react":280}],47:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');


var Popover = React.createClass({displayName: "Popover",
  mixins: [BootstrapMixin],

  propTypes: {
    placement: React.PropTypes.oneOf(['top','right', 'bottom', 'left']),
    positionLeft: React.PropTypes.number,
    positionTop: React.PropTypes.number,
    arrowOffsetLeft: React.PropTypes.number,
    arrowOffsetTop: React.PropTypes.number,
    title: React.PropTypes.node
  },

  getDefaultProps: function () {
    return {
      placement: 'right'
    };
  },

  render: function () {
    var classes = {};
    classes['popover'] = true;
    classes[this.props.placement] = true;
    classes['in'] = this.props.positionLeft != null || this.props.positionTop != null;

    var style = {};
    style['left'] = this.props.positionLeft;
    style['top'] = this.props.positionTop;
    style['display'] = 'block';

    var arrowStyle = {};
    arrowStyle['left'] = this.props.arrowOffsetLeft;
    arrowStyle['top'] = this.props.arrowOffsetTop;

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), style: style, title: null}), 
        React.createElement("div", {className: "arrow", style: arrowStyle}), 
        this.props.title ? this.renderTitle() : null, 
        React.createElement("div", {className: "popover-content"}, 
          this.props.children
        )
      )
    );
  },

  renderTitle: function() {
    return (
      React.createElement("h3", {className: "popover-title"}, this.props.title)
    );
  }
});

module.exports = Popover;
},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],48:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var Interpolate = require('./Interpolate');
var BootstrapMixin = require('./BootstrapMixin');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');


var ProgressBar = React.createClass({displayName: "ProgressBar",
  propTypes: {
    min: React.PropTypes.number,
    now: React.PropTypes.number,
    max: React.PropTypes.number,
    label: React.PropTypes.node,
    srOnly: React.PropTypes.bool,
    striped: React.PropTypes.bool,
    active: React.PropTypes.bool
  },

  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'progress-bar',
      min: 0,
      max: 100
    };
  },

  getPercentage: function (now, min, max) {
    return Math.ceil((now - min) / (max - min) * 100);
  },

  render: function () {
    var classes = {
        progress: true
      };

    if (this.props.active) {
      classes['progress-striped'] = true;
      classes['active'] = true;
    } else if (this.props.striped) {
      classes['progress-striped'] = true;
    }

    if (!ValidComponentChildren.hasValidComponent(this.props.children)) {
      if (!this.props.isChild) {
        return (
          React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
            this.renderProgressBar()
          )
        );
      } else {
        return (
          this.renderProgressBar()
        );
      }
    } else {
      return (
        React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
          ValidComponentChildren.map(this.props.children, this.renderChildBar)
        )
      );
    }
  },

  renderChildBar: function (child, index) {
    return cloneWithProps(child, {
      isChild: true,
      key: child.key ? child.key : index,
      ref: child.ref
    });
  },

  renderProgressBar: function () {
    var percentage = this.getPercentage(
        this.props.now,
        this.props.min,
        this.props.max
      );

    var label;

    if (typeof this.props.label === "string") {
      label = this.renderLabel(percentage);
    } else if (this.props.label) {
      label = this.props.label;
    }

    if (this.props.srOnly) {
      label = this.renderScreenReaderOnlyLabel(label);
    }

    var classes = this.getBsClassSet();

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), role: "progressbar", 
        style: {width: percentage + '%'}, 
        "aria-valuenow": this.props.now, 
        "aria-valuemin": this.props.min, 
        "aria-valuemax": this.props.max}), 
        label
      )
    );
  },

  renderLabel: function (percentage) {
    var InterpolateClass = this.props.interpolateClass || Interpolate;

    return (
      React.createElement(InterpolateClass, {
        now: this.props.now, 
        min: this.props.min, 
        max: this.props.max, 
        percent: percentage, 
        bsStyle: this.props.bsStyle}, 
        this.props.label
      )
    );
  },

  renderScreenReaderOnlyLabel: function (label) {
    return (
      React.createElement("span", {className: "sr-only"}, 
        label
      )
    );
  }
});

module.exports = ProgressBar;

},{"./BootstrapMixin":14,"./Interpolate":29,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/joinClasses":68,"react":280}],49:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');

var Row = React.createClass({displayName: "Row",
  propTypes: {
    componentClass: React.PropTypes.node.isRequired
  },

  getDefaultProps: function () {
    return {
      componentClass: 'div'
    };
  },

  render: function () {
    var ComponentClass = this.props.componentClass;

    return (
      React.createElement(ComponentClass, React.__spread({},  this.props, {className: joinClasses(this.props.className, 'row')}), 
        this.props.children
      )
    );
  }
});

module.exports = Row;
},{"./utils/joinClasses":68,"react":280}],50:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');
var DropdownStateMixin = require('./DropdownStateMixin');
var Button = require('./Button');
var ButtonGroup = require('./ButtonGroup');
var DropdownMenu = require('./DropdownMenu');

var SplitButton = React.createClass({displayName: "SplitButton",
  mixins: [BootstrapMixin, DropdownStateMixin],

  propTypes: {
    pullRight:     React.PropTypes.bool,
    title:         React.PropTypes.node,
    href:          React.PropTypes.string,
    target:        React.PropTypes.string,
    dropdownTitle: React.PropTypes.node,
    onClick:       React.PropTypes.func,
    onSelect:      React.PropTypes.func,
    disabled:      React.PropTypes.bool
  },

  getDefaultProps: function () {
    return {
      dropdownTitle: 'Toggle dropdown'
    };
  },

  render: function () {
    var groupClasses = {
        'open': this.state.open,
        'dropup': this.props.dropup
      };

    var button = (
      React.createElement(Button, React.__spread({}, 
        this.props, 
        {ref: "button", 
        onClick: this.handleButtonClick, 
        title: null, 
        id: null}), 
        this.props.title
      )
    );

    var dropdownButton = (
      React.createElement(Button, React.__spread({}, 
        this.props, 
        {ref: "dropdownButton", 
        className: joinClasses(this.props.className, 'dropdown-toggle'), 
        onClick: this.handleDropdownClick, 
        title: null, 
        href: null, 
        target: null, 
        id: null}), 
        React.createElement("span", {className: "sr-only"}, this.props.dropdownTitle), 
        React.createElement("span", {className: "caret"})
      )
    );

    return (
      React.createElement(ButtonGroup, {
        bsSize: this.props.bsSize, 
        className: classSet(groupClasses), 
        id: this.props.id}, 
        button, 
        dropdownButton, 
        React.createElement(DropdownMenu, {
          ref: "menu", 
          onSelect: this.handleOptionSelect, 
          "aria-labelledby": this.props.id, 
          pullRight: this.props.pullRight}, 
          this.props.children
        )
      )
    );
  },

  handleButtonClick: function (e) {
    if (this.state.open) {
      this.setDropdownState(false);
    }

    if (this.props.onClick) {
      this.props.onClick(e, this.props.href, this.props.target);
    }
  },

  handleDropdownClick: function (e) {
    e.preventDefault();

    this.setDropdownState(!this.state.open);
  },

  handleOptionSelect: function (key) {
    if (this.props.onSelect) {
      this.props.onSelect(key);
    }

    this.setDropdownState(false);
  }
});

module.exports = SplitButton;

},{"./BootstrapMixin":14,"./Button":15,"./ButtonGroup":16,"./DropdownMenu":23,"./DropdownStateMixin":24,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],51:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var createChainedFunction = require('./utils/createChainedFunction');
var BootstrapMixin = require('./BootstrapMixin');


var SubNav = React.createClass({displayName: "SubNav",
  mixins: [BootstrapMixin],

  propTypes: {
    onSelect: React.PropTypes.func,
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    href: React.PropTypes.string,
    title: React.PropTypes.string,
    text: React.PropTypes.node,
    target: React.PropTypes.string
  },

  getDefaultProps: function () {
    return {
      bsClass: 'nav'
    };
  },

  handleClick: function (e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
      }
    }
  },

  isActive: function () {
    return this.isChildActive(this);
  },

  isChildActive: function (child) {
    if (child.props.active) {
      return true;
    }

    if (this.props.activeKey != null && this.props.activeKey === child.props.eventKey) {
      return true;
    }

    if (this.props.activeHref != null && this.props.activeHref === child.props.href) {
      return true;
    }

    if (child.props.children) {
      var isActive = false;

      ValidComponentChildren.forEach(
        child.props.children,
        function (child) {
          if (this.isChildActive(child)) {
            isActive = true;
          }
        },
        this
      );

      return isActive;
    }

    return false;
  },

  getChildActiveProp: function (child) {
    if (child.props.active) {
      return true;
    }
    if (this.props.activeKey != null) {
      if (child.props.eventKey == this.props.activeKey) {
        return true;
      }
    }
    if (this.props.activeHref != null) {
      if (child.props.href === this.props.activeHref) {
        return true;
      }
    }

    return child.props.active;
  },

  render: function () {
    var classes = {
      'active': this.isActive(),
      'disabled': this.props.disabled
    };

    return (
      React.createElement("li", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        React.createElement("a", {
          href: this.props.href, 
          title: this.props.title, 
          target: this.props.target, 
          onClick: this.handleClick, 
          ref: "anchor"}, 
          this.props.text
        ), 
        React.createElement("ul", {className: "nav"}, 
          ValidComponentChildren.map(this.props.children, this.renderNavItem)
        )
      )
    );
  },

  renderNavItem: function (child, index) {
    return cloneWithProps(
      child,
      {
        active: this.getChildActiveProp(child),
        onSelect: createChainedFunction(child.props.onSelect, this.props.onSelect),
        ref: child.ref,
        key: child.key ? child.key : index
      }
    );
  }
});

module.exports = SubNav;

},{"./BootstrapMixin":14,"./utils/ValidComponentChildren":63,"./utils/classSet":64,"./utils/cloneWithProps":65,"./utils/createChainedFunction":66,"./utils/joinClasses":68,"react":280}],52:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var TransitionEvents = require('./utils/TransitionEvents');

var TabPane = React.createClass({displayName: "TabPane",
  getDefaultProps: function () {
    return {
      animation: true
    };
  },

  getInitialState: function () {
    return {
      animateIn: false,
      animateOut: false
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (this.props.animation) {
      if (!this.state.animateIn && nextProps.active && !this.props.active) {
        this.setState({
          animateIn: true
        });
      } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
        this.setState({
          animateOut: true
        });
      }
    }
  },

  componentDidUpdate: function () {
    if (this.state.animateIn) {
      setTimeout(this.startAnimateIn, 0);
    }
    if (this.state.animateOut) {
      TransitionEvents.addEndEventListener(
        this.getDOMNode(),
        this.stopAnimateOut
      );
    }
  },

  startAnimateIn: function () {
    if (this.isMounted()) {
      this.setState({
        animateIn: false
      });
    }
  },

  stopAnimateOut: function () {
    if (this.isMounted()) {
      this.setState({
        animateOut: false
      });

      if (typeof this.props.onAnimateOutEnd === 'function') {
        this.props.onAnimateOutEnd();
      }
    }
  },

  render: function () {
    var classes = {
      'tab-pane': true,
      'fade': true,
      'active': this.props.active || this.state.animateOut,
      'in': this.props.active && !this.state.animateIn
    };

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = TabPane;
},{"./utils/TransitionEvents":62,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],53:[function(require,module,exports){
var React = require('react');
var BootstrapMixin = require('./BootstrapMixin');
var cloneWithProps = require('./utils/cloneWithProps');

var ValidComponentChildren = require('./utils/ValidComponentChildren');
var Nav = require('./Nav');
var NavItem = require('./NavItem');

function getDefaultActiveKeyFromChildren(children) {
  var defaultActiveKey;

  ValidComponentChildren.forEach(children, function(child) {
    if (defaultActiveKey == null) {
      defaultActiveKey = child.props.eventKey;
    }
  });

  return defaultActiveKey;
}

var TabbedArea = React.createClass({displayName: "TabbedArea",
  mixins: [BootstrapMixin],

  propTypes: {
    bsStyle: React.PropTypes.oneOf(['tabs','pills']),
    animation: React.PropTypes.bool,
    onSelect: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      bsStyle: "tabs",
      animation: true
    };
  },

  getInitialState: function () {
    var defaultActiveKey = this.props.defaultActiveKey != null ?
      this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

    // TODO: In __DEV__ mode warn via `console.warn` if no `defaultActiveKey` has
    // been set by this point, invalid children or missing key properties are likely the cause.

    return {
      activeKey: defaultActiveKey,
      previousActiveKey: null
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
      this.setState({
        previousActiveKey: this.props.activeKey
      });
    }
  },

  handlePaneAnimateOutEnd: function () {
    this.setState({
      previousActiveKey: null
    });
  },

  render: function () {
    var activeKey =
      this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

    function renderTabIfSet(child) {
      return child.props.tab != null ? this.renderTab(child) : null;
    }

    var nav = (
      React.createElement(Nav, React.__spread({},  this.props, {activeKey: activeKey, onSelect: this.handleSelect, ref: "tabs"}), 
        ValidComponentChildren.map(this.props.children, renderTabIfSet, this)
      )
    );

    return (
      React.createElement("div", null, 
        nav, 
        React.createElement("div", {id: this.props.id, className: "tab-content", ref: "panes"}, 
          ValidComponentChildren.map(this.props.children, this.renderPane)
        )
      )
    );
  },

  getActiveKey: function () {
    return this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;
  },

  renderPane: function (child, index) {
    var activeKey = this.getActiveKey();

    return cloneWithProps(
        child,
        {
          active: (child.props.eventKey === activeKey &&
            (this.state.previousActiveKey == null || !this.props.animation)),
          ref: child.ref,
          key: child.key ? child.key : index,
          animation: this.props.animation,
          onAnimateOutEnd: (this.state.previousActiveKey != null &&
            child.props.eventKey === this.state.previousActiveKey) ? this.handlePaneAnimateOutEnd: null
        }
      );
  },

  renderTab: function (child) {
    var key = child.props.eventKey;
    return (
      React.createElement(NavItem, {
        ref: 'tab' + key, 
        eventKey: key}, 
        child.props.tab
      )
    );
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onSelect` handler.
    return !this._isChanging;
  },

  handleSelect: function (key) {
    if (this.props.onSelect) {
      this._isChanging = true;
      this.props.onSelect(key);
      this._isChanging = false;
    } else if (key !== this.getActiveKey()) {
      this.setState({
        activeKey: key,
        previousActiveKey: this.getActiveKey()
      });
    }
  }
});

module.exports = TabbedArea;
},{"./BootstrapMixin":14,"./Nav":37,"./NavItem":38,"./utils/ValidComponentChildren":63,"./utils/cloneWithProps":65,"react":280}],54:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');

var Table = React.createClass({displayName: "Table",
  propTypes: {
    striped: React.PropTypes.bool,
    bordered: React.PropTypes.bool,
    condensed: React.PropTypes.bool,
    hover: React.PropTypes.bool,
    responsive: React.PropTypes.bool
  },

  render: function () {
    var classes = {
      'table': true,
      'table-striped': this.props.striped,
      'table-bordered': this.props.bordered,
      'table-condensed': this.props.condensed,
      'table-hover': this.props.hover
    };
    var table = (
      React.createElement("table", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );

    return this.props.responsive ? (
      React.createElement("div", {className: "table-responsive"}, 
        table
      )
    ) : table;
  }
});

module.exports = Table;
},{"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],55:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');


var Tooltip = React.createClass({displayName: "Tooltip",
  mixins: [BootstrapMixin],

  propTypes: {
    placement: React.PropTypes.oneOf(['top','right', 'bottom', 'left']),
    positionLeft: React.PropTypes.number,
    positionTop: React.PropTypes.number,
    arrowOffsetLeft: React.PropTypes.number,
    arrowOffsetTop: React.PropTypes.number
  },

  getDefaultProps: function () {
    return {
      placement: 'right'
    };
  },

  render: function () {
    var classes = {};
    classes['tooltip'] = true;
    classes[this.props.placement] = true;
    classes['in'] = this.props.positionLeft != null || this.props.positionTop != null;

    var style = {};
    style['left'] = this.props.positionLeft;
    style['top'] = this.props.positionTop;

    var arrowStyle = {};
    arrowStyle['left'] = this.props.arrowOffsetLeft;
    arrowStyle['top'] = this.props.arrowOffsetTop;

    return (
        React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes)), style: style}), 
          React.createElement("div", {className: "tooltip-arrow", style: arrowStyle}), 
          React.createElement("div", {className: "tooltip-inner"}, 
            this.props.children
          )
        )
      );
  }
});

module.exports = Tooltip;
},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],56:[function(require,module,exports){
var React = require('react');
var joinClasses = require('./utils/joinClasses');
var classSet = require('./utils/classSet');
var BootstrapMixin = require('./BootstrapMixin');

var Well = React.createClass({displayName: "Well",
  mixins: [BootstrapMixin],

  getDefaultProps: function () {
    return {
      bsClass: 'well'
    };
  },

  render: function () {
    var classes = this.getBsClassSet();

    return (
      React.createElement("div", React.__spread({},  this.props, {className: joinClasses(this.props.className, classSet(classes))}), 
        this.props.children
      )
    );
  }
});

module.exports = Well;
},{"./BootstrapMixin":14,"./utils/classSet":64,"./utils/joinClasses":68,"react":280}],57:[function(require,module,exports){
module.exports = {
  CLASSES: {
    'alert': 'alert',
    'button': 'btn',
    'button-group': 'btn-group',
    'button-toolbar': 'btn-toolbar',
    'column': 'col',
    'input-group': 'input-group',
    'form': 'form',
    'glyphicon': 'glyphicon',
    'label': 'label',
    'list-group-item': 'list-group-item',
    'panel': 'panel',
    'panel-group': 'panel-group',
    'progress-bar': 'progress-bar',
    'nav': 'nav',
    'navbar': 'navbar',
    'modal': 'modal',
    'row': 'row',
    'well': 'well'
  },
  STYLES: {
    'default': 'default',
    'primary': 'primary',
    'success': 'success',
    'info': 'info',
    'warning': 'warning',
    'danger': 'danger',
    'link': 'link',
    'inline': 'inline',
    'tabs': 'tabs',
    'pills': 'pills'
  },
  SIZES: {
    'large': 'lg',
    'medium': 'md',
    'small': 'sm',
    'xsmall': 'xs'
  },
  GLYPHS: [
    'asterisk',
    'plus',
    'euro',
    'eur',
    'minus',
    'cloud',
    'envelope',
    'pencil',
    'glass',
    'music',
    'search',
    'heart',
    'star',
    'star-empty',
    'user',
    'film',
    'th-large',
    'th',
    'th-list',
    'ok',
    'remove',
    'zoom-in',
    'zoom-out',
    'off',
    'signal',
    'cog',
    'trash',
    'home',
    'file',
    'time',
    'road',
    'download-alt',
    'download',
    'upload',
    'inbox',
    'play-circle',
    'repeat',
    'refresh',
    'list-alt',
    'lock',
    'flag',
    'headphones',
    'volume-off',
    'volume-down',
    'volume-up',
    'qrcode',
    'barcode',
    'tag',
    'tags',
    'book',
    'bookmark',
    'print',
    'camera',
    'font',
    'bold',
    'italic',
    'text-height',
    'text-width',
    'align-left',
    'align-center',
    'align-right',
    'align-justify',
    'list',
    'indent-left',
    'indent-right',
    'facetime-video',
    'picture',
    'map-marker',
    'adjust',
    'tint',
    'edit',
    'share',
    'check',
    'move',
    'step-backward',
    'fast-backward',
    'backward',
    'play',
    'pause',
    'stop',
    'forward',
    'fast-forward',
    'step-forward',
    'eject',
    'chevron-left',
    'chevron-right',
    'plus-sign',
    'minus-sign',
    'remove-sign',
    'ok-sign',
    'question-sign',
    'info-sign',
    'screenshot',
    'remove-circle',
    'ok-circle',
    'ban-circle',
    'arrow-left',
    'arrow-right',
    'arrow-up',
    'arrow-down',
    'share-alt',
    'resize-full',
    'resize-small',
    'exclamation-sign',
    'gift',
    'leaf',
    'fire',
    'eye-open',
    'eye-close',
    'warning-sign',
    'plane',
    'calendar',
    'random',
    'comment',
    'magnet',
    'chevron-up',
    'chevron-down',
    'retweet',
    'shopping-cart',
    'folder-close',
    'folder-open',
    'resize-vertical',
    'resize-horizontal',
    'hdd',
    'bullhorn',
    'bell',
    'certificate',
    'thumbs-up',
    'thumbs-down',
    'hand-right',
    'hand-left',
    'hand-up',
    'hand-down',
    'circle-arrow-right',
    'circle-arrow-left',
    'circle-arrow-up',
    'circle-arrow-down',
    'globe',
    'wrench',
    'tasks',
    'filter',
    'briefcase',
    'fullscreen',
    'dashboard',
    'paperclip',
    'heart-empty',
    'link',
    'phone',
    'pushpin',
    'usd',
    'gbp',
    'sort',
    'sort-by-alphabet',
    'sort-by-alphabet-alt',
    'sort-by-order',
    'sort-by-order-alt',
    'sort-by-attributes',
    'sort-by-attributes-alt',
    'unchecked',
    'expand',
    'collapse-down',
    'collapse-up',
    'log-in',
    'flash',
    'log-out',
    'new-window',
    'record',
    'save',
    'open',
    'saved',
    'import',
    'export',
    'send',
    'floppy-disk',
    'floppy-saved',
    'floppy-remove',
    'floppy-save',
    'floppy-open',
    'credit-card',
    'transfer',
    'cutlery',
    'header',
    'compressed',
    'earphone',
    'phone-alt',
    'tower',
    'stats',
    'sd-video',
    'hd-video',
    'subtitles',
    'sound-stereo',
    'sound-dolby',
    'sound-5-1',
    'sound-6-1',
    'sound-7-1',
    'copyright-mark',
    'registration-mark',
    'cloud-download',
    'cloud-upload',
    'tree-conifer',
    'tree-deciduous',
    'cd',
    'save-file',
    'open-file',
    'level-up',
    'copy',
    'paste',
    'alert',
    'equalizer',
    'king',
    'queen',
    'pawn',
    'bishop',
    'knight',
    'baby-formula',
    'tent',
    'blackboard',
    'bed',
    'apple',
    'erase',
    'hourglass',
    'lamp',
    'duplicate',
    'piggy-bank',
    'scissors',
    'bitcoin',
    'yen',
    'ruble',
    'scale',
    'ice-lolly',
    'ice-lolly-tasted',
    'education',
    'option-horizontal',
    'option-vertical',
    'menu-hamburger',
    'modal-window',
    'oil',
    'grain',
    'sunglasses',
    'text-size',
    'text-color',
    'text-background',
    'object-align-top',
    'object-align-bottom',
    'object-align-horizontal',
    'object-align-left',
    'object-align-vertical',
    'object-align-right',
    'triangle-right',
    'triangle-left',
    'triangle-bottom',
    'triangle-top',
    'console',
    'superscript',
    'subscript',
    'menu-left',
    'menu-right',
    'menu-down',
    'menu-up'
  ]
};

},{}],58:[function(require,module,exports){
module.exports = {
  Accordion: require('./Accordion'),
  Affix: require('./Affix'),
  AffixMixin: require('./AffixMixin'),
  Alert: require('./Alert'),
  BootstrapMixin: require('./BootstrapMixin'),
  Badge: require('./Badge'),
  Button: require('./Button'),
  ButtonGroup: require('./ButtonGroup'),
  ButtonToolbar: require('./ButtonToolbar'),
  Carousel: require('./Carousel'),
  CarouselItem: require('./CarouselItem'),
  Col: require('./Col'),
  CollapsableMixin: require('./CollapsableMixin'),
  DropdownButton: require('./DropdownButton'),
  DropdownMenu: require('./DropdownMenu'),
  DropdownStateMixin: require('./DropdownStateMixin'),
  FadeMixin: require('./FadeMixin'),
  Glyphicon: require('./Glyphicon'),
  Grid: require('./Grid'),
  Input: require('./Input'),
  Interpolate: require('./Interpolate'),
  Jumbotron: require('./Jumbotron'),
  Label: require('./Label'),
  ListGroup: require('./ListGroup'),
  ListGroupItem: require('./ListGroupItem'),
  MenuItem: require('./MenuItem'),
  Modal: require('./Modal'),
  Nav: require('./Nav'),
  Navbar: require('./Navbar'),
  NavItem: require('./NavItem'),
  ModalTrigger: require('./ModalTrigger'),
  OverlayTrigger: require('./OverlayTrigger'),
  OverlayMixin: require('./OverlayMixin'),
  PageHeader: require('./PageHeader'),
  Panel: require('./Panel'),
  PanelGroup: require('./PanelGroup'),
  PageItem: require('./PageItem'),
  Pager: require('./Pager'),
  Popover: require('./Popover'),
  ProgressBar: require('./ProgressBar'),
  Row: require('./Row'),
  SplitButton: require('./SplitButton'),
  SubNav: require('./SubNav'),
  TabbedArea: require('./TabbedArea'),
  Table: require('./Table'),
  TabPane: require('./TabPane'),
  Tooltip: require('./Tooltip'),
  Well: require('./Well')
};

},{"./Accordion":9,"./Affix":10,"./AffixMixin":11,"./Alert":12,"./Badge":13,"./BootstrapMixin":14,"./Button":15,"./ButtonGroup":16,"./ButtonToolbar":17,"./Carousel":18,"./CarouselItem":19,"./Col":20,"./CollapsableMixin":21,"./DropdownButton":22,"./DropdownMenu":23,"./DropdownStateMixin":24,"./FadeMixin":25,"./Glyphicon":26,"./Grid":27,"./Input":28,"./Interpolate":29,"./Jumbotron":30,"./Label":31,"./ListGroup":32,"./ListGroupItem":33,"./MenuItem":34,"./Modal":35,"./ModalTrigger":36,"./Nav":37,"./NavItem":38,"./Navbar":39,"./OverlayMixin":40,"./OverlayTrigger":41,"./PageHeader":42,"./PageItem":43,"./Pager":44,"./Panel":45,"./PanelGroup":46,"./Popover":47,"./ProgressBar":48,"./Row":49,"./SplitButton":50,"./SubNav":51,"./TabPane":52,"./TabbedArea":53,"./Table":54,"./Tooltip":55,"./Well":56}],59:[function(require,module,exports){
var React = require('react');

var ANONYMOUS = '<<anonymous>>';

var CustomPropTypes = {
  /**
   * Checks whether a prop provides a DOM element
   *
   * The element can be provided in two forms:
   * - Directly passed
   * - Or passed an object which has a `getDOMNode` method which will return the required DOM element
   *
   * @param props
   * @param propName
   * @param componentName
   * @returns {Error|undefined}
   */
  mountable: createMountableChecker()
};

/**
 * Create chain-able isRequired validator
 *
 * Largely copied directly from:
 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
 */
function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      if (isRequired) {
        return new Error(
          'Required prop `' + propName + '` was not specified in ' +
            '`' + componentName + '`.'
        );
      }
    } else {
      return validate(props, propName, componentName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createMountableChecker() {
  function validate(props, propName, componentName) {
    if (typeof props[propName] !== 'object' ||
      typeof props[propName].getDOMNode !== 'function' && props[propName].nodeType !== 1) {
      return new Error(
        'Invalid prop `' + propName + '` supplied to ' +
          '`' + componentName + '`, expected a DOM element or an object that has a `getDOMNode` method'
      );
    }
  }

  return createChainableTypeChecker(validate);
}

module.exports = CustomPropTypes;
},{"react":280}],60:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * This file contains a modified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/EventListener.js
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * TODO: remove in favour of solution provided by:
 *  https://github.com/facebook/react/issues/285
 */

/**
 * Does not take into account specific nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  }
};

module.exports = EventListener;

},{}],61:[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains an unmodified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/Object.assign.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],62:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains a modified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

var canUseDOM = !!(
  typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
  );

/**
 * EVENT_NAME_MAP is used to determine which event fired when a
 * transition/animation ends, based on the style property used to
 * define that event.
 */
var EVENT_NAME_MAP = {
  transitionend: {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'mozTransitionEnd',
    'OTransition': 'oTransitionEnd',
    'msTransition': 'MSTransitionEnd'
  },

  animationend: {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'mozAnimationEnd',
    'OAnimation': 'oAnimationEnd',
    'msAnimation': 'MSAnimationEnd'
  }
};

var endEvents = [];

function detectEvents() {
  var testEl = document.createElement('div');
  var style = testEl.style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are useable, and if not remove them
  // from the map
  if (!('AnimationEvent' in window)) {
    delete EVENT_NAME_MAP.animationend.animation;
  }

  if (!('TransitionEvent' in window)) {
    delete EVENT_NAME_MAP.transitionend.transition;
  }

  for (var baseEventName in EVENT_NAME_MAP) {
    var baseEvents = EVENT_NAME_MAP[baseEventName];
    for (var styleName in baseEvents) {
      if (styleName in style) {
        endEvents.push(baseEvents[styleName]);
        break;
      }
    }
  }
}

if (canUseDOM) {
  detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
  addEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function(endEvent) {
      addEventListener(node, endEvent, eventListener);
    });
  },

  removeEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function(endEvent) {
      removeEventListener(node, endEvent, eventListener);
    });
  }
};

module.exports = ReactTransitionEvents;

},{}],63:[function(require,module,exports){
var React = require('react');

/**
 * Maps children that are typically specified as `props.children`,
 * but only iterates over children that are "valid components".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapValidComponents(children, func, context) {
  var index = 0;

  return React.Children.map(children, function (child) {
    if (React.isValidElement(child)) {
      var lastIndex = index;
      index++;
      return func.call(context, child, lastIndex);
    }

    return child;
  });
}

/**
 * Iterates through children that are typically specified as `props.children`,
 * but only iterates over children that are "valid components".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachValidComponents(children, func, context) {
  var index = 0;

  return React.Children.forEach(children, function (child) {
    if (React.isValidElement(child)) {
      func.call(context, child, index);
      index++;
    }
  });
}

/**
 * Count the number of "valid components" in the Children container.
 *
 * @param {?*} children Children tree container.
 * @returns {number}
 */
function numberOfValidComponents(children) {
  var count = 0;

  React.Children.forEach(children, function (child) {
    if (React.isValidElement(child)) { count++; }
  });

  return count;
}

/**
 * Determine if the Child container has one or more "valid components".
 *
 * @param {?*} children Children tree container.
 * @returns {boolean}
 */
function hasValidComponent(children) {
  var hasValid = false;

  React.Children.forEach(children, function (child) {
    if (!hasValid && React.isValidElement(child)) {
      hasValid = true;
    }
  });

  return hasValid;
}

module.exports = {
  map: mapValidComponents,
  forEach: forEachValidComponents,
  numberOf: numberOfValidComponents,
  hasValidComponent: hasValidComponent
};
},{"react":280}],64:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains an unmodified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/cx.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

/**
 * This function is used to mark string literals representing CSS class names
 * so that they can be transformed statically. This allows for modularization
 * and minification of CSS class names.
 *
 * In static_upstream, this function is actually implemented, but it should
 * eventually be replaced with something more descriptive, and the transform
 * that is used in the main stack should be ported for use elsewhere.
 *
 * @param string|object className to modularize, or an object of key/values.
 *                      In the object case, the values are conditions that
 *                      determine if the className keys should be included.
 * @param [string ...]  Variable list of classNames in the string case.
 * @return string       Renderable space-separated CSS className.
 */
function cx(classNames) {
  if (typeof classNames == 'object') {
    return Object.keys(classNames).filter(function(className) {
      return classNames[className];
    }).join(' ');
  } else {
    return Array.prototype.join.call(arguments, ' ');
  }
}

module.exports = cx;
},{}],65:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains modified versions of:
 * https://github.com/facebook/react/blob/v0.12.0/src/utils/cloneWithProps.js
 * https://github.com/facebook/react/blob/v0.12.0/src/core/ReactPropTransferer.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 *
 * TODO: This should be replaced as soon as cloneWithProps is available via
 *  the core React package or a separate package.
 *  @see https://github.com/facebook/react/issues/1906
 */

var React = require('react');
var joinClasses = require('./joinClasses');
var assign = require("./Object.assign");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

function emptyFunction() {}

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * Merge two props objects using TransferStrategies.
 *
 * @param {object} oldProps original props (they take precedence)
 * @param {object} newProps new props to merge in
 * @return {object} a new object containing both sets of props merged.
 */
function mergeProps(oldProps, newProps) {
  return transferInto(assign({}, oldProps), newProps);
}


var ReactPropTransferer = {
  mergeProps: mergeProps
};

var CHILDREN_PROP = 'children';

/**
 * Sometimes you want to change the props of a child passed to you. Usually
 * this is to add a CSS class.
 *
 * @param {object} child child component you'd like to clone
 * @param {object} props props you'd like to modify. They will be merged
 * as if you used `transferPropsTo()`.
 * @return {object} a clone of child with props merged in.
 */
function cloneWithProps(child, props) {
  var newProps = ReactPropTransferer.mergeProps(props, child.props);

  // Use `child.props.children` if it is provided.
  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
    child.props.hasOwnProperty(CHILDREN_PROP)) {
    newProps.children = child.props.children;
  }

  if (React.version.substr(0, 4) === '0.12'){
    var mockLegacyFactory = function(){};
    mockLegacyFactory.isReactLegacyFactory = true;
    mockLegacyFactory.type = child.type;

    return React.createElement(mockLegacyFactory, newProps);
  }

  // The current API doesn't retain _owner and _context, which is why this
  // doesn't use ReactElement.cloneAndReplaceProps.
  return React.createElement(child.type, newProps);
}

module.exports = cloneWithProps;
},{"./Object.assign":61,"./joinClasses":68,"react":280}],66:[function(require,module,exports){
/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} one
 * @param {function} two
 * @returns {function|null}
 */
function createChainedFunction(one, two) {
  var hasOne = typeof one === 'function';
  var hasTwo = typeof two === 'function';

  if (!hasOne && !hasTwo) { return null; }
  if (!hasOne) { return two; }
  if (!hasTwo) { return one; }

  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

module.exports = createChainedFunction;
},{}],67:[function(require,module,exports){

/**
 * Shortcut to compute element style
 *
 * @param {HTMLElement} elem
 * @returns {CssStyle}
 */
function getComputedStyles(elem) {
  return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
}

/**
 * Get elements offset
 *
 * TODO: REMOVE JQUERY!
 *
 * @param {HTMLElement} DOMNode
 * @returns {{top: number, left: number}}
 */
function getOffset(DOMNode) {
  if (window.jQuery) {
    return window.jQuery(DOMNode).offset();
  }

  var docElem = document.documentElement;
  var box = { top: 0, left: 0 };

  // If we don't have gBCR, just use 0,0 rather than error
  // BlackBerry 5, iOS 3 (original iPhone)
  if ( typeof DOMNode.getBoundingClientRect !== 'undefined' ) {
    box = DOMNode.getBoundingClientRect();
  }

  return {
    top: box.top + window.pageYOffset - docElem.clientTop,
    left: box.left + window.pageXOffset - docElem.clientLeft
  };
}

/**
 * Get elements position
 *
 * TODO: REMOVE JQUERY!
 *
 * @param {HTMLElement} elem
 * @param {HTMLElement?} offsetParent
 * @returns {{top: number, left: number}}
 */
function getPosition(elem, offsetParent) {
  if (window.jQuery) {
    return window.jQuery(elem).position();
  }

  var offset,
      parentOffset = {top: 0, left: 0};

  // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
  if (getComputedStyles(elem).position === 'fixed' ) {
    // We assume that getBoundingClientRect is available when computed position is fixed
    offset = elem.getBoundingClientRect();

  } else {
    if (!offsetParent) {
      // Get *real* offsetParent
      offsetParent = offsetParent(elem);
    }

    // Get correct offsets
    offset = getOffset(elem);
    if ( offsetParent.nodeName !== 'HTML') {
      parentOffset = getOffset(offsetParent);
    }

    // Add offsetParent borders
    parentOffset.top += parseInt(getComputedStyles(offsetParent).borderTopWidth, 10);
    parentOffset.left += parseInt(getComputedStyles(offsetParent).borderLeftWidth, 10);
  }

  // Subtract parent offsets and element margins
  return {
    top: offset.top - parentOffset.top - parseInt(getComputedStyles(elem).marginTop, 10),
    left: offset.left - parentOffset.left - parseInt(getComputedStyles(elem).marginLeft, 10)
  };
}

/**
 * Get parent element
 *
 * @param {HTMLElement?} elem
 * @returns {HTMLElement}
 */
function offsetParent(elem) {
  var docElem = document.documentElement;
  var offsetParent = elem.offsetParent || docElem;

  while ( offsetParent && ( offsetParent.nodeName !== 'HTML' &&
    getComputedStyles(offsetParent).position === 'static' ) ) {
    offsetParent = offsetParent.offsetParent;
  }

  return offsetParent || docElem;
}

module.exports = {
  getComputedStyles: getComputedStyles,
  getOffset: getOffset,
  getPosition: getPosition,
  offsetParent: offsetParent
};
},{}],68:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This file contains an unmodified version of:
 * https://github.com/facebook/react/blob/v0.12.0/src/utils/joinClasses.js
 *
 * This source code is licensed under the BSD-style license found here:
 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
 * An additional grant of patent rights can be found here:
 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],69:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var arrayMap = require('lodash._arraymap'),
    baseDifference = require('lodash._basedifference'),
    baseFlatten = require('lodash._baseflatten'),
    bindCallback = require('lodash._bindcallback'),
    pickByArray = require('lodash._pickbyarray'),
    pickByCallback = require('lodash._pickbycallback'),
    keysIn = require('lodash.keysin');

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable properties of `object` that are not omitted.
 * Property names may be specified as individual arguments or as arrays of
 * property names. If `predicate` is provided it is invoked for each property
 * of `object` omitting the properties `predicate` returns truthy for. The
 * predicate is bound to `thisArg` and invoked with three arguments;
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {Function|...(string|string[])} [predicate] The function invoked per
 *  iteration or property names to omit, specified as individual property
 *  names or arrays of property names.
 * @param {*} [thisArg] The `this` binding of `predicate`.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'user': 'fred', 'age': 40 };
 *
 * _.omit(object, 'age');
 * // => { 'user': 'fred' }
 *
 * _.omit(object, _.isNumber);
 * // => { 'user': 'fred' }
 */
function omit(object, predicate, thisArg) {
  if (object == null) {
    return {};
  }
  if (typeof predicate != 'function') {
    var props = arrayMap(baseFlatten(arguments, false, false, 1), String);
    return pickByArray(object, baseDifference(keysIn(object), props));
  }
  predicate = bindCallback(predicate, thisArg, 3);
  return pickByCallback(object, function(value, key, object) {
    return !predicate(value, key, object);
  });
}

module.exports = omit;

},{"lodash._arraymap":70,"lodash._basedifference":71,"lodash._baseflatten":76,"lodash._bindcallback":79,"lodash._pickbyarray":80,"lodash._pickbycallback":81,"lodash.keysin":83}],70:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * A specialized version of `_.map` for arrays without support for callback
 * shorthands or `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],71:[function(require,module,exports){
/**
 * lodash 3.0.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var baseIndexOf = require('lodash._baseindexof'),
    cacheIndexOf = require('lodash._cacheindexof'),
    createCache = require('lodash._createcache');

/**
 * The base implementation of `_.difference` which accepts a single array
 * of values to exclude.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values) {
  var length = array ? array.length : 0,
      result = [];

  if (!length) {
    return result;
  }
  var index = -1,
      indexOf = baseIndexOf,
      isCommon = true,
      cache = (isCommon && values.length >= 200) ? createCache(values) : null,
      valuesLength = values.length;

  if (cache) {
    indexOf = cacheIndexOf;
    isCommon = false;
    values = cache;
  }
  outer:
  while (++index < length) {
    var value = array[index];

    if (isCommon && value === value) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === value) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (indexOf(values, value, 0) < 0) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;

},{"lodash._baseindexof":72,"lodash._cacheindexof":73,"lodash._createcache":74}],72:[function(require,module,exports){
/**
 * lodash 3.1.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * The base implementation of `_.indexOf` without support for binary searches.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return indexOfNaN(array, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * Gets the index at which the first occurrence of `NaN` is found in `array`.
 * If `fromRight` is provided elements of `array` are iterated from right to left.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
 */
function indexOfNaN(array, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 0 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    var other = array[index];
    if (other !== other) {
      return index;
    }
  }
  return -1;
}

module.exports = baseIndexOf;

},{}],73:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is in `cache` mimicking the return signature of
 * `_.indexOf` by returning `0` if the value is found, else `-1`.
 *
 * @private
 * @param {Object} cache The cache to search.
 * @param {*} value The value to search for.
 * @returns {number} Returns `0` if `value` is found, else `-1`.
 */
function cacheIndexOf(cache, value) {
  var data = cache.data,
      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

  return result ? 0 : -1;
}

/**
 * Checks if `value` is the language type of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return type == 'function' || (value && type == 'object') || false;
}

module.exports = cacheIndexOf;

},{}],74:[function(require,module,exports){
(function (global){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var isNative = require('lodash.isnative');

/** Native method references. */
var Set = isNative(Set = global.Set) && Set;

/* Native method references for those with the same name as other `lodash` methods. */
var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate;

/**
 *
 * Creates a cache object to store unique values.
 *
 * @private
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var length = values ? values.length : 0;

  this.data = { 'hash': nativeCreate(null), 'set': new Set };
  while (length--) {
    this.push(values[length]);
  }
}

/**
 * Adds `value` to the cache.
 *
 * @private
 * @name push
 * @memberOf SetCache
 * @param {*} value The value to cache.
 */
function cachePush(value) {
  var data = this.data;
  if (typeof value == 'string' || isObject(value)) {
    data.set.add(value);
  } else {
    data.hash[value] = true;
  }
}

/**
 * Creates a `Set` cache object to optimize linear searches of large arrays.
 *
 * @private
 * @param {Array} [values] The values to cache.
 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
 */
var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
  return new SetCache(values);
};

/**
 * Checks if `value` is the language type of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return type == 'function' || (value && type == 'object') || false;
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var getter = _.constant(object);
 * getter() === object;
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

// Add functions to the `Set` cache.
SetCache.prototype.push = cachePush;

module.exports = createCache;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"lodash.isnative":75}],75:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var funcTag = '[object Function]';

/** Used to detect host constructors (Safari > 5). */
var reHostCtor = /^\[object .+?Constructor\]$/;

/**
 * Used to match `RegExp` special characters.
 * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)
 * for more details.
 */
var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
    reHasRegExpChars = RegExp(reRegExpChars.source);

/**
 * Converts `value` to a string if it is not one. An empty string is returned
 * for `null` or `undefined` values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  if (typeof value == 'string') {
    return value;
  }
  return value == null ? '' : (value + '');
}

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return (value && typeof value == 'object') || false;
}

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/**
 * Used to resolve the `toStringTag` of values.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
 * for more details.
 */
var objToString = objectProto.toString;

/** Used to detect if a method is native. */
var reNative = RegExp('^' +
  escapeRegExp(objToString)
  .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (objToString.call(value) == funcTag) {
    return reNative.test(fnToString.call(value));
  }
  return (isObjectLike(value) && reHostCtor.test(value)) || false;
}

/**
 * Escapes the `RegExp` special characters "\", "^", "$", ".", "|", "?", "*",
 * "+", "(", ")", "[", "]", "{" and "}" in `string`.
 *
 * @static
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escapeRegExp('[lodash](https://lodash.com/)');
 * // => '\[lodash\]\(https://lodash\.com/\)'
 */
function escapeRegExp(string) {
  string = baseToString(string);
  return (string && reHasRegExpChars.test(string))
    ? string.replace(reRegExpChars, '\\$&')
    : string;
}

module.exports = isNative;

},{}],76:[function(require,module,exports){
/**
 * lodash 3.1.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var isArguments = require('lodash.isarguments'),
    isArray = require('lodash.isarray');

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return (value && typeof value == 'object') || false;
}

/**
 * Used as the maximum length of an array-like value.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
 * for more details.
 */
var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

/**
 * The base implementation of `_.flatten` with added support for restricting
 * flattening and specifying the start index.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {boolean} isDeep Specify a deep flatten.
 * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.
 * @param {number} fromIndex The index to start from.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, isDeep, isStrict, fromIndex) {
  var index = fromIndex - 1,
      length = array.length,
      resIndex = -1,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
      if (isDeep) {
        // Recursively flatten arrays (susceptible to call stack limits).
        value = baseFlatten(value, isDeep, isStrict, 0);
      }
      var valIndex = -1,
          valLength = value.length;

      result.length += valLength;
      while (++valIndex < valLength) {
        result[++resIndex] = value[valIndex];
      }
    } else if (!isStrict) {
      result[++resIndex] = value;
    }
  }
  return result;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on ES `ToLength`. See the
 * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
 * for more details.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = baseFlatten;

},{"lodash.isarguments":77,"lodash.isarray":78}],77:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return (value && typeof value == 'object') || false;
}

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the `toStringTag` of values.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
 * for more details.
 */
var objToString = objectProto.toString;

/**
 * Used as the maximum length of an array-like value.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
 * for more details.
 */
var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

/**
 * Checks if `value` is a valid array-like length.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is classified as an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * (function() { return _.isArguments(arguments); })();
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  var length = isObjectLike(value) ? value.length : undefined;
  return (isLength(length) && objToString.call(value) == argsTag) || false;
}

module.exports = isArguments;

},{}],78:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var arrayTag = '[object Array]',
    funcTag = '[object Function]';

/** Used to detect host constructors (Safari > 5). */
var reHostCtor = /^\[object .+?Constructor\]$/;

/**
 * Used to match `RegExp` special characters.
 * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)
 * for more details.
 */
var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
    reHasRegExpChars = RegExp(reRegExpChars.source);

/**
 * Converts `value` to a string if it is not one. An empty string is returned
 * for `null` or `undefined` values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  if (typeof value == 'string') {
    return value;
  }
  return value == null ? '' : (value + '');
}

/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return (value && typeof value == 'object') || false;
}

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/**
 * Used to resolve the `toStringTag` of values.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
 * for more details.
 */
var objToString = objectProto.toString;

/** Used to detect if a method is native. */
var reNative = RegExp('^' +
  escapeRegExp(objToString)
  .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/* Native method references for those with the same name as other `lodash` methods. */
var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray;

/**
 * Used as the maximum length of an array-like value.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
 * for more details.
 */
var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

/**
 * Checks if `value` is a valid array-like length.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * (function() { return _.isArray(arguments); })();
 * // => false
 */
var isArray = nativeIsArray || function(value) {
  return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;
};

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (objToString.call(value) == funcTag) {
    return reNative.test(fnToString.call(value));
  }
  return (isObjectLike(value) && reHostCtor.test(value)) || false;
}

/**
 * Escapes the `RegExp` special characters "\", "^", "$", ".", "|", "?", "*",
 * "+", "(", ")", "[", "]", "{" and "}" in `string`.
 *
 * @static
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escapeRegExp('[lodash](https://lodash.com/)');
 * // => '\[lodash\]\(https://lodash\.com/\)'
 */
function escapeRegExp(string) {
  string = baseToString(string);
  return (string && reHasRegExpChars.test(string))
    ? string.replace(reRegExpChars, '\\$&')
    : string;
}

module.exports = isArray;

},{}],79:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * A specialized version of `baseCallback` which only supports `this` binding
 * and specifying the number of arguments to provide to `func`.
 *
 * @private
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function bindCallback(func, thisArg, argCount) {
  if (typeof func != 'function') {
    return identity;
  }
  if (typeof thisArg == 'undefined') {
    return func;
  }
  switch (argCount) {
    case 1: return function(value) {
      return func.call(thisArg, value);
    };
    case 3: return function(value, index, collection) {
      return func.call(thisArg, value, index, collection);
    };
    case 4: return function(accumulator, value, index, collection) {
      return func.call(thisArg, accumulator, value, index, collection);
    };
    case 5: return function(value, other, key, object, source) {
      return func.call(thisArg, value, other, key, object, source);
    };
  }
  return function() {
    return func.apply(thisArg, arguments);
  };
}

/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = bindCallback;

},{}],80:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * A specialized version of `_.pick` that picks `object` properties specified
 * by the `props` array.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} props The property names to pick.
 * @returns {Object} Returns the new object.
 */
function pickByArray(object, props) {
  object = toObject(object);

  var index = -1,
      length = props.length,
      result = {};

  while (++index < length) {
    var key = props[index];
    if (key in object) {
      result[key] = object[key];
    }
  }
  return result;
}

/**
 * Converts `value` to an object if it is not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

/**
 * Checks if `value` is the language type of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return type == 'function' || (value && type == 'object') || false;
}

module.exports = pickByArray;

},{}],81:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var baseFor = require('lodash._basefor'),
    keysIn = require('lodash.keysin');

/**
 * The base implementation of `_.forIn` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForIn(object, iteratee) {
  return baseFor(object, iteratee, keysIn);
}

/**
 * A specialized version of `_.pick` that picks `object` properties `predicate`
 * returns truthy for.
 *
 * @private
 * @param {Object} object The source object.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Object} Returns the new object.
 */
function pickByCallback(object, predicate) {
  var result = {};
  baseForIn(object, function(value, key, object) {
    if (predicate(value, key, object)) {
      result[key] = value;
    }
  });
  return result;
}

module.exports = pickByCallback;

},{"lodash._basefor":82,"lodash.keysin":83}],82:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * The base implementation of `baseForIn` and `baseForOwn` which iterates
 * over `object` properties returned by `keysFunc` invoking `iteratee` for
 * each property. Iterator functions may exit iteration early by explicitly
 * returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
function baseFor(object, iteratee, keysFunc) {
  var index = -1,
      iterable = toObject(object),
      props = keysFunc(object),
      length = props.length;

  while (++index < length) {
    var key = props[index];
    if (iteratee(iterable[key], key, iterable) === false) {
      break;
    }
  }
  return object;
}

/**
 * Converts `value` to an object if it is not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

/**
 * Checks if `value` is the language type of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return type == 'function' || (value && type == 'object') || false;
}

module.exports = baseFor;

},{}],83:[function(require,module,exports){
/**
 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var isArguments = require('lodash.isarguments'),
    isArray = require('lodash.isarray');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Native method references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Used as the maximum length of an array-like value.
 * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
 * for more details.
 */
var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

/**
 * An object environment feature flags.
 *
 * @static
 * @memberOf _
 * @type Object
 */
var support = {};

(function(x) {

  /**
   * Detect if `arguments` object indexes are non-enumerable.
   *
   * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
   * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
   * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
   * checks for indexes that exceed their function's formal parameters with
   * associated values of `0`.
   *
   * @memberOf _.support
   * @type boolean
   */
  try {
    support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
  } catch(e) {
    support.nonEnumArgs = true;
  }
}(0, 0));

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = +value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on ES `ToLength`. See the
 * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
 * for more details.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the language type of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return type == 'function' || (value && type == 'object') || false;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  if (object == null) {
    return [];
  }
  if (!isObject(object)) {
    object = Object(object);
  }
  var length = object.length;
  length = (length && isLength(length) &&
    (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

  var Ctor = object.constructor,
      index = -1,
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
      result = Array(length),
      skipIndexes = length > 0;

  while (++index < length) {
    result[index] = (index + '');
  }
  for (var key in object) {
    if (!(skipIndexes && isIndex(key, length)) &&
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keysIn;

},{"lodash.isarguments":84,"lodash.isarray":85}],84:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],85:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"dup":78}],86:[function(require,module,exports){
/* global window */

'use strict';

var React = require('react');
var omit = require('lodash.omit');
var mediaQuery = require('./mediaQuery');
var toQuery = require('./toQuery');
var matchMedia = typeof window !== 'undefined' ? window.matchMedia : null;

var defaultTypes = {
  component: React.PropTypes.func,
  query: React.PropTypes.string
};
var mediaKeys = Object.keys(mediaQuery.all);
var excludedQueryKeys = Object.keys(defaultTypes);
var excludedPropKeys = excludedQueryKeys.concat(mediaKeys);

var mq = React.createClass({
  displayName: 'MediaQuery',

  getDefaultProps: function(){
    return {
      component: React.DOM.div
    };
  },

  getInitialState: function(){
    return {
      matches: false
    };
  },

  componentWillMount: function(){
    this.updateQuery(this.props);
  },

  componentWillReceiveProps: function(props){
    this.updateQuery(props);
  },

  updateQuery: function(props){
    if (props.query) {
      this.query = props.query;
    } else {
      this.query = toQuery(omit(props, excludedQueryKeys));
    }

    if (!this.query) {
      throw new Error('Invalid or missing MediaQuery!');
    }
    this._mql = matchMedia(this.query);
    this._mql.addListener(this.updateMatches);
    this.updateMatches();
  },

  componentWillUnmount: function(){
    this._mql.removeListener(this.updateMatches);
  },

  updateMatches: function(){
    if (this._mql.matches === this.state.matches) {
      return;
    }
    this.setState({
      matches: this._mql.matches
    });
  },

  render: function(){
    if (this.state.matches === false) {
      return null;
    }
    var props = omit(this.props, excludedPropKeys);
    return this.props.component(props, this.props.children);
  }
});

module.exports = mq;

},{"./mediaQuery":87,"./toQuery":88,"lodash.omit":69,"react":280}],87:[function(require,module,exports){
var PropTypes = require('react/lib/ReactPropTypes');
var assign = require('object-assign');

var stringOrNumber = PropTypes.oneOfType([
  PropTypes.string,
  PropTypes.number
]);

var features = {
  // media features
  orientation: PropTypes.oneOf([
    'portrait',
    'landscape'
  ]),

  scan: PropTypes.oneOf([
    'progressive',
    'interlace'
  ]),

  aspectRatio: PropTypes.string,
  minAspectRatio: PropTypes.string,
  maxAspectRatio: PropTypes.string,
  deviceAspectRatio: PropTypes.string,
  minDeviceAspectRatio: PropTypes.string,
  maxDeviceAspectRatio: PropTypes.string,

  height: stringOrNumber,
  minHeight: stringOrNumber,
  maxHeight: stringOrNumber,
  deviceHeight: stringOrNumber,
  minDeviceHeight: stringOrNumber,
  maxDeviceHeight: stringOrNumber,

  width: stringOrNumber,
  minWidth: stringOrNumber,
  maxWidth: stringOrNumber,
  deviceWidth: stringOrNumber,
  minDeviceWidth: stringOrNumber,
  maxDeviceWidth: stringOrNumber,

  color: PropTypes.bool,
  minColor: PropTypes.number,
  maxColor: PropTypes.number,

  colorIndex: PropTypes.bool,
  minColorIndex: PropTypes.number,
  maxColorIndex: PropTypes.number,

  monochrome: PropTypes.bool,
  minMonochrome: PropTypes.number,
  maxMonochrome: PropTypes.number,

  resolution: stringOrNumber,
  minResolution: stringOrNumber,
  maxResolution: stringOrNumber
};

// media types
var types = {
  grid: PropTypes.bool,
  aural: PropTypes.bool,
  braille: PropTypes.bool,
  handheld: PropTypes.bool,
  print: PropTypes.bool,
  projection: PropTypes.bool,
  screen: PropTypes.bool,
  tty: PropTypes.bool,
  tv: PropTypes.bool,
  embossed: PropTypes.bool
};

var all = {};
assign(all, types);
assign(all, features);

module.exports = {
  all: all,
  types: types,
  features: features
};

},{"object-assign":8,"react/lib/ReactPropTypes":205}],88:[function(require,module,exports){
'use strict';

var hyphenate = require('react/lib/hyphenateStyleName');
var mq = require('./mediaQuery');

function negate(cond) {
  return 'not ' + cond;
}

function keyVal(k, v) {
  var realKey = hyphenate(k);

  // px shorthand
  if (typeof v === 'number') {
    v = v+'px';
  }
  if (v === true) {
    return k;
  }
  if (v === false) {
    return negate(k);
  }
  return '('+realKey+': '+v+')';
}

function join(conds) {
  return conds.join(' and ');
}

module.exports = function(obj){
  var rules = [];
  Object.keys(mq.all).forEach(function(k){
    var v = obj[k];
    if (v != null) {
      rules.push(keyVal(k, v));
    }
  });
  return join(rules);
};
},{"./mediaQuery":87,"react/lib/hyphenateStyleName":258}],89:[function(require,module,exports){
var React = require('react');

var Button = require('react-bootstrap/Button');
var $__0=     require('react-router'),Navigation=$__0.Navigation,State=$__0.State;
var LinkMixin = require('./LinkMixin');

var ButtonLink = React.createClass({displayName: "ButtonLink",
  mixins: [
    LinkMixin,
    Navigation,
    State
  ],

  render: function () {
    var $__0=
      
      
      
      
        this.props,to=$__0.to,params=$__0.params,query=$__0.query,active=$__0.active,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{to:1,params:1,query:1,active:1});

    if (this.props.active === undefined) {
      active = this.isActive(to, params, query);
    }

    return (
      React.createElement(Button, React.__spread({},  props, 
        {href: this.getHref(), 
        active: active, 
        onClick: this.handleRouteTo, 
        ref: "button"}), 
          this.props.children
      )
    );
  }
});

module.exports = ButtonLink;

},{"./LinkMixin":90,"react":280,"react-bootstrap/Button":15,"react-router":121}],90:[function(require,module,exports){
var React = require('react');
var classSet = require('react/lib/cx');
var assign = require('react/lib/Object.assign');

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

module.exports = {
  propTypes: {
    activeClassName: React.PropTypes.string.isRequired,
    to: React.PropTypes.string.isRequired,
    params: React.PropTypes.object,
    query: React.PropTypes.object,
    onClick: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      activeClassName: 'active'
    };
  },

  /**
   * Returns the value of the "href" attribute to use on the DOM element.
   */
  getHref: function () {
    return this.makeHref(this.props.to, this.props.params, this.props.query);
  },

  /**
   * Returns the value of the "class" attribute to use on the DOM element, which contains
   * the value of the activeClassName property when this <Link> is active.
   */
  getClassName: function () {
    var classNames = {};

    if (this.props.className) {
      classNames[this.props.className] = true;
    }

    if (this.isActive(this.props.to, this.props.params, this.props.query)) {
      classNames[this.props.activeClassName] = true;
    }

    return classSet(classNames);
  },

  handleRouteTo: function (event) {
    var allowTransition = true;
    var clickResult;

    if (this.props.onClick) {
      clickResult = this.props.onClick(event);
    }

    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
      return;
    }

    if (clickResult === false || event.defaultPrevented === true) {
      allowTransition = false;
    }

    event.preventDefault();

    if (allowTransition) {
      this.transitionTo(this.props.to, this.props.params, this.props.query);
    }
  }
};

},{"react":280,"react/lib/Object.assign":159,"react/lib/cx":238}],91:[function(require,module,exports){
var React = require('react');
var classSet = require('react/lib/cx');

var MenuItem = require('react-bootstrap/MenuItem');
var $__0=     require('react-router'),Navigation=$__0.Navigation,State=$__0.State;
var LinkMixin = require('./LinkMixin');

var joinClasses = require('react-bootstrap/utils/joinClasses');

var MenuItemLink = React.createClass({displayName: "MenuItemLink",
  mixins: [
    LinkMixin,
    Navigation,
    State
  ],

  render: function() {
    var $__0=
      
      
      
      
      
                 
        this.props,to=$__0.to,params=$__0.params,query=$__0.query,active=$__0.active,className=$__0.className,onSelect=$__0.onSelect,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{to:1,params:1,query:1,active:1,className:1,onSelect:1});

    if (this.props.active === undefined) {
      active = this.isActive(to, params, query);
    }

    return (
      React.createElement(MenuItem, React.__spread({},  props, 
        {href: this.getHref(), 
        className:  joinClasses(className, classSet({ active: active })), 
        onClick: this.handleRouteTo, 
        ref: "menuItem"}), 
        this.props.children
      )
    );
  }
});

module.exports = MenuItemLink;

},{"./LinkMixin":90,"react":280,"react-bootstrap/MenuItem":34,"react-bootstrap/utils/joinClasses":68,"react-router":121,"react/lib/cx":238}],92:[function(require,module,exports){
var React = require('react');

var NavItem = require('react-bootstrap/NavItem');
var $__0=     require('react-router'),Navigation=$__0.Navigation,State=$__0.State;
var LinkMixin = require('./LinkMixin');

var NavItemLink = React.createClass({displayName: "NavItemLink",
  mixins: [
    LinkMixin,
    Navigation,
    State
  ],

  render: function() {
    var $__0=
      
      
      
      
        this.props,to=$__0.to,params=$__0.params,query=$__0.query,active=$__0.active,props=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{to:1,params:1,query:1,active:1});

    if (this.props.active === undefined) {
      active = this.isActive(to, params, query);
    }

    return (
      React.createElement(NavItem, React.__spread({},  props, 
        {href: this.getHref(), 
        active: active, 
        onClick: this.handleRouteTo, 
        ref: "navItem"}), 
        this.props.children
      )
    );
  }
});

module.exports = NavItemLink;

},{"./LinkMixin":90,"react":280,"react-bootstrap/NavItem":38,"react-router":121}],93:[function(require,module,exports){
var ButtonLink = require('./ButtonLink');
var MenuItemLink = require('./MenuItemLink');
var NavItemLink = require('./NavItemLink');

module.exports = {
  ButtonLink: ButtonLink,
  MenuItemLink: MenuItemLink,
  NavItemLink: NavItemLink
};

},{"./ButtonLink":89,"./MenuItemLink":91,"./NavItemLink":92}],94:[function(require,module,exports){
"use strict";

/**
 * Represents a cancellation caused by navigating away
 * before the previous transition has fully resolved.
 */
function Cancellation() {}

module.exports = Cancellation;
},{}],95:[function(require,module,exports){
"use strict";

var warning = require("react/lib/warning");
var invariant = require("react/lib/invariant");

function checkPropTypes(componentName, propTypes, props) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error = propTypes[propName](props, propName, componentName);

      if (error instanceof Error) warning(false, error.message);
    }
  }
}

var Configuration = {

  statics: {

    validateProps: function validateProps(props) {
      checkPropTypes(this.displayName, this.propTypes, props);
    }

  },

  render: function render() {
    invariant(false, "%s elements are for router configuration only and should not be rendered", this.constructor.displayName);
  }

};

module.exports = Configuration;
},{"react/lib/invariant":260,"react/lib/warning":279}],96:[function(require,module,exports){
"use strict";

var invariant = require("react/lib/invariant");
var canUseDOM = require("react/lib/ExecutionEnvironment").canUseDOM;

var History = {

  /**
   * The current number of entries in the history.
   *
   * Note: This property is read-only.
   */
  length: 1,

  /**
   * Sends the browser back one entry in the history.
   */
  back: function back() {
    invariant(canUseDOM, "Cannot use History.back without a DOM");

    // Do this first so that History.length will
    // be accurate in location change listeners.
    History.length -= 1;

    window.history.back();
  }

};

module.exports = History;
},{"react/lib/ExecutionEnvironment":154,"react/lib/invariant":260}],97:[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/* jshint -W084 */
var PathUtils = require("./PathUtils");

function deepSearch(route, pathname, query) {
  // Check the subtree first to find the most deeply-nested match.
  var childRoutes = route.childRoutes;
  if (childRoutes) {
    var match, childRoute;
    for (var i = 0, len = childRoutes.length; i < len; ++i) {
      childRoute = childRoutes[i];

      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

      if (match = deepSearch(childRoute, pathname, query)) {
        // A route in the subtree matched! Add this route and we're done.
        match.routes.unshift(route);
        return match;
      }
    }
  }

  // No child routes matched; try the default route.
  var defaultRoute = route.defaultRoute;
  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
    return new Match(pathname, params, query, [route, defaultRoute]);
  } // Does the "not found" route match?
  var notFoundRoute = route.notFoundRoute;
  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
    return new Match(pathname, params, query, [route, notFoundRoute]);
  } // Last attempt: check this route.
  var params = PathUtils.extractParams(route.path, pathname);
  if (params) {
    return new Match(pathname, params, query, [route]);
  }return null;
}

var Match = (function () {
  function Match(pathname, params, query, routes) {
    _classCallCheck(this, Match);

    this.pathname = pathname;
    this.params = params;
    this.query = query;
    this.routes = routes;
  }

  _prototypeProperties(Match, {
    findMatch: {

      /**
       * Attempts to match depth-first a route in the given route's
       * subtree against the given path and returns the match if it
       * succeeds, null if no match can be made.
       */

      value: function findMatch(routes, path) {
        var pathname = PathUtils.withoutQuery(path);
        var query = PathUtils.extractQuery(path);
        var match = null;

        for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

        return match;
      },
      writable: true,
      configurable: true
    }
  });

  return Match;
})();

module.exports = Match;
},{"./PathUtils":100}],98:[function(require,module,exports){
"use strict";

var PropTypes = require("./PropTypes");

/**
 * A mixin for components that modify the URL.
 *
 * Example:
 *
 *   var MyLink = React.createClass({
 *     mixins: [ Router.Navigation ],
 *     handleClick: function (event) {
 *       event.preventDefault();
 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
 *     },
 *     render: function () {
 *       return (
 *         <a onClick={this.handleClick}>Click me!</a>
 *       );
 *     }
 *   });
 */
var Navigation = {

  contextTypes: {
    makePath: PropTypes.func.isRequired,
    makeHref: PropTypes.func.isRequired,
    transitionTo: PropTypes.func.isRequired,
    replaceWith: PropTypes.func.isRequired,
    goBack: PropTypes.func.isRequired
  },

  /**
   * Returns an absolute URL path created from the given route
   * name, URL parameters, and query values.
   */
  makePath: function makePath(to, params, query) {
    return this.context.makePath(to, params, query);
  },

  /**
   * Returns a string that may safely be used as the href of a
   * link to the route with the given name.
   */
  makeHref: function makeHref(to, params, query) {
    return this.context.makeHref(to, params, query);
  },

  /**
   * Transitions to the URL specified in the arguments by pushing
   * a new URL onto the history stack.
   */
  transitionTo: function transitionTo(to, params, query) {
    this.context.transitionTo(to, params, query);
  },

  /**
   * Transitions to the URL specified in the arguments by replacing
   * the current URL in the history stack.
   */
  replaceWith: function replaceWith(to, params, query) {
    this.context.replaceWith(to, params, query);
  },

  /**
   * Transitions to the previous URL.
   */
  goBack: function goBack() {
    return this.context.goBack();
  }

};

module.exports = Navigation;
},{"./PropTypes":101}],99:[function(require,module,exports){
"use strict";

var PropTypes = require("./PropTypes");

/**
 * Provides the router with context for Router.Navigation.
 */
var NavigationContext = {

  childContextTypes: {
    makePath: PropTypes.func.isRequired,
    makeHref: PropTypes.func.isRequired,
    transitionTo: PropTypes.func.isRequired,
    replaceWith: PropTypes.func.isRequired,
    goBack: PropTypes.func.isRequired
  },

  getChildContext: function getChildContext() {
    return {
      makePath: this.constructor.makePath.bind(this.constructor),
      makeHref: this.constructor.makeHref.bind(this.constructor),
      transitionTo: this.constructor.transitionTo.bind(this.constructor),
      replaceWith: this.constructor.replaceWith.bind(this.constructor),
      goBack: this.constructor.goBack.bind(this.constructor)
    };
  }

};

module.exports = NavigationContext;
},{"./PropTypes":101}],100:[function(require,module,exports){
"use strict";

var invariant = require("react/lib/invariant");
var merge = require("qs/lib/utils").merge;
var qs = require("qs");

var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
var queryMatcher = /\?(.+)/;

var _compiledPatterns = {};

function compilePattern(pattern) {
  if (!(pattern in _compiledPatterns)) {
    var paramNames = [];
    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
      if (paramName) {
        paramNames.push(paramName);
        return "([^/?#]+)";
      } else if (match === "*") {
        paramNames.push("splat");
        return "(.*?)";
      } else {
        return "\\" + match;
      }
    });

    _compiledPatterns[pattern] = {
      matcher: new RegExp("^" + source + "$", "i"),
      paramNames: paramNames
    };
  }

  return _compiledPatterns[pattern];
}

var PathUtils = {

  /**
   * Returns true if the given path is absolute.
   */
  isAbsolute: function isAbsolute(path) {
    return path.charAt(0) === "/";
  },

  /**
   * Joins two URL paths together.
   */
  join: function join(a, b) {
    return a.replace(/\/*$/, "/") + b;
  },

  /**
   * Returns an array of the names of all parameters in the given pattern.
   */
  extractParamNames: function extractParamNames(pattern) {
    return compilePattern(pattern).paramNames;
  },

  /**
   * Extracts the portions of the given URL path that match the given pattern
   * and returns an object of param name => value pairs. Returns null if the
   * pattern does not match the given path.
   */
  extractParams: function extractParams(pattern, path) {
    var _compilePattern = compilePattern(pattern);

    var matcher = _compilePattern.matcher;
    var paramNames = _compilePattern.paramNames;

    var match = path.match(matcher);

    if (!match) {
      return null;
    }var params = {};

    paramNames.forEach(function (paramName, index) {
      params[paramName] = match[index + 1];
    });

    return params;
  },

  /**
   * Returns a version of the given route path with params interpolated. Throws
   * if there is a dynamic segment of the route path for which there is no param.
   */
  injectParams: function injectParams(pattern, params) {
    params = params || {};

    var splatIndex = 0;

    return pattern.replace(paramInjectMatcher, function (match, paramName) {
      paramName = paramName || "splat";

      // If param is optional don't check for existence
      if (paramName.slice(-1) === "?") {
        paramName = paramName.slice(0, -1);

        if (params[paramName] == null) return "";
      } else {
        invariant(params[paramName] != null, "Missing \"%s\" parameter for path \"%s\"", paramName, pattern);
      }

      var segment;
      if (paramName === "splat" && Array.isArray(params[paramName])) {
        segment = params[paramName][splatIndex++];

        invariant(segment != null, "Missing splat # %s for path \"%s\"", splatIndex, pattern);
      } else {
        segment = params[paramName];
      }

      return segment;
    }).replace(paramInjectTrailingSlashMatcher, "/");
  },

  /**
   * Returns an object that is the result of parsing any query string contained
   * in the given path, null if the path contains no query string.
   */
  extractQuery: function extractQuery(path) {
    var match = path.match(queryMatcher);
    return match && qs.parse(match[1]);
  },

  /**
   * Returns a version of the given path without the query string.
   */
  withoutQuery: function withoutQuery(path) {
    return path.replace(queryMatcher, "");
  },

  /**
   * Returns a version of the given path with the parameters in the given
   * query merged into the query string.
   */
  withQuery: function withQuery(path, query) {
    var existingQuery = PathUtils.extractQuery(path);

    if (existingQuery) query = query ? merge(existingQuery, query) : existingQuery;

    var queryString = qs.stringify(query, { indices: false });

    if (queryString) {
      return PathUtils.withoutQuery(path) + "?" + queryString;
    }return path;
  }

};

module.exports = PathUtils;
},{"qs":129,"qs/lib/utils":133,"react/lib/invariant":260}],101:[function(require,module,exports){
"use strict";

var assign = require("react/lib/Object.assign");
var ReactPropTypes = require("react").PropTypes;

var PropTypes = assign({

  /**
   * Requires that the value of a prop be falsy.
   */
  falsy: function falsy(props, propName, componentName) {
    if (props[propName]) {
      return new Error("<" + componentName + "> may not have a \"" + propName + "\" prop");
    }
  }

}, ReactPropTypes);

module.exports = PropTypes;
},{"react":280,"react/lib/Object.assign":159}],102:[function(require,module,exports){
"use strict";

/**
 * Encapsulates a redirect to the given route.
 */
function Redirect(to, params, query) {
  this.to = to;
  this.params = params;
  this.query = query;
}

module.exports = Redirect;
},{}],103:[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var assign = require("react/lib/Object.assign");
var invariant = require("react/lib/invariant");
var warning = require("react/lib/warning");
var PathUtils = require("./PathUtils");

var _currentRoute;

var Route = (function () {
  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
    _classCallCheck(this, Route);

    this.name = name;
    this.path = path;
    this.paramNames = PathUtils.extractParamNames(this.path);
    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
    this.isDefault = !!isDefault;
    this.isNotFound = !!isNotFound;
    this.onEnter = onEnter;
    this.onLeave = onLeave;
    this.handler = handler;
  }

  _prototypeProperties(Route, {
    createRoute: {

      /**
       * Creates and returns a new route. Options may be a URL pathname string
       * with placeholders for named params or an object with any of the following
       * properties:
       *
       * - name                     The name of the route. This is used to lookup a
       *                            route relative to its parent route and should be
       *                            unique among all child routes of the same parent
       * - path                     A URL pathname string with optional placeholders
       *                            that specify the names of params to extract from
       *                            the URL when the path matches. Defaults to `/${name}`
       *                            when there is a name given, or the path of the parent
       *                            route, or /
       * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
       *                            the scroll behavior of the router
       * - isDefault                True to make this route the default route among all
       *                            its siblings
       * - isNotFound               True to make this route the "not found" route among
       *                            all its siblings
       * - onEnter                  A transition hook that will be called when the
       *                            router is going to enter this route
       * - onLeave                  A transition hook that will be called when the
       *                            router is going to leave this route
       * - handler                  A React component that will be rendered when
       *                            this route is active
       * - parentRoute              The parent route to use for this route. This option
       *                            is automatically supplied when creating routes inside
       *                            the callback to another invocation of createRoute. You
       *                            only ever need to use this when declaring routes
       *                            independently of one another to manually piece together
       *                            the route hierarchy
       *
       * The callback may be used to structure your route hierarchy. Any call to
       * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
       * inside the callback automatically uses this route as its parent.
       */

      value: function createRoute(options, callback) {
        options = options || {};

        if (typeof options === "string") options = { path: options };

        var parentRoute = _currentRoute;

        if (parentRoute) {
          warning(options.parentRoute == null || options.parentRoute === parentRoute, "You should not use parentRoute with createRoute inside another route's child callback; it is ignored");
        } else {
          parentRoute = options.parentRoute;
        }

        var name = options.name;
        var path = options.path || name;

        if (path && !(options.isDefault || options.isNotFound)) {
          if (PathUtils.isAbsolute(path)) {
            if (parentRoute) {
              invariant(parentRoute.paramNames.length === 0, "You cannot nest path \"%s\" inside \"%s\"; the parent requires URL parameters", path, parentRoute.path);
            }
          } else if (parentRoute) {
            // Relative paths extend their parent.
            path = PathUtils.join(parentRoute.path, path);
          } else {
            path = "/" + path;
          }
        } else {
          path = parentRoute ? parentRoute.path : "/";
        }

        if (options.isNotFound && !/\*$/.test(path)) path += "*"; // Auto-append * to the path of not found routes.

        var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

        if (parentRoute) {
          if (route.isDefault) {
            invariant(parentRoute.defaultRoute == null, "%s may not have more than one default route", parentRoute);

            parentRoute.defaultRoute = route;
          } else if (route.isNotFound) {
            invariant(parentRoute.notFoundRoute == null, "%s may not have more than one not found route", parentRoute);

            parentRoute.notFoundRoute = route;
          }

          parentRoute.appendChild(route);
        }

        // Any routes created in the callback
        // use this route as their parent.
        if (typeof callback === "function") {
          var currentRoute = _currentRoute;
          _currentRoute = route;
          callback.call(route, route);
          _currentRoute = currentRoute;
        }

        return route;
      },
      writable: true,
      configurable: true
    },
    createDefaultRoute: {

      /**
       * Creates and returns a route that is rendered when its parent matches
       * the current URL.
       */

      value: function createDefaultRoute(options) {
        return Route.createRoute(assign({}, options, { isDefault: true }));
      },
      writable: true,
      configurable: true
    },
    createNotFoundRoute: {

      /**
       * Creates and returns a route that is rendered when its parent matches
       * the current URL but none of its siblings do.
       */

      value: function createNotFoundRoute(options) {
        return Route.createRoute(assign({}, options, { isNotFound: true }));
      },
      writable: true,
      configurable: true
    },
    createRedirect: {

      /**
       * Creates and returns a route that automatically redirects the transition
       * to another route. In addition to the normal options to createRoute, this
       * function accepts the following options:
       *
       * - from         An alias for the `path` option. Defaults to *
       * - to           The path/route/route name to redirect to
       * - params       The params to use in the redirect URL. Defaults
       *                to using the current params
       * - query        The query to use in the redirect URL. Defaults
       *                to using the current query
       */

      value: function createRedirect(options) {
        return Route.createRoute(assign({}, options, {
          path: options.path || options.from || "*",
          onEnter: function onEnter(transition, params, query) {
            transition.redirect(options.to, options.params || params, options.query || query);
          }
        }));
      },
      writable: true,
      configurable: true
    }
  }, {
    appendChild: {

      /**
       * Appends the given route to this route's child routes.
       */

      value: function appendChild(route) {
        invariant(route instanceof Route, "route.appendChild must use a valid Route");

        if (!this.childRoutes) this.childRoutes = [];

        this.childRoutes.push(route);
      },
      writable: true,
      configurable: true
    },
    toString: {
      value: function toString() {
        var string = "<Route";

        if (this.name) string += " name=\"" + this.name + "\"";

        string += " path=\"" + this.path + "\">";

        return string;
      },
      writable: true,
      configurable: true
    }
  });

  return Route;
})();

module.exports = Route;
},{"./PathUtils":100,"react/lib/Object.assign":159,"react/lib/invariant":260,"react/lib/warning":279}],104:[function(require,module,exports){
"use strict";

var React = require("react");
var assign = require("react/lib/Object.assign");
var PropTypes = require("./PropTypes");

var REF_NAME = "__routeHandler__";

var RouteHandlerMixin = {

  contextTypes: {
    getRouteAtDepth: PropTypes.func.isRequired,
    setRouteComponentAtDepth: PropTypes.func.isRequired,
    routeHandlers: PropTypes.array.isRequired
  },

  childContextTypes: {
    routeHandlers: PropTypes.array.isRequired
  },

  getChildContext: function getChildContext() {
    return {
      routeHandlers: this.context.routeHandlers.concat([this])
    };
  },

  componentDidMount: function componentDidMount() {
    this._updateRouteComponent(this.refs[REF_NAME]);
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateRouteComponent(this.refs[REF_NAME]);
  },

  componentWillUnmount: function componentWillUnmount() {
    this._updateRouteComponent(null);
  },

  _updateRouteComponent: function _updateRouteComponent(component) {
    this.context.setRouteComponentAtDepth(this.getRouteDepth(), component);
  },

  getRouteDepth: function getRouteDepth() {
    return this.context.routeHandlers.length;
  },

  createChildRouteHandler: function createChildRouteHandler(props) {
    var route = this.context.getRouteAtDepth(this.getRouteDepth());
    return route ? React.createElement(route.handler, assign({}, props || this.props, { ref: REF_NAME })) : null;
  }

};

module.exports = RouteHandlerMixin;
},{"./PropTypes":101,"react":280,"react/lib/Object.assign":159}],105:[function(require,module,exports){
"use strict";

var invariant = require("react/lib/invariant");
var canUseDOM = require("react/lib/ExecutionEnvironment").canUseDOM;
var getWindowScrollPosition = require("./getWindowScrollPosition");

function shouldUpdateScroll(state, prevState) {
  if (!prevState) {
    return true;
  } // Don't update scroll position when only the query has changed.
  if (state.pathname === prevState.pathname) {
    return false;
  }var routes = state.routes;
  var prevRoutes = prevState.routes;

  var sharedAncestorRoutes = routes.filter(function (route) {
    return prevRoutes.indexOf(route) !== -1;
  });

  return !sharedAncestorRoutes.some(function (route) {
    return route.ignoreScrollBehavior;
  });
}

/**
 * Provides the router with the ability to manage window scroll position
 * according to its scroll behavior.
 */
var ScrollHistory = {

  statics: {

    /**
     * Records curent scroll position as the last known position for the given URL path.
     */
    recordScrollPosition: function recordScrollPosition(path) {
      if (!this.scrollHistory) this.scrollHistory = {};

      this.scrollHistory[path] = getWindowScrollPosition();
    },

    /**
     * Returns the last known scroll position for the given URL path.
     */
    getScrollPosition: function getScrollPosition(path) {
      if (!this.scrollHistory) this.scrollHistory = {};

      return this.scrollHistory[path] || null;
    }

  },

  componentWillMount: function componentWillMount() {
    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, "Cannot use scroll behavior without a DOM");
  },

  componentDidMount: function componentDidMount() {
    this._updateScroll();
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    this._updateScroll(prevState);
  },

  _updateScroll: function _updateScroll(prevState) {
    if (!shouldUpdateScroll(this.state, prevState)) {
      return;
    }var scrollBehavior = this.constructor.getScrollBehavior();

    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
  }

};

module.exports = ScrollHistory;
},{"./getWindowScrollPosition":120,"react/lib/ExecutionEnvironment":154,"react/lib/invariant":260}],106:[function(require,module,exports){
"use strict";

var PropTypes = require("./PropTypes");

/**
 * A mixin for components that need to know the path, routes, URL
 * params and query that are currently active.
 *
 * Example:
 *
 *   var AboutLink = React.createClass({
 *     mixins: [ Router.State ],
 *     render: function () {
 *       var className = this.props.className;
 *   
 *       if (this.isActive('about'))
 *         className += ' is-active';
 *   
 *       return React.DOM.a({ className: className }, this.props.children);
 *     }
 *   });
 */
var State = {

  contextTypes: {
    getCurrentPath: PropTypes.func.isRequired,
    getCurrentRoutes: PropTypes.func.isRequired,
    getCurrentPathname: PropTypes.func.isRequired,
    getCurrentParams: PropTypes.func.isRequired,
    getCurrentQuery: PropTypes.func.isRequired,
    isActive: PropTypes.func.isRequired
  },

  /**
   * Returns the current URL path.
   */
  getPath: function getPath() {
    return this.context.getCurrentPath();
  },

  /**
   * Returns an array of the routes that are currently active.
   */
  getRoutes: function getRoutes() {
    return this.context.getCurrentRoutes();
  },

  /**
   * Returns the current URL path without the query string.
   */
  getPathname: function getPathname() {
    return this.context.getCurrentPathname();
  },

  /**
   * Returns an object of the URL params that are currently active.
   */
  getParams: function getParams() {
    return this.context.getCurrentParams();
  },

  /**
   * Returns an object of the query params that are currently active.
   */
  getQuery: function getQuery() {
    return this.context.getCurrentQuery();
  },

  /**
   * A helper method to determine if a given route, params, and query
   * are active.
   */
  isActive: function isActive(to, params, query) {
    return this.context.isActive(to, params, query);
  }

};

module.exports = State;
},{"./PropTypes":101}],107:[function(require,module,exports){
"use strict";

var assign = require("react/lib/Object.assign");
var PropTypes = require("./PropTypes");
var PathUtils = require("./PathUtils");

function routeIsActive(activeRoutes, routeName) {
  return activeRoutes.some(function (route) {
    return route.name === routeName;
  });
}

function paramsAreActive(activeParams, params) {
  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
    return false;
  }return true;
}

function queryIsActive(activeQuery, query) {
  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
    return false;
  }return true;
}

/**
 * Provides the router with context for Router.State.
 */
var StateContext = {

  /**
   * Returns the current URL path + query string.
   */
  getCurrentPath: function getCurrentPath() {
    return this.state.path;
  },

  /**
   * Returns a read-only array of the currently active routes.
   */
  getCurrentRoutes: function getCurrentRoutes() {
    return this.state.routes.slice(0);
  },

  /**
   * Returns the current URL path without the query string.
   */
  getCurrentPathname: function getCurrentPathname() {
    return this.state.pathname;
  },

  /**
   * Returns a read-only object of the currently active URL parameters.
   */
  getCurrentParams: function getCurrentParams() {
    return assign({}, this.state.params);
  },

  /**
   * Returns a read-only object of the currently active query parameters.
   */
  getCurrentQuery: function getCurrentQuery() {
    return assign({}, this.state.query);
  },

  /**
   * Returns true if the given route, params, and query are active.
   */
  isActive: function isActive(to, params, query) {
    if (PathUtils.isAbsolute(to)) {
      return to === this.state.path;
    }return routeIsActive(this.state.routes, to) && paramsAreActive(this.state.params, params) && (query == null || queryIsActive(this.state.query, query));
  },

  childContextTypes: {
    getCurrentPath: PropTypes.func.isRequired,
    getCurrentRoutes: PropTypes.func.isRequired,
    getCurrentPathname: PropTypes.func.isRequired,
    getCurrentParams: PropTypes.func.isRequired,
    getCurrentQuery: PropTypes.func.isRequired,
    isActive: PropTypes.func.isRequired
  },

  getChildContext: function getChildContext() {
    return {
      getCurrentPath: this.getCurrentPath,
      getCurrentRoutes: this.getCurrentRoutes,
      getCurrentPathname: this.getCurrentPathname,
      getCurrentParams: this.getCurrentParams,
      getCurrentQuery: this.getCurrentQuery,
      isActive: this.isActive
    };
  }

};

module.exports = StateContext;
},{"./PathUtils":100,"./PropTypes":101,"react/lib/Object.assign":159}],108:[function(require,module,exports){
"use strict";

/* jshint -W058 */

var Cancellation = require("./Cancellation");
var Redirect = require("./Redirect");

/**
 * Encapsulates a transition to a given path.
 *
 * The willTransitionTo and willTransitionFrom handlers receive
 * an instance of this class as their first argument.
 */
function Transition(path, retry) {
  this.path = path;
  this.abortReason = null;
  // TODO: Change this to router.retryTransition(transition)
  this.retry = retry.bind(this);
}

Transition.prototype.abort = function (reason) {
  if (this.abortReason == null) this.abortReason = reason || "ABORT";
};

Transition.prototype.redirect = function (to, params, query) {
  this.abort(new Redirect(to, params, query));
};

Transition.prototype.cancel = function () {
  this.abort(new Cancellation());
};

Transition.from = function (transition, routes, components, callback) {
  routes.reduce(function (callback, route, index) {
    return function (error) {
      if (error || transition.abortReason) {
        callback(error);
      } else if (route.onLeave) {
        try {
          route.onLeave(transition, components[index], callback);

          // If there is no callback in the argument list, call it automatically.
          if (route.onLeave.length < 3) callback();
        } catch (e) {
          callback(e);
        }
      } else {
        callback();
      }
    };
  }, callback)();
};

Transition.to = function (transition, routes, params, query, callback) {
  routes.reduceRight(function (callback, route) {
    return function (error) {
      if (error || transition.abortReason) {
        callback(error);
      } else if (route.onEnter) {
        try {
          route.onEnter(transition, params, query, callback);

          // If there is no callback in the argument list, call it automatically.
          if (route.onEnter.length < 4) callback();
        } catch (e) {
          callback(e);
        }
      } else {
        callback();
      }
    };
  }, callback)();
};

module.exports = Transition;
},{"./Cancellation":94,"./Redirect":102}],109:[function(require,module,exports){
"use strict";

/**
 * Actions that modify the URL.
 */
var LocationActions = {

  /**
   * Indicates a new location is being pushed to the history stack.
   */
  PUSH: "push",

  /**
   * Indicates the current location should be replaced.
   */
  REPLACE: "replace",

  /**
   * Indicates the most recent entry should be removed from the history stack.
   */
  POP: "pop"

};

module.exports = LocationActions;
},{}],110:[function(require,module,exports){
"use strict";

var LocationActions = require("../actions/LocationActions");

/**
 * A scroll behavior that attempts to imitate the default behavior
 * of modern browsers.
 */
var ImitateBrowserBehavior = {

  updateScrollPosition: function updateScrollPosition(position, actionType) {
    switch (actionType) {
      case LocationActions.PUSH:
      case LocationActions.REPLACE:
        window.scrollTo(0, 0);
        break;
      case LocationActions.POP:
        if (position) {
          window.scrollTo(position.x, position.y);
        } else {
          window.scrollTo(0, 0);
        }
        break;
    }
  }

};

module.exports = ImitateBrowserBehavior;
},{"../actions/LocationActions":109}],111:[function(require,module,exports){
"use strict";

/**
 * A scroll behavior that always scrolls to the top of the page
 * after a transition.
 */
var ScrollToTopBehavior = {

  updateScrollPosition: function updateScrollPosition() {
    window.scrollTo(0, 0);
  }

};

module.exports = ScrollToTopBehavior;
},{}],112:[function(require,module,exports){
"use strict";

var React = require("react");
var Configuration = require("../Configuration");
var PropTypes = require("../PropTypes");

/**
 * A <DefaultRoute> component is a special kind of <Route> that
 * renders when its parent matches but none of its siblings do.
 * Only one such route may be used at any given level in the
 * route hierarchy.
 */
var DefaultRoute = React.createClass({

  displayName: "DefaultRoute",

  mixins: [Configuration],

  propTypes: {
    name: PropTypes.string,
    path: PropTypes.falsy,
    children: PropTypes.falsy,
    handler: PropTypes.func.isRequired
  }

});

module.exports = DefaultRoute;
},{"../Configuration":95,"../PropTypes":101,"react":280}],113:[function(require,module,exports){
"use strict";

var React = require("react");
var classSet = require("react/lib/cx");
var assign = require("react/lib/Object.assign");
var Navigation = require("../Navigation");
var State = require("../State");
var PropTypes = require("../PropTypes");
var Route = require("../Route");

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

/**
 * <Link> components are used to create an <a> element that links to a route.
 * When that route is active, the link gets an "active" class name (or the
 * value of its `activeClassName` prop).
 *
 * For example, assuming you have the following route:
 *
 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
 *
 * You could use the following component to link to that route:
 *
 *   <Link to="showPost" params={{ postID: "123" }} />
 *
 * In addition to params, links may pass along query string parameters
 * using the `query` prop.
 *
 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
 */
var Link = React.createClass({

  displayName: "Link",

  mixins: [Navigation, State],

  propTypes: {
    activeClassName: PropTypes.string.isRequired,
    to: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Route)]),
    params: PropTypes.object,
    query: PropTypes.object,
    activeStyle: PropTypes.object,
    onClick: PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      activeClassName: "active"
    };
  },

  handleClick: function handleClick(event) {
    var allowTransition = true;
    var clickResult;

    if (this.props.onClick) clickResult = this.props.onClick(event);

    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
      return;
    }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

    event.preventDefault();

    if (allowTransition) this.transitionTo(this.props.to, this.props.params, this.props.query);
  },

  /**
   * Returns the value of the "href" attribute to use on the DOM element.
   */
  getHref: function getHref() {
    return this.makeHref(this.props.to, this.props.params, this.props.query);
  },

  /**
   * Returns the value of the "class" attribute to use on the DOM element, which contains
   * the value of the activeClassName property when this <Link> is active.
   */
  getClassName: function getClassName() {
    var classNames = {};

    if (this.props.className) classNames[this.props.className] = true;

    if (this.getActiveState()) classNames[this.props.activeClassName] = true;

    return classSet(classNames);
  },

  getActiveState: function getActiveState() {
    return this.isActive(this.props.to, this.props.params, this.props.query);
  },

  render: function render() {
    var props = assign({}, this.props, {
      href: this.getHref(),
      className: this.getClassName(),
      onClick: this.handleClick
    });

    if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

    return React.DOM.a(props, this.props.children);
  }

});

module.exports = Link;
},{"../Navigation":98,"../PropTypes":101,"../Route":103,"../State":106,"react":280,"react/lib/Object.assign":159,"react/lib/cx":238}],114:[function(require,module,exports){
"use strict";

var React = require("react");
var Configuration = require("../Configuration");
var PropTypes = require("../PropTypes");

/**
 * A <NotFoundRoute> is a special kind of <Route> that
 * renders when the beginning of its parent's path matches
 * but none of its siblings do, including any <DefaultRoute>.
 * Only one such route may be used at any given level in the
 * route hierarchy.
 */
var NotFoundRoute = React.createClass({

  displayName: "NotFoundRoute",

  mixins: [Configuration],

  propTypes: {
    name: PropTypes.string,
    path: PropTypes.falsy,
    children: PropTypes.falsy,
    handler: PropTypes.func.isRequired
  }

});

module.exports = NotFoundRoute;
},{"../Configuration":95,"../PropTypes":101,"react":280}],115:[function(require,module,exports){
"use strict";

var React = require("react");
var Configuration = require("../Configuration");
var PropTypes = require("../PropTypes");

/**
 * A <Redirect> component is a special kind of <Route> that always
 * redirects to another route when it matches.
 */
var Redirect = React.createClass({

  displayName: "Redirect",

  mixins: [Configuration],

  propTypes: {
    path: PropTypes.string,
    from: PropTypes.string, // Alias for path.
    to: PropTypes.string,
    handler: PropTypes.falsy
  }

});

module.exports = Redirect;
},{"../Configuration":95,"../PropTypes":101,"react":280}],116:[function(require,module,exports){
"use strict";

var React = require("react");
var Configuration = require("../Configuration");
var PropTypes = require("../PropTypes");
var RouteHandler = require("./RouteHandler");
/**
 * <Route> components specify components that are rendered to the page when the
 * URL matches a given pattern.
 *
 * Routes are arranged in a nested tree structure. When a new URL is requested,
 * the tree is searched depth-first to find a route whose path matches the URL.
 * When one is found, all routes in the tree that lead to it are considered
 * "active" and their components are rendered into the DOM, nested in the same
 * order as they are in the tree.
 *
 * The preferred way to configure a router is using JSX. The XML-like syntax is
 * a great way to visualize how routes are laid out in an application.
 *
 *   var routes = [
 *     <Route handler={App}>
 *       <Route name="login" handler={Login}/>
 *       <Route name="logout" handler={Logout}/>
 *       <Route name="about" handler={About}/>
 *     </Route>
 *   ];
 *   
 *   Router.run(routes, function (Handler) {
 *     React.render(<Handler/>, document.body);
 *   });
 *
 * Handlers for Route components that contain children can render their active
 * child route using a <RouteHandler> element.
 *
 *   var App = React.createClass({
 *     render: function () {
 *       return (
 *         <div class="application">
 *           <RouteHandler/>
 *         </div>
 *       );
 *     }
 *   });
 *
 * If no handler is provided for the route, it will render a matched child route.
 */
var Route = React.createClass({

  displayName: "Route",

  mixins: [Configuration],

  propTypes: {
    name: PropTypes.string,
    path: PropTypes.string,
    handler: PropTypes.func,
    ignoreScrollBehavior: PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      handler: RouteHandler
    };
  }

});

module.exports = Route;
},{"../Configuration":95,"../PropTypes":101,"./RouteHandler":117,"react":280}],117:[function(require,module,exports){
"use strict";

var React = require("react");
var RouteHandlerMixin = require("../RouteHandlerMixin");

/**
 * A <RouteHandler> component renders the active child route handler
 * when routes are nested.
 */
var RouteHandler = React.createClass({

  displayName: "RouteHandler",

  mixins: [RouteHandlerMixin],

  render: function render() {
    return this.createChildRouteHandler();
  }

});

module.exports = RouteHandler;
},{"../RouteHandlerMixin":104,"react":280}],118:[function(require,module,exports){
(function (process){
"use strict";

/* jshint -W058 */
var React = require("react");
var warning = require("react/lib/warning");
var invariant = require("react/lib/invariant");
var canUseDOM = require("react/lib/ExecutionEnvironment").canUseDOM;
var LocationActions = require("./actions/LocationActions");
var ImitateBrowserBehavior = require("./behaviors/ImitateBrowserBehavior");
var HashLocation = require("./locations/HashLocation");
var HistoryLocation = require("./locations/HistoryLocation");
var RefreshLocation = require("./locations/RefreshLocation");
var StaticLocation = require("./locations/StaticLocation");
var NavigationContext = require("./NavigationContext");
var ScrollHistory = require("./ScrollHistory");
var StateContext = require("./StateContext");
var createRoutesFromReactChildren = require("./createRoutesFromReactChildren");
var isReactChildren = require("./isReactChildren");
var Transition = require("./Transition");
var PropTypes = require("./PropTypes");
var Redirect = require("./Redirect");
var History = require("./History");
var Cancellation = require("./Cancellation");
var Match = require("./Match");
var Route = require("./Route");
var supportsHistory = require("./supportsHistory");
var PathUtils = require("./PathUtils");

/**
 * The default location for new routers.
 */
var DEFAULT_LOCATION = canUseDOM ? HashLocation : "/";

/**
 * The default scroll behavior for new routers.
 */
var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

function hasProperties(object, properties) {
  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
    return false;
  }return true;
}

function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
  return routes.some(function (r) {
    if (r !== route) return false;

    var paramNames = route.paramNames;
    var paramName;

    // Ensure that all params the route cares about did not change.
    for (var i = 0, len = paramNames.length; i < len; ++i) {
      paramName = paramNames[i];

      if (nextParams[paramName] !== prevParams[paramName]) return false;
    }

    // Ensure the query hasn't changed.
    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
  });
}

function addRoutesToNamedRoutes(routes, namedRoutes) {
  var route;
  for (var i = 0, len = routes.length; i < len; ++i) {
    route = routes[i];

    if (route.name) {
      invariant(namedRoutes[route.name] == null, "You may not have more than one route named \"%s\"", route.name);

      namedRoutes[route.name] = route;
    }

    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
  }
}

/**
 * Creates and returns a new router using the given options. A router
 * is a ReactComponent class that knows how to react to changes in the
 * URL and keep the contents of the page in sync.
 *
 * Options may be any of the following:
 *
 * - routes           (required) The route config
 * - location         The location to use. Defaults to HashLocation when
 *                    the DOM is available, "/" otherwise
 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
 *                    when the DOM is available, null otherwise
 * - onError          A function that is used to handle errors
 * - onAbort          A function that is used to handle aborted transitions
 *
 * When rendering in a server-side environment, the location should simply
 * be the URL path that was used in the request, including the query string.
 */
function createRouter(options) {
  options = options || {};

  if (isReactChildren(options)) options = { routes: options };

  var mountedComponents = [];
  var location = options.location || DEFAULT_LOCATION;
  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
  var state = {};
  var nextState = {};
  var pendingTransition = null;
  var dispatchHandler = null;

  if (typeof location === "string") location = new StaticLocation(location);

  if (location instanceof StaticLocation) {
    warning(!canUseDOM || process.env.NODE_ENV === "test", "You should not use a static location in a DOM environment because " + "the router will not be kept in sync with the current URL");
  } else {
    invariant(canUseDOM || location.needsDOM === false, "You cannot use %s without a DOM", location);
  }

  // Automatically fall back to full page refreshes in
  // browsers that don't support the HTML history API.
  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

  var Router = React.createClass({

    displayName: "Router",

    statics: {

      isRunning: false,

      cancelPendingTransition: function cancelPendingTransition() {
        if (pendingTransition) {
          pendingTransition.cancel();
          pendingTransition = null;
        }
      },

      clearAllRoutes: function clearAllRoutes() {
        this.cancelPendingTransition();
        this.namedRoutes = {};
        this.routes = [];
      },

      /**
       * Adds routes to this router from the given children object (see ReactChildren).
       */
      addRoutes: function addRoutes(routes) {
        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

        addRoutesToNamedRoutes(routes, this.namedRoutes);

        this.routes.push.apply(this.routes, routes);
      },

      /**
       * Replaces routes of this router from the given children object (see ReactChildren).
       */
      replaceRoutes: function replaceRoutes(routes) {
        this.clearAllRoutes();
        this.addRoutes(routes);
        this.refresh();
      },

      /**
       * Performs a match of the given path against this router and returns an object
       * with the { routes, params, pathname, query } that match. Returns null if no
       * match can be made.
       */
      match: function match(path) {
        return Match.findMatch(this.routes, path);
      },

      /**
       * Returns an absolute URL path created from the given route
       * name, URL parameters, and query.
       */
      makePath: function makePath(to, params, query) {
        var path;
        if (PathUtils.isAbsolute(to)) {
          path = to;
        } else {
          var route = to instanceof Route ? to : this.namedRoutes[to];

          invariant(route instanceof Route, "Cannot find a route named \"%s\"", to);

          path = route.path;
        }

        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
      },

      /**
       * Returns a string that may safely be used as the href of a link
       * to the route with the given name, URL parameters, and query.
       */
      makeHref: function makeHref(to, params, query) {
        var path = this.makePath(to, params, query);
        return location === HashLocation ? "#" + path : path;
      },

      /**
       * Transitions to the URL specified in the arguments by pushing
       * a new URL onto the history stack.
       */
      transitionTo: function transitionTo(to, params, query) {
        var path = this.makePath(to, params, query);

        if (pendingTransition) {
          // Replace so pending location does not stay in history.
          location.replace(path);
        } else {
          location.push(path);
        }
      },

      /**
       * Transitions to the URL specified in the arguments by replacing
       * the current URL in the history stack.
       */
      replaceWith: function replaceWith(to, params, query) {
        location.replace(this.makePath(to, params, query));
      },

      /**
       * Transitions to the previous URL if one is available. Returns true if the
       * router was able to go back, false otherwise.
       *
       * Note: The router only tracks history entries in your application, not the
       * current browser session, so you can safely call this function without guarding
       * against sending the user back to some other site. However, when using
       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
       * don't support HTML5 history) this method will *always* send the client back
       * because we cannot reliably track history length.
       */
      goBack: function goBack() {
        if (History.length > 1 || location === RefreshLocation) {
          location.pop();
          return true;
        }

        warning(false, "goBack() was ignored because there is no router history");

        return false;
      },

      handleAbort: options.onAbort || function (abortReason) {
        if (location instanceof StaticLocation) throw new Error("Unhandled aborted transition! Reason: " + abortReason);

        if (abortReason instanceof Cancellation) {
          return;
        } else if (abortReason instanceof Redirect) {
          location.replace(this.makePath(abortReason.to, abortReason.params, abortReason.query));
        } else {
          location.pop();
        }
      },

      handleError: options.onError || function (error) {
        // Throw so we don't silently swallow async errors.
        throw error; // This error probably originated in a transition hook.
      },

      handleLocationChange: function handleLocationChange(change) {
        this.dispatch(change.path, change.type);
      },

      /**
       * Performs a transition to the given path and calls callback(error, abortReason)
       * when the transition is finished. If both arguments are null the router's state
       * was updated. Otherwise the transition did not complete.
       *
       * In a transition, a router first determines which routes are involved by beginning
       * with the current route, up the route tree to the first parent route that is shared
       * with the destination route, and back down the tree to the destination route. The
       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
       * all route handlers we're transitioning to.
       *
       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
       * transition. To resolve asynchronously, they may use the callback argument. If no
       * hooks wait, the transition is fully synchronous.
       */
      dispatch: function dispatch(path, action) {
        this.cancelPendingTransition();

        var prevPath = state.path;
        var isRefreshing = action == null;

        if (prevPath === path && !isRefreshing) {
          return;
        } // Nothing to do!

        // Record the scroll position as early as possible to
        // get it before browsers try update it automatically.
        if (prevPath && action === LocationActions.PUSH) this.recordScrollPosition(prevPath);

        var match = this.match(path);

        warning(match != null, "No route matches path \"%s\". Make sure you have <Route path=\"%s\"> somewhere in your routes", path, path);

        if (match == null) match = {};

        var prevRoutes = state.routes || [];
        var prevParams = state.params || {};
        var prevQuery = state.query || {};

        var nextRoutes = match.routes || [];
        var nextParams = match.params || {};
        var nextQuery = match.query || {};

        var fromRoutes, toRoutes;
        if (prevRoutes.length) {
          fromRoutes = prevRoutes.filter(function (route) {
            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
          });

          toRoutes = nextRoutes.filter(function (route) {
            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
          });
        } else {
          fromRoutes = [];
          toRoutes = nextRoutes;
        }

        var transition = new Transition(path, this.replaceWith.bind(this, path));
        pendingTransition = transition;

        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

        Transition.from(transition, fromRoutes, fromComponents, function (error) {
          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
            dispatchHandler.call(Router, error, transition, {
              path: path,
              action: action,
              pathname: match.pathname,
              routes: nextRoutes,
              params: nextParams,
              query: nextQuery
            });
          });
        });
      },

      /**
       * Starts this router and calls callback(router, state) when the route changes.
       *
       * If the router's location is static (i.e. a URL path in a server environment)
       * the callback is called only once. Otherwise, the location should be one of the
       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
       */
      run: function run(callback) {
        invariant(!this.isRunning, "Router is already running");

        dispatchHandler = function (error, transition, newState) {
          if (error) Router.handleError(error);

          if (pendingTransition !== transition) return;

          pendingTransition = null;

          if (transition.abortReason) {
            Router.handleAbort(transition.abortReason);
          } else {
            callback.call(this, this, nextState = newState);
          }
        };

        if (!(location instanceof StaticLocation)) {
          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

          this.isRunning = true;
        }

        // Bootstrap using the current path.
        this.refresh();
      },

      refresh: function refresh() {
        Router.dispatch(location.getCurrentPath(), null);
      },

      stop: function stop() {
        this.cancelPendingTransition();

        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

        this.isRunning = false;
      },

      getScrollBehavior: function getScrollBehavior() {
        return scrollBehavior;
      }

    },

    mixins: [NavigationContext, StateContext, ScrollHistory],

    propTypes: {
      children: PropTypes.falsy
    },

    childContextTypes: {
      getRouteAtDepth: React.PropTypes.func.isRequired,
      setRouteComponentAtDepth: React.PropTypes.func.isRequired,
      routeHandlers: React.PropTypes.array.isRequired
    },

    getChildContext: function getChildContext() {
      return {
        getRouteAtDepth: this.getRouteAtDepth,
        setRouteComponentAtDepth: this.setRouteComponentAtDepth,
        routeHandlers: [this]
      };
    },

    getInitialState: function getInitialState() {
      return state = nextState;
    },

    componentWillReceiveProps: function componentWillReceiveProps() {
      this.setState(state = nextState);
    },

    componentWillUnmount: function componentWillUnmount() {
      Router.stop();
    },

    getLocation: function getLocation() {
      return location;
    },

    getRouteAtDepth: function getRouteAtDepth(depth) {
      var routes = this.state.routes;
      return routes && routes[depth];
    },

    setRouteComponentAtDepth: function setRouteComponentAtDepth(depth, component) {
      mountedComponents[depth] = component;
    },

    render: function render() {
      var route = this.getRouteAtDepth(0);
      return route ? React.createElement(route.handler, this.props) : null;
    }

  });

  Router.clearAllRoutes();

  if (options.routes) Router.addRoutes(options.routes);

  return Router;
}

module.exports = createRouter;
}).call(this,require('_process'))
},{"./Cancellation":94,"./History":96,"./Match":97,"./NavigationContext":99,"./PathUtils":100,"./PropTypes":101,"./Redirect":102,"./Route":103,"./ScrollHistory":105,"./StateContext":107,"./Transition":108,"./actions/LocationActions":109,"./behaviors/ImitateBrowserBehavior":110,"./createRoutesFromReactChildren":119,"./isReactChildren":122,"./locations/HashLocation":123,"./locations/HistoryLocation":124,"./locations/RefreshLocation":125,"./locations/StaticLocation":126,"./supportsHistory":128,"_process":5,"react":280,"react/lib/ExecutionEnvironment":154,"react/lib/invariant":260,"react/lib/warning":279}],119:[function(require,module,exports){
"use strict";

/* jshint -W084 */

var React = require("react");
var assign = require("react/lib/Object.assign");
var warning = require("react/lib/warning");
var DefaultRouteType = require("./components/DefaultRoute").type;
var NotFoundRouteType = require("./components/NotFoundRoute").type;
var RedirectType = require("./components/Redirect").type;
var Route = require("./Route");

function checkPropTypes(componentName, propTypes, props) {
  componentName = componentName || "UnknownComponent";

  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error = propTypes[propName](props, propName, componentName);

      if (error instanceof Error) warning(false, error.message);
    }
  }
}

function createRouteOptions(props) {
  var options = assign({}, props);
  var handler = options.handler;

  if (handler) {
    options.onEnter = handler.willTransitionTo;
    options.onLeave = handler.willTransitionFrom;
  }

  return options;
}

function createRouteFromReactElement(element) {
  if (!React.isValidElement(element)) {
    return;
  }var type = element.type;
  var props = element.props;

  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

  if (type === DefaultRouteType) {
    return Route.createDefaultRoute(createRouteOptions(props));
  }if (type === NotFoundRouteType) {
    return Route.createNotFoundRoute(createRouteOptions(props));
  }if (type === RedirectType) {
    return Route.createRedirect(createRouteOptions(props));
  }return Route.createRoute(createRouteOptions(props), function () {
    if (props.children) createRoutesFromReactChildren(props.children);
  });
}

/**
 * Creates and returns an array of routes created from the given
 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
 * <NotFoundRoute>, or <Redirect>, e.g.:
 *
 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
 *
 *   var routes = createRoutesFromReactChildren(
 *     <Route path="/" handler={App}>
 *       <Route name="user" path="/user/:userId" handler={User}>
 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
 *         <Redirect from="todos/:taskId" to="task"/>
 *       </Route>
 *     </Route>
 *   );
 */
function createRoutesFromReactChildren(children) {
  var routes = [];

  React.Children.forEach(children, function (child) {
    if (child = createRouteFromReactElement(child)) routes.push(child);
  });

  return routes;
}

module.exports = createRoutesFromReactChildren;
},{"./Route":103,"./components/DefaultRoute":112,"./components/NotFoundRoute":114,"./components/Redirect":115,"react":280,"react/lib/Object.assign":159,"react/lib/warning":279}],120:[function(require,module,exports){
"use strict";

var invariant = require("react/lib/invariant");
var canUseDOM = require("react/lib/ExecutionEnvironment").canUseDOM;

/**
 * Returns the current scroll position of the window as { x, y }.
 */
function getWindowScrollPosition() {
  invariant(canUseDOM, "Cannot get current scroll position without a DOM");

  return {
    x: window.pageXOffset || document.documentElement.scrollLeft,
    y: window.pageYOffset || document.documentElement.scrollTop
  };
}

module.exports = getWindowScrollPosition;
},{"react/lib/ExecutionEnvironment":154,"react/lib/invariant":260}],121:[function(require,module,exports){
"use strict";

exports.DefaultRoute = require("./components/DefaultRoute");
exports.Link = require("./components/Link");
exports.NotFoundRoute = require("./components/NotFoundRoute");
exports.Redirect = require("./components/Redirect");
exports.Route = require("./components/Route");
exports.RouteHandler = require("./components/RouteHandler");

exports.HashLocation = require("./locations/HashLocation");
exports.HistoryLocation = require("./locations/HistoryLocation");
exports.RefreshLocation = require("./locations/RefreshLocation");
exports.StaticLocation = require("./locations/StaticLocation");

exports.ImitateBrowserBehavior = require("./behaviors/ImitateBrowserBehavior");
exports.ScrollToTopBehavior = require("./behaviors/ScrollToTopBehavior");

exports.History = require("./History");
exports.Navigation = require("./Navigation");
exports.RouteHandlerMixin = require("./RouteHandlerMixin");
exports.State = require("./State");

exports.createRoute = require("./Route").createRoute;
exports.createDefaultRoute = require("./Route").createDefaultRoute;
exports.createNotFoundRoute = require("./Route").createNotFoundRoute;
exports.createRedirect = require("./Route").createRedirect;
exports.createRoutesFromReactChildren = require("./createRoutesFromReactChildren");
exports.create = require("./createRouter");
exports.run = require("./runRouter");
},{"./History":96,"./Navigation":98,"./Route":103,"./RouteHandlerMixin":104,"./State":106,"./behaviors/ImitateBrowserBehavior":110,"./behaviors/ScrollToTopBehavior":111,"./components/DefaultRoute":112,"./components/Link":113,"./components/NotFoundRoute":114,"./components/Redirect":115,"./components/Route":116,"./components/RouteHandler":117,"./createRouter":118,"./createRoutesFromReactChildren":119,"./locations/HashLocation":123,"./locations/HistoryLocation":124,"./locations/RefreshLocation":125,"./locations/StaticLocation":126,"./runRouter":127}],122:[function(require,module,exports){
"use strict";

var React = require("react");

function isValidChild(object) {
  return object == null || React.isValidElement(object);
}

function isReactChildren(object) {
  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
}

module.exports = isReactChildren;
},{"react":280}],123:[function(require,module,exports){
"use strict";

var LocationActions = require("../actions/LocationActions");
var History = require("../History");

/**
 * Returns the current URL path from the `hash` portion of the URL, including
 * query string.
 */
function getHashPath() {
  return decodeURI(
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  window.location.href.split("#")[1] || "");
}

var _actionType;

function ensureSlash() {
  var path = getHashPath();

  if (path.charAt(0) === "/") {
    return true;
  }HashLocation.replace("/" + path);

  return false;
}

var _changeListeners = [];

function notifyChange(type) {
  if (type === LocationActions.PUSH) History.length += 1;

  var change = {
    path: getHashPath(),
    type: type
  };

  _changeListeners.forEach(function (listener) {
    listener(change);
  });
}

var _isListening = false;

function onHashChange() {
  if (ensureSlash()) {
    // If we don't have an _actionType then all we know is the hash
    // changed. It was probably caused by the user clicking the Back
    // button, but may have also been the Forward button or manual
    // manipulation. So just guess 'pop'.
    notifyChange(_actionType || LocationActions.POP);
    _actionType = null;
  }
}

/**
 * A Location that uses `window.location.hash`.
 */
var HashLocation = {

  addChangeListener: function addChangeListener(listener) {
    _changeListeners.push(listener);

    // Do this BEFORE listening for hashchange.
    ensureSlash();

    if (!_isListening) {
      if (window.addEventListener) {
        window.addEventListener("hashchange", onHashChange, false);
      } else {
        window.attachEvent("onhashchange", onHashChange);
      }

      _isListening = true;
    }
  },

  removeChangeListener: function removeChangeListener(listener) {
    _changeListeners = _changeListeners.filter(function (l) {
      return l !== listener;
    });

    if (_changeListeners.length === 0) {
      if (window.removeEventListener) {
        window.removeEventListener("hashchange", onHashChange, false);
      } else {
        window.removeEvent("onhashchange", onHashChange);
      }

      _isListening = false;
    }
  },

  push: function push(path) {
    _actionType = LocationActions.PUSH;
    window.location.hash = path;
  },

  replace: function replace(path) {
    _actionType = LocationActions.REPLACE;
    window.location.replace(window.location.pathname + window.location.search + "#" + path);
  },

  pop: function pop() {
    _actionType = LocationActions.POP;
    History.back();
  },

  getCurrentPath: getHashPath,

  toString: function toString() {
    return "<HashLocation>";
  }

};

module.exports = HashLocation;
},{"../History":96,"../actions/LocationActions":109}],124:[function(require,module,exports){
"use strict";

var LocationActions = require("../actions/LocationActions");
var History = require("../History");

/**
 * Returns the current URL path from `window.location`, including query string.
 */
function getWindowPath() {
  return decodeURI(window.location.pathname + window.location.search);
}

var _changeListeners = [];

function notifyChange(type) {
  var change = {
    path: getWindowPath(),
    type: type
  };

  _changeListeners.forEach(function (listener) {
    listener(change);
  });
}

var _isListening = false;

function onPopState(event) {
  if (event.state === undefined) {
    return;
  } // Ignore extraneous popstate events in WebKit.

  notifyChange(LocationActions.POP);
}

/**
 * A Location that uses HTML5 history.
 */
var HistoryLocation = {

  addChangeListener: function addChangeListener(listener) {
    _changeListeners.push(listener);

    if (!_isListening) {
      if (window.addEventListener) {
        window.addEventListener("popstate", onPopState, false);
      } else {
        window.attachEvent("onpopstate", onPopState);
      }

      _isListening = true;
    }
  },

  removeChangeListener: function removeChangeListener(listener) {
    _changeListeners = _changeListeners.filter(function (l) {
      return l !== listener;
    });

    if (_changeListeners.length === 0) {
      if (window.addEventListener) {
        window.removeEventListener("popstate", onPopState, false);
      } else {
        window.removeEvent("onpopstate", onPopState);
      }

      _isListening = false;
    }
  },

  push: function push(path) {
    window.history.pushState({ path: path }, "", path);
    History.length += 1;
    notifyChange(LocationActions.PUSH);
  },

  replace: function replace(path) {
    window.history.replaceState({ path: path }, "", path);
    notifyChange(LocationActions.REPLACE);
  },

  pop: History.back,

  getCurrentPath: getWindowPath,

  toString: function toString() {
    return "<HistoryLocation>";
  }

};

module.exports = HistoryLocation;
},{"../History":96,"../actions/LocationActions":109}],125:[function(require,module,exports){
"use strict";

var HistoryLocation = require("./HistoryLocation");
var History = require("../History");

/**
 * A Location that uses full page refreshes. This is used as
 * the fallback for HistoryLocation in browsers that do not
 * support the HTML5 history API.
 */
var RefreshLocation = {

  push: function push(path) {
    window.location = path;
  },

  replace: function replace(path) {
    window.location.replace(path);
  },

  pop: History.back,

  getCurrentPath: HistoryLocation.getCurrentPath,

  toString: function toString() {
    return "<RefreshLocation>";
  }

};

module.exports = RefreshLocation;
},{"../History":96,"./HistoryLocation":124}],126:[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var invariant = require("react/lib/invariant");

function throwCannotModify() {
  invariant(false, "You cannot modify a static location");
}

/**
 * A location that only ever contains a single path. Useful in
 * stateless environments like servers where there is no path history,
 * only the path that was used in the request.
 */

var StaticLocation = (function () {
  function StaticLocation(path) {
    _classCallCheck(this, StaticLocation);

    this.path = path;
  }

  _prototypeProperties(StaticLocation, null, {
    getCurrentPath: {
      value: function getCurrentPath() {
        return this.path;
      },
      writable: true,
      configurable: true
    },
    toString: {
      value: function toString() {
        return "<StaticLocation path=\"" + this.path + "\">";
      },
      writable: true,
      configurable: true
    }
  });

  return StaticLocation;
})();

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
StaticLocation.prototype.push = throwCannotModify;
StaticLocation.prototype.replace = throwCannotModify;
StaticLocation.prototype.pop = throwCannotModify;

module.exports = StaticLocation;
},{"react/lib/invariant":260}],127:[function(require,module,exports){
"use strict";

var createRouter = require("./createRouter");

/**
 * A high-level convenience method that creates, configures, and
 * runs a router in one shot. The method signature is:
 *
 *   Router.run(routes[, location ], callback);
 *
 * Using `window.location.hash` to manage the URL, you could do:
 *
 *   Router.run(routes, function (Handler) {
 *     React.render(<Handler/>, document.body);
 *   });
 * 
 * Using HTML5 history and a custom "cursor" prop:
 * 
 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
 *     React.render(<Handler cursor={cursor}/>, document.body);
 *   });
 *
 * Returns the newly created router.
 *
 * Note: If you need to specify further options for your router such
 * as error/abort handling or custom scroll behavior, use Router.create
 * instead.
 *
 *   var router = Router.create(options);
 *   router.run(function (Handler) {
 *     // ...
 *   });
 */
function runRouter(routes, location, callback) {
  if (typeof location === "function") {
    callback = location;
    location = null;
  }

  var router = createRouter({
    routes: routes,
    location: location
  });

  router.run(callback);

  return router;
}

module.exports = runRouter;
},{"./createRouter":118}],128:[function(require,module,exports){
"use strict";

function supportsHistory() {
  /*! taken from modernizr
   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
   */
  var ua = navigator.userAgent;
  if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1) {
    return false;
  }
  return window.history && "pushState" in window.history;
}

module.exports = supportsHistory;
},{}],129:[function(require,module,exports){
module.exports = require('./lib/');

},{"./lib/":130}],130:[function(require,module,exports){
// Load modules

var Stringify = require('./stringify');
var Parse = require('./parse');


// Declare internals

var internals = {};


module.exports = {
    stringify: Stringify,
    parse: Parse
};

},{"./parse":131,"./stringify":132}],131:[function(require,module,exports){
// Load modules

var Utils = require('./utils');


// Declare internals

var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000
};


internals.parseValues = function (str, options) {

    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0, il = parts.length; i < il; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        if (pos === -1) {
            obj[Utils.decode(part)] = '';
        }
        else {
            var key = Utils.decode(part.slice(0, pos));
            var val = Utils.decode(part.slice(pos + 1));

            if (!obj.hasOwnProperty(key)) {
                obj[key] = val;
            }
            else {
                obj[key] = [].concat(obj[key]).concat(val);
            }
        }
    }

    return obj;
};


internals.parseObject = function (chain, val, options) {

    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj = {};
    if (root === '[]') {
        obj = [];
        obj = obj.concat(internals.parseObject(chain, val, options));
    }
    else {
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        var indexString = '' + index;
        if (!isNaN(index) &&
            root !== cleanRoot &&
            indexString === cleanRoot &&
            index >= 0 &&
            index <= options.arrayLimit) {

            obj = [];
            obj[index] = internals.parseObject(chain, val, options);
        }
        else {
            obj[cleanRoot] = internals.parseObject(chain, val, options);
        }
    }

    return obj;
};


internals.parseKeys = function (key, val, options) {

    if (!key) {
        return;
    }

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Don't allow them to overwrite object prototype properties

    if (Object.prototype.hasOwnProperty(segment[1])) {
        return;
    }

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {

        ++i;
        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
            keys.push(segment[1]);
        }
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return internals.parseObject(keys, val, options);
};


module.exports = function (str, options) {

    if (str === '' ||
        str === null ||
        typeof str === 'undefined') {

        return {};
    }

    options = options || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var newObj = internals.parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj);
    }

    return Utils.compact(obj);
};

},{"./utils":133}],132:[function(require,module,exports){
// Load modules

var Utils = require('./utils');


// Declare internals

var internals = {
    delimiter: '&',
    indices: true
};


internals.stringify = function (obj, prefix, options) {

    if (Utils.isBuffer(obj)) {
        obj = obj.toString();
    }
    else if (obj instanceof Date) {
        obj = obj.toISOString();
    }
    else if (obj === null) {
        obj = '';
    }

    if (typeof obj === 'string' ||
        typeof obj === 'number' ||
        typeof obj === 'boolean') {

        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        if (!options.indices &&
            Array.isArray(obj)) {

            values = values.concat(internals.stringify(obj[key], prefix, options));
        }
        else {
            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', options));
        }
    }

    return values;
};


module.exports = function (obj, options) {

    options = options || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
    options.indices = typeof options.indices === 'boolean' ? options.indices : internals.indices;

    var keys = [];

    if (typeof obj !== 'object' ||
        obj === null) {

        return '';
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        keys = keys.concat(internals.stringify(obj[key], key, options));
    }

    return keys.join(delimiter);
};

},{"./utils":133}],133:[function(require,module,exports){
// Load modules


// Declare internals

var internals = {};


exports.arrayToObject = function (source) {

    var obj = {};
    for (var i = 0, il = source.length; i < il; ++i) {
        if (typeof source[i] !== 'undefined') {

            obj[i] = source[i];
        }
    }

    return obj;
};


exports.merge = function (target, source) {

    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        }
        else {
            target[source] = true;
        }

        return target;
    }

    if (typeof target !== 'object') {
        target = [target].concat(source);
        return target;
    }

    if (Array.isArray(target) &&
        !Array.isArray(source)) {

        target = exports.arrayToObject(target);
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];

        if (!target[key]) {
            target[key] = value;
        }
        else {
            target[key] = exports.merge(target[key], value);
        }
    }

    return target;
};


exports.decode = function (str) {

    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};


exports.compact = function (obj, refs) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    refs = refs || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    for (i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        obj[key] = exports.compact(obj[key], refs);
    }

    return obj;
};


exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};


exports.isBuffer = function (obj) {

    if (obj === null ||
        typeof obj === 'undefined') {

        return false;
    }

    return !!(obj.constructor &&
        obj.constructor.isBuffer &&
        obj.constructor.isBuffer(obj));
};

},{}],134:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":245}],135:[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":148,"./EventPropagators":153,"./ExecutionEnvironment":154,"./SyntheticInputEvent":222,"./keyOf":267}],136:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],137:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))
},{"./CSSProperty":136,"./ExecutionEnvironment":154,"./camelizeStyleName":233,"./dangerousStyleValue":239,"./hyphenateStyleName":258,"./memoizeStringOnly":269,"./warning":279,"_process":5}],138:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))
},{"./Object.assign":159,"./PooledClass":160,"./invariant":260,"_process":5}],139:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":148,"./EventPluginHub":150,"./EventPropagators":153,"./ExecutionEnvironment":154,"./ReactUpdates":212,"./SyntheticEvent":220,"./isEventSupported":261,"./isTextInputElement":263,"./keyOf":267}],140:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],141:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");

var getTextContentAccessor = require("./getTextContentAccessor");
var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":148,"./EventPropagators":153,"./ExecutionEnvironment":154,"./ReactInputSelection":192,"./SyntheticCompositionEvent":218,"./getTextContentAccessor":255,"./keyOf":267}],142:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = require("./getTextContentAccessor");
var invariant = require("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))
},{"./Danger":145,"./ReactMultiChildUpdateTypes":198,"./getTextContentAccessor":255,"./invariant":260,"_process":5}],143:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],144:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))
},{"./DOMProperty":143,"./escapeTextForBrowser":243,"./memoizeStringOnly":269,"./warning":279,"_process":5}],145:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":154,"./createNodesFromMarkup":237,"./emptyFunction":241,"./getMarkupWrap":252,"./invariant":260,"_process":5}],146:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":267}],147:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":148,"./EventPropagators":153,"./ReactMount":196,"./SyntheticMouseEvent":224,"./keyOf":267}],148:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":266}],149:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))
},{"./emptyFunction":241,"_process":5}],150:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))
},{"./EventPluginRegistry":151,"./EventPluginUtils":152,"./accumulateInto":230,"./forEachAccumulated":246,"./invariant":260,"_process":5}],151:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],152:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))
},{"./EventConstants":148,"./invariant":260,"_process":5}],153:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))
},{"./EventConstants":148,"./EventPluginHub":150,"./accumulateInto":230,"./forEachAccumulated":246,"_process":5}],154:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],155:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":143,"./ExecutionEnvironment":154}],156:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))
},{"./ReactPropTypes":205,"./invariant":260,"_process":5}],157:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))
},{"./ReactBrowserEventEmitter":163,"./accumulateInto":230,"./forEachAccumulated":246,"./invariant":260,"_process":5}],158:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":148,"./emptyFunction":241}],159:[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],160:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactServerRendering = require("./ReactServerRendering");
var ReactTextComponent = require("./ReactTextComponent");

var assign = require("./Object.assign");
var deprecated = require("./deprecated");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

}).call(this,require('_process'))
},{"./DOMPropertyOperations":144,"./EventPluginUtils":152,"./ExecutionEnvironment":154,"./Object.assign":159,"./ReactChildren":164,"./ReactComponent":165,"./ReactCompositeComponent":167,"./ReactContext":168,"./ReactCurrentOwner":169,"./ReactDOM":170,"./ReactDOMComponent":172,"./ReactDefaultInjection":182,"./ReactElement":185,"./ReactElementValidator":186,"./ReactInstanceHandles":193,"./ReactLegacyElement":194,"./ReactMount":196,"./ReactMultiChild":197,"./ReactPerf":201,"./ReactPropTypes":205,"./ReactServerRendering":209,"./ReactTextComponent":211,"./deprecated":240,"./onlyChild":271,"_process":5}],162:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

}).call(this,require('_process'))
},{"./ReactEmptyComponent":187,"./ReactMount":196,"./invariant":260,"_process":5}],163:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":148,"./EventPluginHub":150,"./EventPluginRegistry":151,"./Object.assign":159,"./ReactEventEmitterMixin":189,"./ViewportMetrics":229,"./isEventSupported":261}],164:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = require("./PooledClass");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))
},{"./PooledClass":160,"./traverseAllChildren":278,"./warning":279,"_process":5}],165:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactOwner = require("./ReactOwner");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== process.env.NODE_ENV ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

}).call(this,require('_process'))
},{"./Object.assign":159,"./ReactElement":185,"./ReactOwner":200,"./ReactUpdates":212,"./invariant":260,"./keyMirror":266,"_process":5}],166:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== process.env.NODE_ENV ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== process.env.NODE_ENV ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== process.env.NODE_ENV) {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== process.env.NODE_ENV ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

}).call(this,require('_process'))
},{"./ReactDOMIDOperations":174,"./ReactMarkupChecksum":195,"./ReactMount":196,"./ReactPerf":201,"./ReactReconcileTransaction":207,"./getReactRootElementInContainer":254,"./invariant":260,"./setInnerHTML":274,"_process":5}],167:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactOwner = require("./ReactOwner");
var ReactPerf = require("./ReactPerf");
var ReactPropTransferer = require("./ReactPropTransferer");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var monitorCodeUse = require("./monitorCodeUse");
var mapObject = require("./mapObject");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== process.env.NODE_ENV ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== process.env.NODE_ENV){
      ("production" !== process.env.NODE_ENV ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== process.env.NODE_ENV ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== process.env.NODE_ENV) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== process.env.NODE_ENV) {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))
},{"./Object.assign":159,"./ReactComponent":165,"./ReactContext":168,"./ReactCurrentOwner":169,"./ReactElement":185,"./ReactElementValidator":186,"./ReactEmptyComponent":187,"./ReactErrorUtils":188,"./ReactLegacyElement":194,"./ReactOwner":200,"./ReactPerf":201,"./ReactPropTransferer":202,"./ReactPropTypeLocationNames":203,"./ReactPropTypeLocations":204,"./ReactUpdates":212,"./instantiateReactComponent":259,"./invariant":260,"./keyMirror":266,"./keyOf":267,"./mapObject":268,"./monitorCodeUse":270,"./shouldUpdateReactComponent":276,"./warning":279,"_process":5}],168:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = require("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":159}],169:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],170:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactLegacyElement = require("./ReactLegacyElement");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))
},{"./ReactElement":185,"./ReactElementValidator":186,"./ReactLegacyElement":194,"./mapObject":268,"_process":5}],171:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

var keyMirror = require("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":134,"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185,"./keyMirror":266}],172:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponent = require("./ReactComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextForBrowser = require("./escapeTextForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var monitorCodeUse = require("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== process.env.NODE_ENV ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== process.env.NODE_ENV) {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":137,"./DOMProperty":143,"./DOMPropertyOperations":144,"./Object.assign":159,"./ReactBrowserComponentMixin":162,"./ReactBrowserEventEmitter":163,"./ReactComponent":165,"./ReactMount":196,"./ReactMultiChild":197,"./ReactPerf":201,"./escapeTextForBrowser":243,"./invariant":260,"./isEventSupported":261,"./keyOf":267,"./monitorCodeUse":270,"_process":5}],173:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":148,"./LocalEventTrapMixin":157,"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185}],174:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":137,"./DOMChildrenOperations":142,"./DOMPropertyOperations":144,"./ReactMount":196,"./ReactPerf":201,"./invariant":260,"./setInnerHTML":274,"_process":5}],175:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":148,"./LocalEventTrapMixin":157,"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185}],176:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))
},{"./AutoFocusMixin":134,"./DOMPropertyOperations":144,"./LinkedValueUtils":156,"./Object.assign":159,"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185,"./ReactMount":196,"./ReactUpdates":212,"./invariant":260,"_process":5}],177:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

var warning = require("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))
},{"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185,"./warning":279,"_process":5}],178:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":134,"./LinkedValueUtils":156,"./Object.assign":159,"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185,"./ReactUpdates":212}],179:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":154,"./getNodeForCharacterOffset":253,"./getTextContentAccessor":255}],180:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))
},{"./AutoFocusMixin":134,"./DOMPropertyOperations":144,"./LinkedValueUtils":156,"./Object.assign":159,"./ReactBrowserComponentMixin":162,"./ReactCompositeComponent":167,"./ReactDOM":170,"./ReactElement":185,"./ReactUpdates":212,"./invariant":260,"./warning":279,"_process":5}],181:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":159,"./ReactUpdates":212,"./Transaction":228,"./emptyFunction":241}],182:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var CompositionEventPlugin = require("./CompositionEventPlugin");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":135,"./ChangeEventPlugin":139,"./ClientReactRootIndex":140,"./CompositionEventPlugin":141,"./DefaultEventPluginOrder":146,"./EnterLeaveEventPlugin":147,"./ExecutionEnvironment":154,"./HTMLDOMPropertyConfig":155,"./MobileSafariClickEventPlugin":158,"./ReactBrowserComponentMixin":162,"./ReactComponentBrowserEnvironment":166,"./ReactDOMButton":171,"./ReactDOMComponent":172,"./ReactDOMForm":173,"./ReactDOMImg":175,"./ReactDOMInput":176,"./ReactDOMOption":177,"./ReactDOMSelect":178,"./ReactDOMTextarea":180,"./ReactDefaultBatchingStrategy":181,"./ReactDefaultPerf":183,"./ReactEventListener":190,"./ReactInjection":191,"./ReactInstanceHandles":193,"./ReactMount":196,"./SVGDOMPropertyConfig":213,"./SelectEventPlugin":214,"./ServerReactRootIndex":215,"./SimpleEventPlugin":216,"./createFullPageComponent":236,"_process":5}],183:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":143,"./ReactDefaultPerfAnalysis":184,"./ReactMount":196,"./ReactPerf":201,"./performanceNow":273}],184:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":159}],185:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))
},{"./ReactContext":168,"./ReactCurrentOwner":169,"./warning":279,"_process":5}],186:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var monitorCodeUse = require("./monitorCodeUse");
var warning = require("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":169,"./ReactElement":185,"./ReactPropTypeLocations":204,"./monitorCodeUse":270,"./warning":279,"_process":5}],187:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))
},{"./ReactElement":185,"./invariant":260,"_process":5}],188:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],189:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":150}],190:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":149,"./ExecutionEnvironment":154,"./Object.assign":159,"./PooledClass":160,"./ReactInstanceHandles":193,"./ReactMount":196,"./ReactUpdates":212,"./getEventTarget":251,"./getUnboundedScrollPosition":256}],191:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":143,"./EventPluginHub":150,"./ReactBrowserEventEmitter":163,"./ReactComponent":165,"./ReactCompositeComponent":167,"./ReactEmptyComponent":187,"./ReactNativeComponent":199,"./ReactPerf":201,"./ReactRootIndex":208,"./ReactUpdates":212}],192:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":179,"./containsNode":234,"./focusNode":245,"./getActiveElement":247}],193:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))
},{"./ReactRootIndex":208,"./invariant":260,"_process":5}],194:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = require("./ReactCurrentOwner");

var invariant = require("./invariant");
var monitorCodeUse = require("./monitorCodeUse");
var warning = require("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== process.env.NODE_ENV ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== process.env.NODE_ENV) {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== process.env.NODE_ENV) {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== process.env.NODE_ENV) {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== process.env.NODE_ENV) {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== process.env.NODE_ENV) {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":169,"./invariant":260,"./monitorCodeUse":270,"./warning":279,"_process":5}],195:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":231}],196:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactPerf = require("./ReactPerf");

var containsNode = require("./containsNode");
var deprecated = require("./deprecated");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== process.env.NODE_ENV ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== process.env.NODE_ENV) {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

}).call(this,require('_process'))
},{"./DOMProperty":143,"./ReactBrowserEventEmitter":163,"./ReactCurrentOwner":169,"./ReactElement":185,"./ReactInstanceHandles":193,"./ReactLegacyElement":194,"./ReactPerf":201,"./containsNode":234,"./deprecated":240,"./getReactRootElementInContainer":254,"./instantiateReactComponent":259,"./invariant":260,"./shouldUpdateReactComponent":276,"./warning":279,"_process":5}],197:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":165,"./ReactMultiChildUpdateTypes":198,"./flattenChildren":244,"./instantiateReactComponent":259,"./shouldUpdateReactComponent":276}],198:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":266}],199:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = require("./Object.assign");
var invariant = require("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== process.env.NODE_ENV ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))
},{"./Object.assign":159,"./invariant":260,"_process":5}],200:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = require("./emptyObject");
var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== process.env.NODE_ENV ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))
},{"./emptyObject":242,"./invariant":260,"_process":5}],201:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))
},{"_process":5}],202:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var invariant = require("./invariant");
var joinClasses = require("./joinClasses");
var warning = require("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== process.env.NODE_ENV ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== process.env.NODE_ENV) {
        if (!didWarn) {
          didWarn = true;
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

}).call(this,require('_process'))
},{"./Object.assign":159,"./emptyFunction":241,"./invariant":260,"./joinClasses":265,"./warning":279,"_process":5}],203:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))
},{"_process":5}],204:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":266}],205:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var deprecated = require("./deprecated");
var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":185,"./ReactPropTypeLocationNames":203,"./deprecated":240,"./emptyFunction":241}],206:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":159,"./PooledClass":160,"./ReactBrowserEventEmitter":163}],207:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":138,"./Object.assign":159,"./PooledClass":160,"./ReactBrowserEventEmitter":163,"./ReactInputSelection":192,"./ReactPutListenerQueue":206,"./Transaction":228}],208:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],209:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))
},{"./ReactElement":185,"./ReactInstanceHandles":193,"./ReactMarkupChecksum":195,"./ReactServerRenderingTransaction":210,"./instantiateReactComponent":259,"./invariant":260,"_process":5}],210:[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":138,"./Object.assign":159,"./PooledClass":160,"./ReactPutListenerQueue":206,"./Transaction":228,"./emptyFunction":241}],211:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");
var ReactElement = require("./ReactElement");

var assign = require("./Object.assign");
var escapeTextForBrowser = require("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":144,"./Object.assign":159,"./ReactComponent":165,"./ReactElement":185,"./escapeTextForBrowser":243}],212:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))
},{"./CallbackQueue":138,"./Object.assign":159,"./PooledClass":160,"./ReactCurrentOwner":169,"./ReactPerf":201,"./Transaction":228,"./invariant":260,"./warning":279,"_process":5}],213:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":143}],214:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":148,"./EventPropagators":153,"./ReactInputSelection":192,"./SyntheticEvent":220,"./getActiveElement":247,"./isTextInputElement":263,"./keyOf":267,"./shallowEqual":275}],215:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],216:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))
},{"./EventConstants":148,"./EventPluginUtils":152,"./EventPropagators":153,"./SyntheticClipboardEvent":217,"./SyntheticDragEvent":219,"./SyntheticEvent":220,"./SyntheticFocusEvent":221,"./SyntheticKeyboardEvent":223,"./SyntheticMouseEvent":224,"./SyntheticTouchEvent":225,"./SyntheticUIEvent":226,"./SyntheticWheelEvent":227,"./getEventCharCode":248,"./invariant":260,"./keyOf":267,"./warning":279,"_process":5}],217:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":220}],218:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":220}],219:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":224}],220:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":159,"./PooledClass":160,"./emptyFunction":241,"./getEventTarget":251}],221:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":226}],222:[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":220}],223:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":226,"./getEventCharCode":248,"./getEventKey":249,"./getEventModifierState":250}],224:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":226,"./ViewportMetrics":229,"./getEventModifierState":250}],225:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":226,"./getEventModifierState":250}],226:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":220,"./getEventTarget":251}],227:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":224}],228:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],229:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":256}],230:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],231:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],232:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],233:[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":232}],234:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":264}],235:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":277}],236:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))
},{"./ReactCompositeComponent":167,"./ReactElement":185,"./invariant":260,"_process":5}],237:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFrom = require("./createArrayFrom");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":154,"./createArrayFrom":235,"./getMarkupWrap":252,"./invariant":260,"_process":5}],238:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule cx
 */

/**
 * This function is used to mark string literals representing CSS class names
 * so that they can be transformed statically. This allows for modularization
 * and minification of CSS class names.
 *
 * In static_upstream, this function is actually implemented, but it should
 * eventually be replaced with something more descriptive, and the transform
 * that is used in the main stack should be ported for use elsewhere.
 *
 * @param string|object className to modularize, or an object of key/values.
 *                      In the object case, the values are conditions that
 *                      determine if the className keys should be included.
 * @param [string ...]  Variable list of classNames in the string case.
 * @return string       Renderable space-separated CSS className.
 */
function cx(classNames) {
  if (typeof classNames == 'object') {
    return Object.keys(classNames).filter(function(className) {
      return classNames[className];
    }).join(' ');
  } else {
    return Array.prototype.join.call(arguments, ' ');
  }
}

module.exports = cx;

},{}],239:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":136}],240:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = require("./Object.assign");
var warning = require("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== process.env.NODE_ENV) {
    var newFn = function() {
      ("production" !== process.env.NODE_ENV ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

}).call(this,require('_process'))
},{"./Object.assign":159,"./warning":279,"_process":5}],241:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],242:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))
},{"_process":5}],243:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],244:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = require("./ReactTextComponent");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))
},{"./ReactTextComponent":211,"./traverseAllChildren":278,"./warning":279,"_process":5}],245:[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],246:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],247:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],248:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],249:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":248}],250:[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],251:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],252:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":154,"./invariant":260,"_process":5}],253:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],254:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],255:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":154}],256:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],257:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],258:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":257}],259:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = require("./warning");

var ReactElement = require("./ReactElement");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))
},{"./ReactElement":185,"./ReactEmptyComponent":187,"./ReactLegacyElement":194,"./ReactNativeComponent":199,"./warning":279,"_process":5}],260:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":5}],261:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":154}],262:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],263:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],264:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":262}],265:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],266:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],267:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],268:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],269:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],270:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = require("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== process.env.NODE_ENV ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],271:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))
},{"./ReactElement":185,"./invariant":260,"_process":5}],272:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":154}],273:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":272}],274:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":154}],275:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],276:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],277:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))
},{"./invariant":260,"_process":5}],278:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var invariant = require("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== process.env.NODE_ENV ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))
},{"./ReactElement":185,"./ReactInstanceHandles":193,"./invariant":260,"_process":5}],279:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))
},{"./emptyFunction":241,"_process":5}],280:[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":161}],281:[function(require,module,exports){
var AppConstants = require('../constants/AppConstants.js');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');

var AppActions = {
  search: function(term) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SEARCH,
      q: term
    })
  },
  setCat1: function(cat1) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SET_SEARCH_CAT1,
      cat1: cat1
    });
  },
  setCat2: function(cat2) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SET_SEARCH_CAT2,
      cat2: cat2
    });
  },
  setSubCat: function(subCat) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SET_SEARCH_SUB_CAT,
      subCat: subCat
    });
  },
  toggleFilters: function() {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.TOGGLE_FILTERS
      });
  },
  setPrice: function(whichPrice, price) {
    if (whichPrice == 'min') {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.SET_MIN_PRICE,
        minPrice: price
      });
    } else {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.SET_MAX_PRICE,
        maxPrice: price
      });
    }
  },
  setOutputFormat: function(format){
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SET_OUTPUT_FORMAT,
      format: format
    });
  },
};

module.exports = AppActions;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher.js":322}],282:[function(require,module,exports){
var AppConstants = require('../constants/AppConstants.js');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');

var NPCActions = {
  search: function(term) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SEARCH_MOBS,
      q: term
    })
  },
  toggleFilters: function() {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.TOGGLE_MOB_FILTERS
      });
  },
  setFilters: function(filters) {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.SET_MOB_FILTERS,
        filters: filters
      });
  },
  setMap: function(map) {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.SET_MOB_MAP,
        map: map
      });
  },
  findByItem: function(itemId) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.MOBS_BY_ITEM,
      itemId: itemId
    });
  }
};

module.exports = NPCActions;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher.js":322}],283:[function(require,module,exports){
var AppConstants = require('../constants/AppConstants.js');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');

var NPCActions = {
  search: function(term) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.SEARCH_NPCS,
      q: term
    })
  },
  toggleFilters: function() {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.TOGGLE_VENDOR_FILTERS
      });
  },
  setMap: function(map) {
      AppDispatcher.handleViewAction({
        actionType: AppConstants.ActionTypes.SET_NPC_MAP,
        map: map
      });
  },
  findByItem: function(itemId) {
    AppDispatcher.handleViewAction({
      actionType: AppConstants.ActionTypes.NPCS_BY_ITEM,
      itemId: itemId
    });
  }
};

module.exports = NPCActions;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher.js":322}],284:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;

var NotFound = React.createClass({displayName: "NotFound",
  render: function(){
    return (
    React.createElement("div", null, 
      React.createElement("header", null, 
        React.createElement("h1", null, "File not Found")
      ), 
      React.createElement("article", {className: "context"}, 
        React.createElement("p", null, 
          "The page you are looking for could not be found."
        ), 
        React.createElement(Link, {to: "home"}, "Home")
      )
    )
    );
  }
});

module.exports = NotFound;


},{"react":280,"react-router":121}],285:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;

var About = React.createClass({displayName: "About",
  render: function(){
    return (
    React.createElement("div", null, 
      React.createElement("header", null, 
        React.createElement("h1", null, "modb")
      ), 
      React.createElement("article", {className: "context"}, 
        React.createElement("h2", null, "About modb"), 
        React.createElement("p", null, 
          "modb is an app that lets you quickly search data from ", React.createElement("a", {
          href: "http://mo.ee"}, "RPG MO"), ". The app is currently under" + ' ' +
          "development, but feel free to take it for a spin. Let me know" + ' ' +
          "what you think in the forums."
        ), 
        React.createElement("p", null, "-bobdylan")
      )
    )
    );
  }
});

module.exports = About;


},{"react":280,"react-router":121}],286:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var RouteHandler = Router.RouteHandler;
var Sitenav = require('./Sitenav.jsx');
var Navigation = require('react-router').Navigation;
var State = require('react-router').State;
var Actions = require('../actions/AppActions.js');
var Highscores = require('./Highscores.jsx');
var Util = require('../util.js');
window.U = Util;

var PAGE_SIZE = 20;
var _page = 'items';

var loadingSwitch = false; // lets us set the isLoading every other call to componentDidUpdate...

var App = React.createClass({displayName: "App",
  mixins: [Navigation, State],
  getInitialState: function() {
    // TODO: read initial query string from the browser
    return {
      selectedPage: this.getPath(),
      showNav: false,
      isLoading: true,
      q: '',
      searchFilters: {
        cat1: -1,
        cat2: -1
      },
      maxResultCount: PAGE_SIZE
    }
  },
/*  componentWillReceiveProps: function() {
    Util.showLoader();
  },
*/
  componentDidUpdate: function() {
    if (this.state.selectedPage !== this.getPath()) {
      this.setState({
        selectedPage: this.getPath(),
        showNav: false,
      })
    }
    if (this.state.isLoading) { 
      if (loadingSwitch) {
        this.setState({isLoading: false});
        loadingSwitch = false;
      } else loadingSwitch = true;
    }
  },
  componentDidMount: function() {
    this.setState({isLoading:false});
  },
  setPage: function(page) {
    _page = page;
  },
  onSearch: function(term, page) {
    // set or get page
    if (page) {
      _page = page;
    } else {
      page = _page;
    } 
    // dispatch query action
    Actions.search(term);
    // transition to the page with search term...
    this.setState({isLoading:true});
    this.transitionTo('/'+ page +'?q=' + term)
  },

  _toggleNav: function() {
    this.setState({showNav:!this.state.showNav})
  },

  closeNav: function(cb) {
    this.setState({showNav:false});
    if (cb) {
      cb();
    }
  },
  setLoading: function(l) {
    if (this.state.isLoading != l) {
      this.setState({isLoading:l});
    }
  },

  render: function(){
    var loader = this.state.isLoading ? (React.createElement("div", {id: "loading"}, React.createElement("i", {"aria-hidden": "true", className: "glyphicon glyphicon-asterisk"}))) : '';
    var cl = this.state.showNav ? 'site-nav' : 'site-nav inactive-nav'
    return (
    React.createElement("div", null, 
      loader, 
      React.createElement("div", {className: "visible-sm-block visible-xs-block", id: "mobile-header"}, 
        React.createElement("a", {className: "btn btn-default pull-left", onClick: this._toggleNav}, React.createElement("i", {className: "glyphicon glyphicon-option-vertical"})), 
        React.createElement("h1", null, " modb")
      ), 
      React.createElement("div", {className: "row-fluid"}, 
        React.createElement("div", {className: "col-md-3 col-lg-2 "+cl}, 
          React.createElement(Sitenav, {onSearch: this.onSearch, q: this.state.q, showNav: this.state.showNav, closeNav: this.closeNav, setLoading: this.setLoading})
        ), 
        React.createElement("div", {className: "col-md-9 col-lg-8 col-sm-12", style: {paddingTop:8}}, 
           React.createElement(RouteHandler, {setPage: this.setPage})
        ), 
        React.createElement("div", {className: "hidden-md col-sm-12"}
        )
      ), 
      React.createElement("div", {className: "debug"}, 
        React.createElement("div", {className: "visible-xs-block"}, "xs"), 
        React.createElement("div", {className: "visible-sm-block"}, "sm"), 
        React.createElement("div", {className: "visible-md-block"}, "md"), 
        React.createElement("div", {className: "visible-lg-block"}, "lg")
      )
    )
    );
  }
});

module.exports = App;

},{"../actions/AppActions.js":281,"../util.js":341,"./Highscores.jsx":291,"./Sitenav.jsx":318,"react":280,"react-router":121}],287:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;

var ItemStore = require('../stores/ItemStore.js')
  , PetStore = require('../stores/PetStore.js');

var PetsTable = require('./PetsTable.jsx');

var pets = PetStore.getAll();


var Breeding = React.createClass({displayName: "Breeding",
  render: function(){
    return (
    React.createElement("div", null, 
      React.createElement("header", null, 
        React.createElement("h1", null, "Breeding")
      ), 
      React.createElement("article", {className: "context"}, 
        React.createElement(PetsTable, {pets: pets})
      )
    )
    );
  }
});

module.exports = Breeding;


},{"../stores/ItemStore.js":333,"../stores/PetStore.js":339,"./PetsTable.jsx":315,"react":280,"react-router":121}],288:[function(require,module,exports){
var React = require('react');

var DebugParams = React.createClass({displayName: "DebugParams",

  render: function(){
    var params = this.props.params;
    var kk = Object.keys(params);
    var paramRows = kk.map(function(k){
      var v = params[k];
      if (typeof v !='object') {
        return (
          React.createElement("tr", {key: k}, React.createElement("th", null, k), React.createElement("td", null, v))
        );
      }
    });
    return (
      React.createElement("table", {className: "table"}, 
        React.createElement("tbody", null, 
          paramRows
        )
      )
    )
  }
});

module.exports = DebugParams;

},{"react":280}],289:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var util = require('../util.js');
var ItemGraphic = require('./ItemGraphic.jsx');
var ItemStore = require('../stores/ItemStore.js');

var FishingTool = React.createClass({displayName: "FishingTool",
  render: function() {
    var n = this.props.item.toLowerCase();

    if (n.match(/poseidon/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(1397)}));
    if (n.match(/iron/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(1036)}));
    if (n.match(/cage/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(127)}));
    if (n.match(/net/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(124)}));
    if (n.match(/wooden harp/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(125)}));
    if (n.match(/steel harp/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(126)}));
    if (n.match(/fishing rod/)) return (React.createElement(ItemGraphic, {item: ItemStore.getItem(7)}));
    return (React.createElement("div", null))
    
  }
});

module.exports = FishingTool;
},{"../stores/ItemStore.js":333,"../util.js":341,"./ItemGraphic.jsx":295,"react":280,"react-router":121}],290:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var ItemStore = require('../stores/ItemStore.js');
var ItemGraphic = require('./ItemGraphic.jsx');

var ForgingPattern = React.createClass({displayName: "ForgingPattern",

  render: function(){
    var formula = this.props.formula;
    var pattern = formula.pattern;

    var cells = [];
    for (var row=0; row <4; row++) {
      for (var col=0; col<4; col++) {
        if (pattern[row] && pattern[row][col] != undefined && pattern[row][col]!=-1) {
          var item = ItemStore.getItem(pattern[row][col]);
          cells.push(React.createElement("div", {className: "forge-cell"}, React.createElement(ItemGraphic, {item: item})))
        } else {
          cells.push(React.createElement("div", {className: "forge-cell"}))
        }
      }
    }
    return(React.createElement("div", {className: "forge-pattern"}, cells))
  }
});

module.exports = ForgingPattern;

},{"../stores/ItemStore.js":333,"./ItemGraphic.jsx":295,"react":280,"react-router":121}],291:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var HighscoresWatchMixin = require('../mixins/HighscoresWatchMixin.js');
var HSStore = require('../stores/HSStore.js');
var ReactBootstrap = require('react-bootstrap')
  , ListGroup = ReactBootstrap.ListGroup
  , ListGroupItem = ReactBootstrap.ListGroupItem
  , Badge = ReactBootstrap.Badge

getHighscores = function() {
  return {results:HSStore.getResults(), filters:HSStore.getFilters()}
};

var Highscores = React.createClass({displayName: "Highscores",
  mixins: [ HighscoresWatchMixin(getHighscores) ],
  render: function(){
    var filters = this.state.filters;
    var results = this.state.results;

    var list = (React.createElement(ListGroup, null, results.map(function(r,i){
      return(React.createElement(ListGroupItem, {key: "hs"+i}, 
        React.createElement(Badge, {className: "pull-right"}, r.l), 
        "#", i, ". ", r.u
      ))
    })))
    var hsSTyles = {
      height: window.innerHeight - 30,
      overflow: 'auto',
      overflowX: 'hidden',
      overflowY: 'auto',
    }
    return (
    React.createElement("div", {id: "highscores", style: hsSTyles}, 
     React.createElement("h3", null, "Highscores"), 
     list
    )
    );
  }
});

module.exports = Highscores;


},{"../mixins/HighscoresWatchMixin.js":323,"../stores/HSStore.js":331,"react":280,"react-bootstrap":58,"react-router":121}],292:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var Panel = require('react-bootstrap').Panel;

var Home = React.createClass({displayName: "Home",
  getInitialState: function(){
    return {
      showTodoDesc: false,
      activeTodos:{}
    }
  },
  toggleTodoDesc: function() {
    this.setState({
      showTodoDesc: !this.state.showTodoDesc,
    });
  },
  clickTodo: function(idx, e) {
    // e.preventDefault();
    var active = this.state.activeTodos;
    if (!active[idx]) {
      active[idx] = true;
    } else {
      active[idx] = !active[idx];
    }
    this.setState({activeTodos:active})
    e.target.blur()
  },
  render: function(){

    var todos = [
      {
        cat: 'Items',
        title: 'Items',
        desc: 'Search and filter all items in MO RPG.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Sub-Categories',
        desc: 'For almost every category of items, new sub-categories have been added',
        done: true
      },
      {
        cat: 'Items',
        title: 'Vendors & drops',
        desc: 'View vendors to buy/sell items from, and mobs that drop them.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Item Crafting',
        desc: 'View crafting recipe for items, including pattern for forged items. Also view see any items the item is a material for.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Item Enchanting',
        desc: 'View enchanting info for all items, including the full enchant chain for items like the <a href="#/items/1327">Boar Spear</a>.',
        done: true
      },
      {
        cat: 'Items',
        title: 'List View',
        desc: 'Let users switch between grid & list view on output.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Maps & Coordinates',
        desc: 'Add map locations and coordinates for vendors, and map locations for mobs.',
        done: true
      },
      {
        cat:'Pets',
        title:'Pets',
        desc: 'Search, filter and view all pets in the MO RPG world.',
      },
      {
        cat: 'Pets',
        title: 'Parent Pets',
        desc: 'For Parent Pets, view info about breeding including foods they eat, other pets they breed with and their offspring.',
      },
      {
        cat: 'Pets',
        title: 'Offspring',
        desc: 'For offspring, view what set of parents breeds them.',
      },
      {
        cat: 'Pets',
        title: 'Leveled Pets',
        desc: 'For pets that grow/evolve into parent pets, view the breeding info about those steps.',
      },
      {
        cat:'Mobs',
        title:'Mobs',
        desc: 'Filter and view all mobs in the MO RPG world.',
        done: true
      },
      {
        cat: 'Mobs',
        title: 'Mob Drops',
        desc: 'View all items a mob drops.',
        done: true
      },
      {
        cat: 'Mobs',
        title: 'Mob/Vendor Maps',
        desc: 'Include links to high-res maps the monsters and vendors are on.'
      },
      {
        cat:'Vendors',
        title:'Vendors',
        desc: 'Filter and view all Vendors in the MO RPG world.',
        done: true
      },
      {
        cat:'General',
        title:'Search Mobs & Vendors',
        desc: 'Make the search box affect all 3 areas, not just items.',
        done: true
      },    
      {
        cat:'General',
        title:'Touch Support',
        desc: 'Added better touch support for mobile devices.',
        done: true
      },    
      {
        cat:'General',
        title:'Loading Indicators',
        desc: 'Add spinning icon to indicate pages are loading/rendering.',
        done: true
      },    
      {
        cat:'General',
        title:'Moar Mobile Friendly',
        desc: 'Off-canvas navigation and other mobile friendly features added.',
        done: true
      },    
      {
        cat:'General',
        title:'Better bookmark support',
        desc: 'Provide better support bookmarking & sending links. (eg, having URL update as filters are changed.)'
          
      },    
    ];
    var _self = this;

    return (
    React.createElement("div", null, 
      React.createElement("article", {className: "context"}, 
        React.createElement("div", {className: "row"}, 
          React.createElement("div", {className: "col-sm-4"}, 
            React.createElement("h2", null, "About modb"), 
            React.createElement("p", null, 
              "modb is an app that lets you quickly search data from ", React.createElement("a", {
              href: "http://mo.ee"}, "RPG MO"), ". The app is currently under" + ' ' +
              "development, but feel free to take it for a spin. Let me know" + ' ' +
              "what you think in the forums."
            ), 
            React.createElement("p", null, 
              "Use the search box in the top right to search, or click" + ' ' + 
              "Items in the navigation to view all of the items." + ' ' +
              "Filter results further from the items page by category," + ' ' + 
              "sub-category & wiki price."
            )
          ), 
          React.createElement("div", {className: "col-sm-8"}, 
          React.createElement("h2", null, "Todo List"), 
          React.createElement("small", null, React.createElement("a", {href: "#", onClick: this.toggleTodoDesc, className: "btn btn-primary btn-xs"}, "Toggle Todo Descriptions")), 
          React.createElement("ul", null, 
            todos.map(function(todo,i){
              var cl = '';
              var title = todo.title;
              if (todo.done) {
                title += ' (done)';
                cl = 'done text-success'
              } else {
                cl = 'text-warning'
              }
              var desc = _self.state.showTodoDesc || _self.state.activeTodos[i] ? (React.createElement("div", {className: "text-muted", dangerouslySetInnerHTML: {__html:todo.desc}})) : '';
              return (
                React.createElement("li", {className: cl, key: "todo"+i}, 
                  React.createElement("strong", null, React.createElement("a", {className: cl, href: "#", onClick: _self.clickTodo.bind(_self,i)}, title)), 
                  desc
                )
              )
            })
            )
          )
        )
      )
    )
    );
  }
});

module.exports = Home;

},{"react":280,"react-bootstrap":58,"react-router":121}],293:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var RouteHandler = Router.RouteHandler; 
var numeral = require('numeral');
var Nav = require('react-bootstrap/Nav');
var NavItemLink = require('react-router-bootstrap').NavItemLink;
var util = require('../util.js');
var MediaQuery = require('react-responsive');
var Breakpoints = require('../constants/AppConstants.js').Breakpoints;

var Icons = require('../constants/AppConstants.js').Icons;

var ItemStore = require('../stores/ItemStore.js')
var ItemProperties = require('./ItemProperties.jsx')
  , ItemMobileAccordion = require('./ItemMobileAccordion.jsx')
  , DebugParams = require('./DebugParams.jsx')
  
var ItemView = React.createClass({displayName: "ItemView",
  mixins: [ Router.State ],

  render: function(){

    var id = this.getParams().itemId;
    var item = ItemStore.getItem(id);
    

    var tabIdx = 0;

    var cl = 'sheet_' + item.img.sheet + ' item_' + id;

    var kk = Object.keys(item.params);
    var paramRows = kk.map(function(k){
      var v = item.params[k];
      return (
        React.createElement("tr", {key: k}, React.createElement("th", null, k), React.createElement("td", null, v))
      );
    });

    var price = numeral(item.params.price).format('0,0');

    var itemDesc = '';
    if (item.params.desc) {
      itemDesc = (React.createElement("small", null, React.createElement("br", null), item.params.desc));
    }

    var sourcesTable, presents = util.itemPresents(item), sources;
    if (presents) {
      sources = presents.concat(item.sources||[]);
    }

    if (sources && sources.length) {
      sourcesTable = (
        React.createElement("div", {className: "panel panel-default"}, 
            React.createElement("div", {className: "panel-heading"}, React.createElement("h4", {className: "panel-title c"}, "Non Mob/Crafting Sources")), 
            React.createElement("div", {className: "panel-body"}, React.createElement("ul", null, sources.map(function(i){
            return(
              React.createElement("li", null, i)
            );
          })
          ))
          )
      )
    }

    var itemInfo = (
      React.createElement("div", {className: "row"}, 
        React.createElement("div", {className: "col-xs-12"}, 
          React.createElement("header", {className: "clearfix"}, 
            React.createElement(MediaQuery, {minWidth: Breakpoints.xs, key: "itemNonMobileWikiValueMQ"}, 
              React.createElement("div", {className: "pull-right panel panel-default"}, 
                React.createElement("div", {className: "panel-heading"}, React.createElement("h4", {className: "panel-title c"}, "Wiki Value")), 
                React.createElement("div", {className: "panel-body c"}, price)
              )
            ), 

            React.createElement("div", {className: "item-icon panel panel-default pull-left"}, 
              React.createElement("div", {className: "panel-body"}, React.createElement("div", {className: cl}))
            ), 
            React.createElement("h3", null, 
              item.n, 
              itemDesc
            )
          ), 
          React.createElement(MediaQuery, {maxWidth: Breakpoints.xs, key: "itemMobileWikIValueMQ"}, 
            
            React.createElement("div", {className: "panel panel-default", style: {marginTop:8}}, 
              React.createElement("div", {className: "panel-heading"}, React.createElement("h4", {className: "panel-title c"}, "Wiki Value")), 
              React.createElement("div", {className: "panel-body c"}, price)
            )
          )
        )
      )
    );

    var content = React.createElement(RouteHandler, null);


    return (
    React.createElement("div", {className: "item-detail"}, 
      React.createElement(MediaQuery, {maxWidth: Breakpoints.xs, key: "itemMobileMQ"}, 
        React.createElement(ItemMobileAccordion, {item: item, itemInfo: itemInfo, content: content})
      ), 
      React.createElement(MediaQuery, {minWidth: Breakpoints.xs, key: "nonMobileMQ"}, 
        itemInfo, 
        React.createElement("br", {className: "clearfix"}), 
        React.createElement("div", {className: "row"}, 
          React.createElement("div", {className: "col-md-3 col-xs-12 pull-right"}, 
            React.createElement("div", {className: "visible-xs-block panel panel-default"}, 
                React.createElement("div", {className: "panel-heading"}, React.createElement("h4", {className: "panel-title c"}, "Wiki Value")), 
                React.createElement("div", {className: "panel-body c"}, price)
              ), 
            React.createElement("div", {className: "row"}, 
              React.createElement("div", {className: "col-xs-12 col-sm-6 col-md-12"}, React.createElement(ItemProperties, {item: item})), 
              React.createElement("div", {className: "col-xs-12 col-sm-6 col-md-12"}, sourcesTable)
            )
          ), 
          React.createElement("div", {className: "col-md-9"}, 
            React.createElement(Nav, {bsStyle: "tabs", activeKey: 1, onSelect: this.handelSelect}, 
              React.createElement(NavItemLink, {key: "navItemLink1", to: "item-vendor", params: {itemId:item.id}}, 
                Icons.vendorTab, 
                React.createElement("span", {className: "hidden-xs"}, " Vendors")
              ), 
              React.createElement(NavItemLink, {key: "navItemLink2", to: "item-drops", params: {itemId:item.id}}, 
                Icons.dropsTab, 
                React.createElement("span", {className: "hidden-xs"}, " Drops")
              ), 
              React.createElement(NavItemLink, {key: "navItemLink3", to: "item-craft", params: {itemId:item.id}}, 
                Icons.craftTab, 
                React.createElement("span", {className: "hidden-xs"}, " Craft")
              ), 
              React.createElement(NavItemLink, {key: "navItemLink4", to: "item-enchant", params: {itemId:item.id}}, 
                Icons.enchantTab, 
                React.createElement("span", {className: "hidden-xs"}, " Enchant")
              ), 
              React.createElement(NavItemLink, {key: "navItemLink5", to: "item-breeding", params: {itemId:item.id}}, 
                Icons.breedingTab, 
                React.createElement("span", {className: "hidden-xs"}, " Breeding")
              )
            ), 
            React.createElement("div", {className: "tab-content"}, content)
          )
        )
      ), 

      React.createElement("div", {className: "panel debug"}, React.createElement(DebugParams, {params: item.params}))
    )
    );

  }
});

module.exports = ItemView;

},{"../constants/AppConstants.js":321,"../stores/ItemStore.js":333,"../util.js":341,"./DebugParams.jsx":288,"./ItemMobileAccordion.jsx":297,"./ItemProperties.jsx":298,"numeral":7,"react":280,"react-bootstrap/Nav":37,"react-responsive":86,"react-router":121,"react-router-bootstrap":93}],294:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var ItemStore = require('../stores/ItemStore.js');
var ItemGraphic = require('./ItemGraphic.jsx');

var ItemCraftTab = React.createClass({displayName: "ItemCraftTab",
  render: function(){
    var formula = this.props.formula;
    return(
      React.createElement("table", {className: "table table-condensed table-bordered table-stripped"}, 
        React.createElement("thead", null, React.createElement("th", null), React.createElement("th", null, "Item"), React.createElement("th", null, "# Used")), 
        React.createElement("tbody", null, 
          formula.matts.map(function(o,i){
            var matt = ItemStore.getItem(o.id);
            return(React.createElement("tr", {key: 'itemCraftListItem'+i}, 
              React.createElement("td", null, React.createElement(ItemGraphic, {item: matt})), 
              React.createElement("td", null, React.createElement(Link, {to: "item", params: {itemId:matt.id}}, matt.n)), 
              React.createElement("td", null, o.c)
            ))
          })
        )
      )
    );
  }
});

module.exports = ItemCraftTab;

},{"../stores/ItemStore.js":333,"./ItemGraphic.jsx":295,"react":280,"react-router":121}],295:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var util = require('../util.js');

var ItemGraphic = React.createClass({displayName: "ItemGraphic",
  render: function() {
    if (!this.props.item.img) {
      return (React.createElement("div", {className: "noMobImg"}));
    }
    var type = this.props.imgType ? this.props.imgType : 'item';
    var cl = 'item sheet_' + this.props.item.img.sheet;
    if (this.props.item.id) {
      cl += ' ' + type + '_' + this.props.item.id;
      if (this.props.cl) cl += ' ' + this.props.cl;
      return this.props.nolink ? (React.createElement("div", {className: cl})) 
        : (React.createElement(Link, {to: type, params: {itemId:this.props.item.id}}, React.createElement("div", {className: cl, title: this.props.item.n})))
    } else {
      return this.props.nolink ? (React.createElement("div", {className: cl, style: util.itemGraphicStyle(this.props.item)})) 
        : (React.createElement(Link, {to: type, params: {itemId:this.props.item.id}}, React.createElement("div", {className: cl, style: util.itemGraphicStyle(this.props.item), title: this.props.item.n})))
    }
  }
});

module.exports = ItemGraphic;
},{"../util.js":341,"react":280,"react-router":121}],296:[function(require,module,exports){
var React = require('react');

var ItemHome = React.createClass({displayName: "ItemHome",
  render: function() {
    return React.createElement("div", null)
  }
});
module.exports = ItemHome;

},{"react":280}],297:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var Icons = require('../constants/AppConstants.js').Icons;


var sections = [
  {n:'',i:'',t:'item'},
  {n:'Vendors',i:'usd',t:Icons.vendorTab},
  {n:'Drops',i:'user',t:Icons.dropsTab},
  {n:'Craft',i:'wrench',t:Icons.craftTab},
  {n:'Enchant',i:'flash',t:Icons.enchantTab},
  {n:'Breeding',i:'piggy-bank',t:Icons.breedingTab},
];

var ItemMobileAccordion = React.createClass({displayName: "ItemMobileAccordion",
  mixins: [Router.State],
  render: function() {
    var _self = this;
    console.log(this);
    console.log(this.getPathname());
    var item = this.props.item;
    sections[0].n = item.n;
    var params = {itemId: item.id}
    var accordions = sections.map(function(s,i) {
      var heading = s.i ? (React.createElement("span", null, React.createElement("i", {className: "glyphicon glyphicon-" + s.i}), s.n)) : s.n
      var content = '';
      console.log(s.i);
      console.log(_self.isActive(s.t, params));
      if (_self.isActive(s.t, params)) {
        if (s.t == 'item') {
          // only render it when we're on the item's info page
          if (_self.getPathname().match(/[0-9]$/)) {
            content = (React.createElement("div", {className: "panel-collapse collapse in"}, React.createElement("div", {className: "accordion-inner"}, 
              _self.props.itemInfo
            )));
          }
        } else {
          content = (React.createElement("div", {className: "panel-collapse collapse in"}, React.createElement("div", {className: "accordion-inner"}, 
            _self.props.content
          )));
        }
      }

      return (
        React.createElement("div", {className: "panel-group"}, 
          React.createElement("div", {className: "panel panel-default"}, 
            React.createElement("div", {className: "panel-heading c"}, React.createElement("h4", {className: "panel-title"}, React.createElement(Link, {to: s.t, params: params, className: "accordion-link"}, heading))), 
            content
          )
        )
      )
    })

    return (React.createElement("div", {className: "accordion"}, accordions))

  }
});

module.exports = ItemMobileAccordion;
},{"../constants/AppConstants.js":321,"react":280,"react-router":121}],298:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var ItemProp = require('./ItemProperty.jsx');
var AppConstants = require('../constants/AppConstants.js');
var itemParamsKeyMap = AppConstants.itemParamsKeyMap;
var PetStore = require('../stores/PetStore.js');

var ItemProperties = React.createClass({displayName: "ItemProperties",
  render: function(){
    var item = this.props.item;
    var p = item.params;
    var pk = Object.keys(p);
    var propCount = 0;

    var propStr = Object.keys(itemParamsKeyMap).map(function(k){
      if (pk.indexOf(k) > -1) {
        propCount++;
        return (
          React.createElement(ItemProp, {key: k, name: itemParamsKeyMap[k], value: p[k]})
        )
      } else {
        return '';
      }
    });

    // add inventory slots for pets
    if (item.t == AppConstants.itemCatMap.PET && item.params.pet) {
      var pet = PetStore.getByItemId(item.id);
      if (pet && pet.params) {
        propCount++;
        propStr.push((React.createElement(ItemProp, {key: "petInvSlots", name: "Inventory Slots", value: pet.params.inventory_slots})))
      }
    }

    if (propCount) {
      return (
        React.createElement("div", null, 
        React.createElement("h4", null, AppConstants.itemCats[this.props.item.t], " Stats"), 
        React.createElement("ul", {className: "list-group"}, 
          propStr
        )
        )
      );
    } else {
      return React.createElement("div", null);
    }
  }
});

module.exports = ItemProperties;

},{"../constants/AppConstants.js":321,"../stores/PetStore.js":339,"./ItemProperty.jsx":299,"react":280,"react-router":121}],299:[function(require,module,exports){
var React = require('react');
var ItemProperty = React.createClass({displayName: "ItemProperty",
  render: function() {
    var badgecl = this.props.badgecl || 'badge';
    return (
      React.createElement("li", {className: "list-group-item"}, 
        React.createElement("span", {className: badgecl}, this.props.value), 
        this.props.name
      )
    );
  }
});

module.exports = ItemProperty;

},{"react":280}],300:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var numeral = require('numeral');
var TabbedArea = require('react-bootstrap/TabbedArea');
var TabPane = require('react-bootstrap/TabPane');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');
var util = require('../util.js');

var ItemStore = require('../stores/ItemStore.js')
  , PetStore = require('../stores/PetStore.js');

var ItemGraphic = require('./ItemGraphic.jsx')
  , PetsTable = require('./PetsTable.jsx');
  

var ItemBreedingTab = React.createClass({displayName: "ItemBreedingTab",
  mixins: [Router.State],

  render: function() {
    var id = this.getParams().itemId;
    var item = ItemStore.get(id);
    var pets = PetStore.findPetsThatEat(id);

    return (React.createElement(PetsTable, {pets: pets, condensed: true, heading: "Pets bred with " + item.n}))
  }
});

module.exports = ItemBreedingTab;

},{"../dispatcher/AppDispatcher.js":322,"../stores/ItemStore.js":333,"../stores/PetStore.js":339,"../util.js":341,"./ItemGraphic.jsx":295,"./PetsTable.jsx":315,"numeral":7,"react":280,"react-bootstrap/TabPane":52,"react-bootstrap/TabbedArea":53,"react-router":121}],301:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var CraftStore = require('../stores/CraftStore.js');
var ForgingPattern = require('./ForgingPattern.jsx');
var ItemCraftMattsList = require('./ItemCraftMattsList.jsx');
var ItemGraphic = require('./ItemGraphic.jsx');
var FishingTool = require('./FishingTool.jsx');
var ItemStore = require('../stores/ItemStore.js');
var Util = require('../util.js');

var ItemCraftTab = React.createClass({displayName: "ItemCraftTab",
  mixins: [ Router.State ],

  render: function(){
    var id = this.getParams().itemId;

    var item = ItemStore.get(id);

    var craft = CraftStore.findByItemId(item.id);

    var formulas = {}
      , patterns = {}
      , recipes = null
      , haveFormulas = false
      , havePatterns = false
      , haveChances = true
      , craftMattsCollSpan = 2

    if (craft.formulas) {
      // TODO: have spells show altar & medal
      // TODO: have wood show tree & tool
      // TODO: have pet show evolve chain?
      for (var i in craft.formulas) {
        if (craft.formulas[i].pattern) {
          havePatterns = true;
          console.log(craft);
          var key = Util.titleCase(craft.formulas[i].skill) + ' ' + item.n;
          patterns[key] = patterns[key] || [];
          patterns[key].push( (
            React.createElement("tr", {key: "craftRow" + i}, React.createElement("td", null, 
              React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-sm-3"}, 
                  React.createElement("h5", null, "Forumla (", React.createElement("span", {className: "text-warning"}, Util.chanceStr(craft.formulas[i])), ")"), 
                  React.createElement(ForgingPattern, {formula: craft.formulas[i]}), 
                  React.createElement("br", {className: "clearfix"})
                ), 
                React.createElement("div", {className: "col-sm-9"}, 
                  React.createElement("h5", null, "Material List"), 
                  React.createElement(ItemCraftMattsList, {formula: craft.formulas[i]})
                )
              )
            ))
          ));
        } else if(craft.formulas[i].matts && craft.formulas[i].matts.length) {
          var tool;
          var title;
          if (craft.formulas[i].skill == 'cooking') {
            title = 'Cooking'+ ' ' + item.n;
            if (craft.formulas[i].n.toLowerCase().match(/sushi/)) {
              tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: {n:'Kettle',img:{sheet:42,x:6,y:14}}, nolink: true})));
            } else {
              tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: {n:'Campfire',img:{sheet:1,x:11,y:14}}, nolink: true})));
            }
          }
          if (craft.formulas[i].skill == 'jewelry') {
            if (craft.formulas[i].n.toLowerCase().match(/cut /)) {
              tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: ItemStore.getItem(297)})));
            } else {
              tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: {n:'Furnace',img:{sheet:15,x:0,y:0}}, nolink: true})));
            }
          }
          if (craft.formulas[i].skill == 'forging') tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: {n:'Furnace',img:{sheet:15,x:0,y:0}}, nolink: true})));
          if (craft.formulas[i].n.toLowerCase().match(/vial of water/)) tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: {n:'Water Well',img:{sheet:1,x:9,y:14}}, nolink: true})));
          else if (craft.formulas[i].n.match(/Vial/)) tool = ( React.createElement("td", null, React.createElement(ItemGraphic, {item: {n:'Furnace',img:{sheet:15,x:0,y:0}}, nolink: true})));
          title = title || 'Crafting' + ' ' + item.n;
          formulas[title] = formulas[title] || []
          haveFormulas = true;
          craftMattsCollSpan = tool ? craft.formulas[i].matts.length + 1 : craft.formulas[i].matts.length;
          formulas[title].push( (
              React.createElement("tr", {key: "craftRow" + i}, 
                tool, 
                craft.formulas[i].matts.map(function(matt, mattIdx){
                  var mattItem = ItemStore.getItem(matt.id);
                  return (
                    React.createElement("td", {key: "mattItem"+mattIdx, className: "c"}, React.createElement(ItemGraphic, {item: mattItem}), React.createElement("br", null), matt.c>1?matt.c:''
                    )
                  )
                }), 
                React.createElement("td", null, Util.toPercent(craft.formulas[i].min_chance)), 
                React.createElement("td", null, Util.toPercent(craft.formulas[i].max_chance))
              )
          ) );

        } else {
          switch(craft.formulas[i].skill) {
            case 'farming':
              haveFormulas = true;
              var key = 'Farming ' + item.n;
              haveChances = false;
              formulas[key] = formulas[key] || []
              craftMattsCollSpan = 5;
              formulas[key].push( (
                React.createElement("tr", {key: "craftRow" + i}, 
                  React.createElement("td", {key: "td1"}, React.createElement(ItemGraphic, {item: ItemStore.getItem(753)})), 
                  React.createElement("td", {key: "td2"}, React.createElement(ItemGraphic, {item: ItemStore.getItem(767)})), 
                  React.createElement("td", {key: "td3"}, React.createElement(ItemGraphic, {item: ItemStore.getFarmingSeed(item)})), 
                  React.createElement("td", {key: "td4"}, "(time)"), 
                  React.createElement("td", {key: "td5"}, React.createElement(ItemGraphic, {item: craft.formulas[i].source, nolink: true}))
                )
              ));
              break;
            case 'fishing':
              haveFormulas = true;
              var key = 'Fishing ' + item.n;
              formulas[key] = formulas[key] || []
              craftMattsCollSpan = 2;
              formulas[key].push( (
                  React.createElement("tr", {key: "craftRow" + i}, 
                    React.createElement("td", {key: "craftRowTd1"+i, style: {width:'50px'}}, React.createElement(FishingTool, {item: craft.formulas[i].source.n})), 
                    React.createElement("td", {key: "craftRowTd2"+i}, craft.formulas[i].source.n.replace(/Fish - /,''), "."), 
                    React.createElement("td", {key: "craftRowTd3"+i}, Util.toPercent(craft.formulas[i].min_chance)), 
                    React.createElement("td", {key: "craftRowTd4"+i}, Util.toPercent(craft.formulas[i].max_chance))
                  )
              ));
            break;
            case 'mining':
              haveFormulas = true;
              var key = 'Mining ' + item.n;
              formulas[key] = formulas[key] || []
              var tool;
              craftMattsCollSpan = 2;
              if (craft.formulas[i].n=='Sand') {
                tool = (React.createElement(ItemGraphic, {item: ItemStore.getItem(286)}))
              } else {
                tool = (React.createElement(ItemGraphic, {item: ItemStore.getItem(23)}))
              }
              formulas[key].push(  (
                  React.createElement("tr", {key: "craftRow" + i}, 
                    React.createElement("td", {key: "craftRowTD1"+i, style: {width:'50px'}}, React.createElement(ItemGraphic, {item: craft.formulas[i].source, nolink: true})), 
                    React.createElement("td", {key: "craftRowTD2"+i}, tool), 
                    React.createElement("td", {key: "craftRowTD3"+i}, Util.toPercent(craft.formulas[i].min_chance)), 
                    React.createElement("td", {key: "craftRowTD4"+i}, Util.toPercent(craft.formulas[i].max_chance))
                  )
              ));
            break;
            default:
              formulas.push(React.createElement("tr", {key: 'craftRow' + i}))
          }
        }
      }
    }

    if (craft.asMatt && craft.asMatt.length) {
      recipes = (
        React.createElement("div", null, 
          React.createElement("h4", null, "Recipies ", item.n, " is a part of"), 
          React.createElement("table", {className: "table table-bordered table-stripped"}, 
            React.createElement("thead", null, 
              React.createElement("tr", null, 
                React.createElement("th", {key: "th1"}, "Skill"), 
                React.createElement("th", {key: "th2"}, "Level"), 
                React.createElement("th", {key: "th3", colSpan: "2"}, "Item"), 
                React.createElement("th", {key: "th4", className: "hidden-sm hidden-xs"}, "Recipe"), 
                React.createElement("th", {key: "th5"}, "Min %"), 
                React.createElement("th", {key: "th6"}, "Max %")
              )
            ), 
            React.createElement("tbody", null, 
              craft.asMatt.map(function(matt, i){
                return (
                  React.createElement("tr", {key: 'mattItem' + i}, 
                    React.createElement("td", {key: "td1"}, Util.titleCase(matt.skill)), 
                    React.createElement("td", {key: "td2"}, matt.level), 
                    React.createElement("td", {key: "td3"}, React.createElement(ItemGraphic, {item: matt})), 
                    React.createElement("td", {key: "td4"}, React.createElement(Link, {to: "item", params: {itemId:matt.id}}, matt.n)), 
                    React.createElement("td", {key: "td5", className: "hidden-sm hidden-xs"}, React.createElement("table", null, React.createElement("tr", null, matt.matts.map(function(m,ii){
                      return (
                        React.createElement("td", {key: "td"+ii, className: "asMattCell", key: "asMattCell" + ii}, React.createElement("table", null, React.createElement("tr", null, React.createElement("td", {key: "td1"}, m.c), React.createElement("td", {key: "td2"}, React.createElement(ItemGraphic, {item: ItemStore.getItem(m.id)})))))
                      );
                    })))), 
                    React.createElement("td", {key: "td6"}, matt.min_chance ? Math.round(matt.min_chance*100) + '%' : '-'), 
                    React.createElement("td", {key: "td7"}, matt.max_chance ? Math.round(matt.max_chance*100) + '%' : '-')
                  )
                )
              })
            )
          )

        )
      )
    }
    var formulaHtml;
    if (haveFormulas || havePatterns) {
      var pHtml, fHtml = null;

      if (havePatterns) {
        var kk = Object.keys(patterns);
        pHtml = (React.createElement("div", {key: "pHtml"}, kk.map(function(k){
          var f = patterns[k];
          return (React.createElement("div", null, 
            React.createElement("h4", null, k), React.createElement("table", {className: "table table-bordered"}, 
            React.createElement("tbody", null, f)
            )
          ))
        })));
        if (!haveFormulas) formulaHtml = pHtml;
      }

      if (haveFormulas) {
        console.log(formulas);
        var kk = Object.keys(formulas);
        fHtml = (React.createElement("div", null, kk.map(function(k){
          var chance1Th = '', chance2Th = '';
          if (haveChances) {
            chance1Th = (React.createElement("th", {key: 'formulaTh2'+k}, "Min %"));
            chance2Th = (React.createElement("th", {key: 'formulaTh3'+k}, "Min %"));
          }
          var f = formulas[k];
          return (React.createElement("div", {key: "fHtml"}, 
            React.createElement("h4", null, k), React.createElement("table", {className: "table table-bordered"}, 
            React.createElement("thead", null, React.createElement("tr", null, 
              React.createElement("th", {key: 'formulaTh1'+k, colSpan: craftMattsCollSpan}, "Items"), 
              chance1Th, 
              chance2Th
            )), 
            React.createElement("tbody", null, f)
            )
          ))
        })));
        if (!havePatterns) formulaHtml = fHtml;
      }

      if (haveFormulas && havePatterns) {
        formulaHtml = (React.createElement("div", null, pHtml, fHtml))
      }

    }


    if (formulaHtml && recipes) {
      return (
        React.createElement("div", {className: "row"}, 
          React.createElement("div", {className: "col-sm-12"}, 
            formulaHtml, 
            recipes
          )
        )
      );
    } else if (formulaHtml) {
      return formulaHtml;
    } else if (recipes) {
      return recipes;
    } else {
      return (React.createElement("div", null, "Item is not craftable, and not used in any known recipes."));  
    }
    
    /*
    var p = this.props.item.params;
    var pk = Object.keys(p);
    var propCount = 0;

    var propStr = Object.keys(itemParamsKeyMap).map(function(k){
      if (pk.indexOf(k) > -1) {
        propCount++;
        return (
          <ItemProp key={k} name={itemParamsKeyMap[k]} value={p[k]} />
        )
      } else {
        return '';
      }
    });

    // add inventory slots for pets
    if (item.t == AppConstants.itemCatMap.PET && item.params.pet) {
      var pet = PetStore.getByItemId(item.id);
      if (pet && pet.params) {
        propCount++;
        propStr.push((<ItemProp key="petInvSlots" name="Inventory Slots" value={pet.params.inventory_slots} />))
      }
    }

    if (propCount) {
      return (
        <div>
        <h4>{AppConstants.itemCats[this.props.item.t]} Stats</h4>
        <ul className="list-group">
          {propStr}
        </ul>
        </div>
      );
    } else {
      return <div />;
    }
    */
  }
});

module.exports = ItemCraftTab;

},{"../stores/CraftStore.js":330,"../stores/ItemStore.js":333,"../util.js":341,"./FishingTool.jsx":289,"./ForgingPattern.jsx":290,"./ItemCraftMattsList.jsx":294,"./ItemGraphic.jsx":295,"react":280,"react-router":121}],302:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var numeral = require('numeral');
var TabbedArea = require('react-bootstrap/TabbedArea');
var TabPane = require('react-bootstrap/TabPane');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');
var util = require('../util.js');

var ItemStore = require('../stores/ItemStore.js')
  , MobStore = require('../stores/MobStore.js')

var ItemGraphic = require('./ItemGraphic.jsx')
  , MobGraphic = require('./MobGraphic.jsx')
  

var ItemDropsTab = React.createClass({displayName: "ItemDropsTab",
  mixins: [ Router.State ],

  render: function(){

    var id = this.getParams().itemId;
    var item = ItemStore.getItem(id);
    var mobs = MobStore.findByItem(id);
    var presentInfo = '';

    var mobRows = mobs.map(function(mob,i){
      var mobLocs = mob.locations ? Object.keys(mob.locations).join(', ') : ''
      return (
        React.createElement("tr", {key: 'itemNPC' + i}, 
          React.createElement("td", {key: "td1", width: "32"}, React.createElement(MobGraphic, {mob: mob, imgType: "mob"})), 
          React.createElement("td", {key: "td2"}, React.createElement(Link, {to: "mob", params: {mobId:mob.id}}, mob.n)), 
          React.createElement("td", {key: "td3"}, numeral(mob.chance * 100).format('0.00'), "%"), 
          React.createElement("td", {key: "td4", className: "hidden-xs"}, mobLocs)
        )
      );
    });

    

    var dropTable;
    if (mobs.length) {
      dropTable = (
        React.createElement("div", null, 
          presentInfo, 
          React.createElement("h4", null, "Mobs that drop ", item.n), 
          React.createElement("table", {className: "table table-striped table-bordered"}, 
            React.createElement("thead", null, React.createElement("tr", null, 
              React.createElement("th", {key: "th1", colSpan: "2"}, "Mob"), 
              React.createElement("th", {key: "th2"}, "Chance"), 
              React.createElement("th", {key: "th3", className: "hidden-xs"}, "Map(s)")
            )), 
            React.createElement("tbody", null, mobRows)
          )
        )
      );
    } else if (presentInfo) {
      dropTable = presentInfo;
    } else {
      dropTable = (React.createElement("div", null, "There are no mobs that drop this item."))
    }
    

    return(React.createElement("div", null, dropTable));
  }
});

module.exports = ItemDropsTab;


},{"../dispatcher/AppDispatcher.js":322,"../stores/ItemStore.js":333,"../stores/MobStore.js":335,"../util.js":341,"./ItemGraphic.jsx":295,"./MobGraphic.jsx":308,"numeral":7,"react":280,"react-bootstrap/TabPane":52,"react-bootstrap/TabbedArea":53,"react-router":121}],303:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var numeral = require('numeral');
var TabbedArea = require('react-bootstrap/TabbedArea');
var TabPane = require('react-bootstrap/TabPane');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');
var util = require('../util.js');

var ItemStore = require('../stores/ItemStore.js')

var ItemGraphic = require('./ItemGraphic.jsx')
  

var ItemTabEnchant = React.createClass({displayName: "ItemTabEnchant",
  mixins: [ Router.State ],

  render: function(){

    var id = this.getParams().itemId;
    var item = ItemStore.getItem(id);
    var enchantChain = ItemStore.getEnchantChain(id);

    var enchantTable;
    if (enchantChain.length > 1) {
      var maxEl = enchantChain.length - 1;
      var enchantRows = enchantChain.map(function(encItem,i){
      var cl = 'sheet_' + encItem.img.sheet + ' item_' + encItem.id;
      var trcl = item.id == encItem.id ? 'info' : '';
      return(
        React.createElement("tr", {key: 'enchantChain' + i, className: trcl}, 
          React.createElement("td", {key: "td1"}, 
            React.createElement(Link, {to: "item", params: {itemId:encItem.id}}, 
              React.createElement("div", {className: cl})
            )
          ), 
          React.createElement("td", {key: "td2"}, 
            React.createElement(Link, {to: "item", params: {itemId:encItem.id}}, 
              encItem.n
            )
          ), 
          React.createElement("td", {key: "td3"}, encItem.chances && i < maxEl ? encItem.chances[0] + '%' : '-'), 
          React.createElement("td", {key: "td4"}, encItem.chances && i < maxEl ? encItem.chances[1] + '%' : '-'), 
          React.createElement("td", {key: "td5"}, encItem.chances && i < maxEl ? encItem.chances[2] + '%' : '-'), 
          React.createElement("td", {key: "td6"}, encItem.chances && i < maxEl ? encItem.chances[3] + '%' : '-')
        )
      )

      });

      enchantTable = (React.createElement("table", {className: "table table-striped table-bordered"}, 
              React.createElement("thead", null, React.createElement("tr", null, 
                React.createElement("th", {key: "th1"}, "Image"), 
                React.createElement("th", {key: "th2"}, "Item Name"), 
                React.createElement("th", {key: "th3"}, "Low"), 
                React.createElement("th", {key: "th4"}, "Medium"), 
                React.createElement("th", {key: "th5"}, "High"), 
                React.createElement("th", {key: "th6"}, "Superior")
               )), 
              React.createElement("tbody", null, enchantRows)
            ));
    } else {
      enchantTable = (React.createElement("div", null, "There is no enchanting information for this item."))
    }

    return (React.createElement("div", null, enchantTable));
  }
});

module.exports = ItemTabEnchant;

},{"../dispatcher/AppDispatcher.js":322,"../stores/ItemStore.js":333,"../util.js":341,"./ItemGraphic.jsx":295,"numeral":7,"react":280,"react-bootstrap/TabPane":52,"react-bootstrap/TabbedArea":53,"react-router":121}],304:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var numeral = require('numeral');
var TabbedArea = require('react-bootstrap/TabbedArea');
var TabPane = require('react-bootstrap/TabPane');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');
var util = require('../util.js');

var ItemStore = require('../stores/ItemStore.js')
  , NPCStore = require('../stores/NPCStore.js')

var ItemGraphic = require('./ItemGraphic.jsx')
  , DebugParams = require('./DebugParams.jsx')
  

var ItemTabVendor = React.createClass({displayName: "ItemTabVendor",
  mixins: [ Router.State ],

  render: function(){

    var id = this.getParams().itemId;
    var item = ItemStore.getItem(id);
    var npcs = NPCStore.findByItem(id);

    var npcRows = npcs.map(function(npc,i){
      return (
        React.createElement("tr", {key: 'itemNPC' + i}, 
          React.createElement("td", {key: "td1"}, React.createElement(Link, {to: "npc", params: {npcId:npc.id}}, npc.n)), 
          React.createElement("td", {key: "td2"}, util.vendorStockCount(npc, item.id)), 
          React.createElement("td", {key: "td3", className: "hidden-xs"}, npc.map), 
          React.createElement("td", {key: "td4", className: "hidden-xs"}, npc.coords.x, ", ", npc.coords.y)
        )
      );
    });

    var vendorTable;
    if (npcs.length) {
      vendorTable = (React.createElement("table", {className: "table table-striped table-bordered"}, 
          React.createElement("thead", null, React.createElement("tr", null, 
            React.createElement("th", {key: "th1"}, "Name"), 
            React.createElement("th", {key: "th2"}, "# Stocks"), 
            React.createElement("th", {key: "th3", className: "hidden-xs"}, "Map"), 
            React.createElement("th", {key: "th4", className: "hidden-xs"}, "Coordinates")
          )), 
          React.createElement("tbody", null, npcRows)
        ))
    } else {
      vendorTable = (React.createElement("div", null, "There are no vendors that buy/sell this item."))

    }
    return(React.createElement("div", null, vendorTable))
  }
});

module.exports = ItemTabVendor;
},{"../dispatcher/AppDispatcher.js":322,"../stores/ItemStore.js":333,"../stores/NPCStore.js":337,"../util.js":341,"./DebugParams.jsx":288,"./ItemGraphic.jsx":295,"numeral":7,"react":280,"react-bootstrap/TabPane":52,"react-bootstrap/TabbedArea":53,"react-router":121}],305:[function(require,module,exports){

},{}],306:[function(require,module,exports){
var React = require('react');
var HTMLSelect = require('./html/select.jsx');
var AppConstants = require('../constants/AppConstants.js');

var MapSelect = React.createClass({displayName: "MapSelect",

  render: function() {
    return(
      React.createElement(HTMLSelect, {ref: this.props.ref, onChange: this.props.onChange, 
        value: this.props.defaultValue, options: AppConstants.maps})
    )
  }
});

module.exports = MapSelect;
},{"../constants/AppConstants.js":321,"./html/select.jsx":320,"react":280}],307:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var numeral = require('numeral');
var TabbedArea = require('react-bootstrap/TabbedArea');
var TabPane = require('react-bootstrap/TabPane');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');
var util = require('../util.js');
var _ = require('lodash');

var MobStore = require('../stores/MobStore.js')
  // , NPCStore = require('../stores/NPCStore.js')
  , ItemStore = require('../stores/ItemStore.js')
  // , CraftStore = require('../stores/CraftStore.js')
  // , PetStore = require('../stores/PetStore.js');

var ItemGraphic = require('./ItemGraphic.jsx')
  , MobGraphic = require('./MobGraphic.jsx')
  , MobProperties = require('./MobProperties.jsx')
  , DebugParams = require('./DebugParams.jsx')
  // , ItemCraftTab = require('./ItemCraftTab.jsx')
  // , ItemProperties = require('./ItemProperties.jsx')
  // , PetsTable = require('./PetsTable.jsx');
  

var MobView = React.createClass({displayName: "MobView",
  mixins: [ Router.State ],
  render: function(){
    var id = this.getParams().mobId;
    var mob = MobStore.get(id);
    var cl = 'sheet_' + mob.img.sheet + ' mob_' + id;
    var dropRows =  _.sortByOrder(mob.params.drops, ['chance'],[false]).map(function(d,i){
      var item = ItemStore.getItem(d.id);
      return(React.createElement("tr", {key: "mobDropRow"+i}, 
        React.createElement("td", {key: "mobDropTd1"}, React.createElement(ItemGraphic, {item: item})), 
        React.createElement("td", {key: "mobDropTd2"}, React.createElement(Link, {to: "item", params: {itemId:item.id}}, item.n)), 
        React.createElement("td", {key: "mobDropTd3"}, numeral(d.chance*100).format('0.00'), "%")
      ))
    });
    var dropTable = mob.params.drops.length ? (
      React.createElement("table", {className: "table table-bordered table-striped"}, 
        React.createElement("thead", null, React.createElement("tr", null, 
          React.createElement("th", {key: "mobDropTh1", colSpan: "2"}, "Item"), 
          React.createElement("th", {key: "mobDropTh2"}, "%")
        )), 
        React.createElement("tbody", null, dropRows)
      )
    ) : (React.createElement("div", null, "No items dropped."))

    return (
      React.createElement("div", {className: "item-detail"}, 
        React.createElement("header", null, 
          React.createElement("div", {className: "item-icon panel panel-default pull-left"}, 
            React.createElement("div", {className: "panel-body"}, React.createElement("div", {className: cl}))
          ), 
          React.createElement("h1", null, 
            mob.n
          )
        ), 
        React.createElement("br", {className: "clearfix"}), 

        React.createElement("div", {className: "row"}, 
          React.createElement("div", {className: "col-md-4  col-xs-12 pull-right"}, 
            React.createElement("div", {className: "row-fluid"}, 
              React.createElement("div", {className: "col-xs-12 col-sm-6 col-md-12"}, React.createElement(MobProperties, {mob: mob})), 
              React.createElement("div", {className: "col-xs-12 col-sm-6 col-md-12"}, 
                React.createElement("div", {className: "panel panel-default"}, 
                  React.createElement("div", {className: "panel-heading"}, React.createElement("h3", {className: "panel-title"}, "Mob Maps")), 
                  React.createElement("div", {className: "panel-body"}, 
                    React.createElement("ul", null, Object.keys(mob.locations).map(function(m, i){
                      return(React.createElement("li", {key: "mobMap"+i}, m, " (", numeral(mob.locations[m]).format('0,0'), ")"))
                    }))
                  )
                )
              )
            ), 
            React.createElement("div", {className: "panel debug"}, "mob", React.createElement(DebugParams, {params: mob})), 
            React.createElement("div", {className: "panel debug"}, "params", React.createElement(DebugParams, {params: mob.params})), 
            React.createElement("div", {className: "panel debug"}, "temp", React.createElement(DebugParams, {params: mob.temp}))
        
          ), 
          React.createElement("div", {className: "col-md-8"}, 
            dropTable
          )
        )
      )
    )
  }
});
module.exports = MobView;
},{"../dispatcher/AppDispatcher.js":322,"../stores/ItemStore.js":333,"../stores/MobStore.js":335,"../util.js":341,"./DebugParams.jsx":288,"./ItemGraphic.jsx":295,"./MobGraphic.jsx":308,"./MobProperties.jsx":309,"lodash":6,"numeral":7,"react":280,"react-bootstrap/TabPane":52,"react-bootstrap/TabbedArea":53,"react-router":121}],308:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;

var MobGraphic = React.createClass({displayName: "MobGraphic",
  render: function() {
    if (!this.props.mob.img) {
      return (React.createElement("div", {className: "noMobImg"}));
    }
    var cl = 'sheet_' + this.props.mob.img.sheet + ' mob_' + this.props.mob.id;
    return this.props.nolink ? (React.createElement("div", {className: cl, title: this.props.mob.n})) 
      : (React.createElement(Link, {to: "mob", params: {mobId:this.props.mob.id}}, React.createElement("div", {className: cl, title: this.props.mob.n})))
  }
});

module.exports = MobGraphic;
},{"react":280,"react-router":121}],309:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var ItemProp = require('./ItemProperty.jsx');
var PetStore = require('../stores/PetStore.js');
var util=require('../util.js');

var MobProperties = React.createClass({displayName: "MobProperties",
  render: function(){
    var mob = this.props.mob;
    return (
      React.createElement("div", {className: "panel panel-default"}, 
        React.createElement("div", {className: "panel-heading"}, React.createElement("h3", {className: "panel-title"}, "Mob Stats")), 
        React.createElement("div", {className: "panel-body"}, 
          React.createElement("ul", {className: "list-group"}, 
            React.createElement(ItemProp, {key: "itemPropLevel", name: "Level", value: util.calcLevel(mob)}), 
            React.createElement(ItemProp, {key: "itemPropHP", name: "HP", value: mob.params.health}), 
            React.createElement(ItemProp, {key: "itemPropDEF", name: "Defense", value: mob.temp.total_defense}), 
            React.createElement(ItemProp, {key: "itemPropACC", name: "Accuracy", value: mob.temp.total_accuracy}), 
            React.createElement(ItemProp, {key: "itemPropSTR", name: "Strength", value: mob.temp.total_strength}), 
            React.createElement(ItemProp, {key: "itemPropAgro", name: "Aggressive", value: mob.params.aggressive ? 'Yes' : 'No', badgecl: mob.params.aggressive? 'badge text-danger' : 'badge text-success'})
          )
        )
      )
    );
  }
});

module.exports = MobProperties;

},{"../stores/PetStore.js":339,"../util.js":341,"./ItemProperty.jsx":299,"react":280,"react-router":121}],310:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var SearchStore = require('../stores/MobStore.js');
var MobWatchMixin = require('../mixins/MobWatchMixin.js');
var Constants = require('../constants/AppConstants.js');
var MobActions = require('../actions/MobActions.js');
var MobGraphic = require('./MobGraphic.jsx');
var ItemGraphic = require('./ItemGraphic.jsx');
var _ = require('lodash');
var HtmlSelect = require('./html/select.jsx');
var MapSelect = require('./MapSelect.jsx');
var util=require('../util.js');

function getSearchResults() {
  return {results:SearchStore.getResults(), filters:SearchStore.getFilters()};
}

var Mobs = React.createClass({displayName: "Mobs",
  mixins: [ Router.State, MobWatchMixin(getSearchResults) ],
  _toggleFilters: function(e) {
    e.preventDefault();
    MobActions.toggleFilters();
  },
  componentDidMount: function() {
    this.props.setPage('mobs')
  },
  _updateFilters: function() {
    var map = this.refs.mapFilter.getDOMNode();
    MobActions.setFilters({
      map: map.options[map.selectedIndex].text,
      levelMin: this.refs.filterLevelMin.getDOMNode().value,
      levelMax: this.refs.filterLevelMax.getDOMNode().value,
      strMin: this.refs.filterStrMin.getDOMNode().value,
      strMax: this.refs.filterStrMax.getDOMNode().value,
      accMin: this.refs.filterAccMin.getDOMNode().value,
      accMax: this.refs.filterAccMax.getDOMNode().value,
      defMin: this.refs.filterDefMin.getDOMNode().value,
      defMax: this.refs.filterDefMax.getDOMNode().value,
      HPMin: this.refs.filterHPMin.getDOMNode().value,
      HPMax: this.refs.filterHPMax.getDOMNode().value,
    });
  },
  render: function(){
    var results = (
      React.createElement("tbody", null, _.sortByAll(this.state.results, this.state.filters.orderBy).map(function(o,i){
        var locs = [];
        for (l in o.locations) {
          locs.push(l + ' (' + o.locations[l] + ')');
        }
        return (
          React.createElement("tr", {key: 'mobList' + o.id}, 
            React.createElement("td", {key: "mobListTd1", className: "vert-mid icon-td"}, React.createElement(MobGraphic, {mob: o})), 
            React.createElement("td", {key: "mobListTd2", className: "vert-mid"}, React.createElement(Link, {to: "mob", params: {mobId:o.id}}, o.n)), 
            React.createElement("td", {key: "mobListTd3", className: "vert-mid r"}, util.calcLevel(o)), 
            React.createElement("td", {key: "mobListTd4", className: "vert-mid r"}, o.params.health), 
            React.createElement("td", {key: "mobListTd5", className: "vert-mid r"}, o.temp.total_defense), 
            React.createElement("td", {key: "mobListTd6", className: "vert-mid r"}, o.temp.total_accuracy), 
            React.createElement("td", {key: "mobListTd7", className: "vert-mid r"}, o.temp.total_strength), 
            React.createElement("td", {key: "mobListTd8", className: "vert-mid", dangerouslySetInnerHTML: {__html:locs.join('<br />')}})
          )
        )
      })));

    var filterPanelBodyClass = 'panel-body' + (this.state.filters.show ? '' : ' hide');
    var cat1 = parseInt(this.state.filters.cat1);
    
    return (
    React.createElement("div", null, 
      React.createElement("article", {className: "context"}, 
        React.createElement("div", {className: "panel panel-default"}, 
          React.createElement("div", {className: "panel-heading"}, 
            React.createElement("div", {className: "pull-right button-toolbar"}, 
              React.createElement("div", {className: "button-group"}, 
                React.createElement("a", {onClick: this._toggleFilters, className: "btn btn-primary btn-xs", href: "#"}, "toggle filters")
              )
            ), 
            React.createElement("h2", {className: "panel-title"}, "Mobs")
          ), 
          React.createElement("div", {className: filterPanelBodyClass}, 
            React.createElement("form", {role: "form"}, 
              React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "cat1"}, "Map"), 
                    React.createElement(MapSelect, {onChange: this._updateFilters, ref: "mapFilter", defaultValue: "0"})
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "lvlMin"}, "Level Range"), 
                    React.createElement("div", {className: "row"}, 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {id: "lvlMin", type: "text", className: "form-control", ref: "filterLevelMin", onChange: this._updateFilters, defaultValue: this.state.filters.levelMin})), 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {type: "text", className: "form-control", ref: "filterLevelMax", onChange: this._updateFilters, defaultValue: this.state.filters.levelMax}))
                    )
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "hpMin"}, "HP Range"), 
                    React.createElement("div", {className: "row"}, 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {id: "hpMin", type: "text", className: "form-control", ref: "filterHPMin", onChange: this._updateFilters, defaultValue: this.state.filters.HPMin})), 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {type: "text", className: "form-control", ref: "filterHPMax", onChange: this._updateFilters, defaultValue: this.state.filters.HPMax}))
                    )
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "defMin"}, "Defense Range"), 
                    React.createElement("div", {className: "row"}, 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {id: "defMin", type: "text", className: "form-control", ref: "filterDefMin", onChange: this._updateFilters, defaultValue: this.state.filters.defMin})), 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {type: "text", className: "form-control", ref: "filterDefMax", onChange: this._updateFilters, defaultValue: this.state.filters.defMax}))
                    )
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "accMin"}, "Accuracy Range"), 
                    React.createElement("div", {className: "row"}, 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {id: "accMin", type: "text", className: "form-control", ref: "filterAccMin", onChange: this._updateFilters, defaultValue: this.state.filters.accMin})), 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {type: "text", className: "form-control", ref: "filterAccMax", onChange: this._updateFilters, defaultValue: this.state.filters.accMax}))
                    )
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "strMin"}, "Strength Range"), 
                    React.createElement("div", {className: "row"}, 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {id: "strMin", type: "text", className: "form-control", ref: "filterStrMin", onChange: this._updateFilters, defaultValue: this.state.filters.strMin})), 
                      React.createElement("div", {className: "col-sm-6"}, React.createElement("input", {type: "text", className: "form-control", ref: "filterStrMax", onChange: this._updateFilters, defaultValue: this.state.filters.strMax}))
                    )
                  )
                )
              )
            )
          )
        ), 
        React.createElement("table", {className: "search-results table table-striped table-bordered"}, 
          React.createElement("thead", null, React.createElement("tr", null, 
            React.createElement("th", {key: "th1", colSpan: "2"}, "Mob"), 
            React.createElement("th", {key: "th3", className: "r"}, "Level"), 
            React.createElement("th", {key: "th4", className: "r"}, "HP"), 
            React.createElement("th", {key: "th5", className: "r"}, "Def"), 
            React.createElement("th", {key: "th6", className: "r"}, "Accuracy"), 
            React.createElement("th", {key: "th7", className: "r"}, "Strength"), 
            React.createElement("th", {key: "th8"}, "Map(s)")
          )), 
          results
        )
      )
    )
    );
  }
});

module.exports = Mobs;

},{"../actions/MobActions.js":282,"../constants/AppConstants.js":321,"../mixins/MobWatchMixin.js":324,"../stores/MobStore.js":335,"../util.js":341,"./ItemGraphic.jsx":295,"./MapSelect.jsx":306,"./MobGraphic.jsx":308,"./html/select.jsx":320,"lodash":6,"react":280,"react-router":121}],311:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var SearchStore = require('../stores/MobStore.js');
var MobWatchMixin = require('../mixins/MobWatchMixin.js');
var Constants = require('../constants/AppConstants.js');
var MobActions = require('../actions/MobActions.js');
var MobGraphic = require('./MobGraphic.jsx');
var ItemGraphic = require('./ItemGraphic.jsx');
var _ = require('lodash');
var HtmlSelect = require('./html/select.jsx');

function getSearchResults() {
  return {results:SearchStore.getResults(), filters:SearchStore.getFilters()};
}

var Mobs = React.createClass({displayName: "Mobs",
  mixins: [ Router.State, MobWatchMixin(getSearchResults) ],
  _toggleFilters: function(e) {
    e.preventDefault();
    MobActions.toggleFilters();
  },
  
  render: function(){
    var maps = {}
    this.state.results.map(function(o,i){
        for (l in o.locations) {
          if (!maps[l]) { maps[l] = []; }
          maps[l].push({n:o.n,c:o.locations[l]});
        }
    });
    var keys = Object.keys(maps);

    var results = (
      React.createElement("div", null, keys.map(function(m,ii){
        var o = maps[m];
        var mobs = [];

        for (mob in o) {
          mobs.push( (React.createElement("li", {key: "mobMap"+mob}, o[mob].n + ' (' + o[mob].c + ')')) );
        }
        return (
          React.createElement("div", {key: 'map' + ii}, React.createElement("h4", null, "Mobs in ", m), React.createElement("ul", null, mobs))
        )
      })));

    
    return (
    React.createElement("div", null, 
      React.createElement("article", {className: "context"}, 
        React.createElement("h3", null, "Mobs by Map"), 
        results
      )
    )
    );
  }
});

module.exports = Mobs;

},{"../actions/MobActions.js":282,"../constants/AppConstants.js":321,"../mixins/MobWatchMixin.js":324,"../stores/MobStore.js":335,"./ItemGraphic.jsx":295,"./MobGraphic.jsx":308,"./html/select.jsx":320,"lodash":6,"react":280,"react-router":121}],312:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var numeral = require('numeral');
var TabbedArea = require('react-bootstrap/TabbedArea');
var TabPane = require('react-bootstrap/TabPane');
var AppDispatcher = require('../dispatcher/AppDispatcher.js');
var util = require('../util.js');
var _ = require('lodash');

var NPCStore = require('../stores/NPCStore.js')
  , ItemStore = require('../stores/ItemStore.js')
  // , CraftStore = require('../stores/CraftStore.js')
  // , PetStore = require('../stores/PetStore.js');

var ItemGraphic = require('./ItemGraphic.jsx')
  , DebugParams = require('./DebugParams.jsx')
  // , ItemCraftTab = require('./ItemCraftTab.jsx')
  // , ItemProperties = require('./ItemProperties.jsx')
  // , PetsTable = require('./PetsTable.jsx');
  

var NPCView = React.createClass({displayName: "NPCView",
  mixins: [ Router.State ],
  render: function(){
    var id = this.getParams().npcId;
    var npc = NPCStore.get(id);

    var itemRows =  npc.temp.content.map(function(d,i){
      var item = ItemStore.getItem(d.id);
      return(React.createElement("tr", {key: "npcStoreRow"+i}, 
        React.createElement("td", {key: "npcStoreTd1_"+i, style: {width:50}}, React.createElement(ItemGraphic, {item: item})), 
        React.createElement("td", {key: "npcStoreTd2_"+i}, React.createElement(Link, {to: "item", params: {itemId:item.id}}, item.n)), 
        React.createElement("td", {key: "npcStoreTd3_"+i}, numeral(d.count).format('0,0')), 
        React.createElement("td", {key: "npcStoreTd4_"+i, className: "hidden-xs"}, numeral(item.params.price).format('0,0')), 
        React.createElement("td", {key: "npcStoreTd5_"+i, className: "hidden-xs"}, numeral(Math.ceil(item.params.price/2)).format('0,0'))
      ))
    });

    var itemsTable = npc.temp.content.length ? (
      React.createElement("table", {className: "table table-bordered table-striped"}, 
        React.createElement("thead", null, React.createElement("tr", null, 
          React.createElement("th", {key: "npcItemTh1", colSpan: "2"}, "Item"), 
          React.createElement("th", {key: "npcItemTh2"}, "# Stocks"), 
          React.createElement("th", {key: "npcItemTh3", className: "hidden-xs"}, "Buy Price"), 
          React.createElement("th", {key: "npcItemTh4", className: "hidden-xs"}, "Sell Price")
        )), 
        React.createElement("tbody", null, itemRows)
      )
    ) : (React.createElement("div", null, "NPC does not stock any items."))

    var coords = npc.coords ? (React.createElement("div", null, npc.coords.x, ", ", npc.coords.y)) : '';
    return (
      React.createElement("div", {className: "item-detail"}, 
        React.createElement("header", null, 
          React.createElement("h1", null, 
            npc.n
          )
        ), 
        React.createElement("div", {className: "row"}, 
          React.createElement("div", {className: "col-md-3 col-xs-12 pull-right"}, 
            React.createElement("div", {className: "panel panel-default c"}, 
              React.createElement("div", {className: "panel-heading"}, React.createElement("h3", {className: "panel-title"}, "NPC Location")), 
              React.createElement("div", {className: "panel-body"}, React.createElement("b", null, npc.map), coords)
            ), 
            React.createElement("div", {className: "panel debug"}, "npc", React.createElement(DebugParams, {params: npc})), 
            React.createElement("div", {className: "panel debug"}, "temp", React.createElement(DebugParams, {params: npc.temp}))
          ), 
          React.createElement("div", {className: "col-md-9"}, 
          itemsTable
          )
        )
      )
    )
  }
});
module.exports = NPCView;
},{"../dispatcher/AppDispatcher.js":322,"../stores/ItemStore.js":333,"../stores/NPCStore.js":337,"../util.js":341,"./DebugParams.jsx":288,"./ItemGraphic.jsx":295,"lodash":6,"numeral":7,"react":280,"react-bootstrap/TabPane":52,"react-bootstrap/TabbedArea":53,"react-router":121}],313:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var SearchStore = require('../stores/NPCStore.js');
var NPCWatchMixin = require('../mixins/NPCWatchMixin.js');
var Constants = require('../constants/AppConstants.js');
var AppActions = require('../actions/AppActions.js');
var NPCActions = require('../actions/NPCActions.js');
var ItemGraphic = require('./ItemGraphic.jsx');
var _ = require('lodash');
var MapSelect = require('./MapSelect.jsx');

function getSearchResults() {
  return {results:SearchStore.getResults(), filters:SearchStore.getFilters()};
}

var Npcs = React.createClass({displayName: "Npcs",
  mixins: [ Router.State, NPCWatchMixin(getSearchResults) ],
  _toggleFilters: function(e) {
    e.preventDefault();
    NPCActions.toggleFilters();
  },
  _chooseMap: function() {
    var n = this.refs.mapFilter.getDOMNode();
    NPCActions.setMap(n.options[n.selectedIndex].text);
  },
  componentDidMount: function() {
    this.props.setPage('vendors')

  },
  
  render: function(){
    var results = (
      React.createElement("tbody", null, _.sortByAll(this.state.results, this.state.filters.orderBy).map(function(o,i){
        var coords = o.coords ? o.coords.x + ', ' + o.coords.y : '-';
        return (
          React.createElement("tr", {key: 'npc_' + o.id}, 
            React.createElement("td", {key: "td1"}, React.createElement(Link, {to: "npc", params: {npcId:o.id}}, o.n)), 
            React.createElement("td", {key: "td2"}, o.map), 
            React.createElement("td", {key: "td3"}, coords)
          )
        )
      })));

    var filterPanelBodyClass = 'panel-body' + (this.state.filters.show ? '' : ' hide');
    var cat1 = parseInt(this.state.filters.cat1);
    
    return (
    React.createElement("div", null, 
      React.createElement("article", {className: "context"}, 
        React.createElement("div", {className: "panel panel-default"}, 
          React.createElement("div", {className: "panel-heading"}, 
            React.createElement("div", {className: "pull-right button-toolbar"}, 
              React.createElement("div", {className: "button-group"}, 
                React.createElement("a", {onClick: this._toggleFilters, className: "btn btn-primary btn-xs", href: "#"}, "toggle filters")
              )
            ), 
            React.createElement("h2", {className: "panel-title"}, "Vendors")
          ), 
          React.createElement("div", {className: filterPanelBodyClass}, 
            React.createElement("form", {role: "form"}, 
              React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-sm-3"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "cat1"}, "Map"), 
                    React.createElement(MapSelect, {onChange: this._chooseMap, ref: "mapFilter", defaultValue: "0"})
                  )
                )
              )
            )
          )
        ), 
        React.createElement("table", {className: "search-results table table-striped table-"}, 
          React.createElement("thead", null, React.createElement("tr", null, 
            React.createElement("th", {key: "th1"}, "Name"), 
            React.createElement("th", {key: "th2"}, "Map"), 
            React.createElement("th", {key: "th3", style: {width:50}}, "Coords")
          )), 
          results
        )
      )
    )
    );
  }
});

module.exports = Npcs;

},{"../actions/AppActions.js":281,"../actions/NPCActions.js":283,"../constants/AppConstants.js":321,"../mixins/NPCWatchMixin.js":325,"../stores/NPCStore.js":337,"./ItemGraphic.jsx":295,"./MapSelect.jsx":306,"lodash":6,"react":280,"react-router":121}],314:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var ItemGraphic = require('./ItemGraphic.jsx')
var numeral = require('numeral');
var PetStore = require('../stores/PetStore.js')
  , ItemStore = require('../stores/ItemStore.js');

var PetEats = React.createClass({displayName: "PetEats",
  // mixins: [ Router.State ],
  render: function(){
    var eats = this.props.pet.params.eats;
    var eat = []
    for(var id in eats) {
      var eatsItem = ItemStore.getItem(id);
      eat.push(React.createElement("td", {className: "c"}, React.createElement(ItemGraphic, {item: eatsItem}), React.createElement("br", null), numeral(eats[id]*100).format('0')+'%', React.createElement("br", null), React.createElement("small", null, eatsItem.n)))
    }

    return (
      React.createElement("table", {className: "table"}, React.createElement("tr", null, eat))
    );
  }
});

module.exports = PetEats;

},{"../stores/ItemStore.js":333,"../stores/PetStore.js":339,"./ItemGraphic.jsx":295,"numeral":7,"react":280,"react-router":121}],315:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var ItemGraphic = require('./ItemGraphic.jsx')
var numeral = require('numeral');
var PetStore = require('../stores/PetStore.js')
  , ItemStore = require('../stores/ItemStore.js');

var PetEats = require('./PetEats.jsx');

var PetTable = React.createClass({displayName: "PetTable",
  // mixins: [ Router.State ],
  render: function(){

    var petName = function(n) {
      return n.replace(/ ?\[(Common|Rare|Legendary|Ancient)\]/, '');
    }

    if (!this.props.pets.length) {
      return (React.createElement("div", null, "There is no breeding information for this item"))
    }

    var petRows = [];
    var pairsSeen = [];
    for (var i in this.props.pets) {
      var a = this.props.pets[i];

      var p1 = PetStore.get(a.id);
      for (var j in a.params.likes) {
        var b = a.params.likes[j];
        var p2 = PetStore.get(b.pet_id);
        var time = Math.max(p1.params.happiness, p2.params.happiness);
        var breedingLevel = Math.max(p1.params.breeding_level, p2.params.breeding_level);
        if (!petRows[breedingLevel]) {
          petRows[breedingLevel] = [];
        }
        var parIndex = p1.id + '_' + p2.id;
        var parIndex2 = p2.id + '_' + p1.id;
        var rowSpan = b.returns.length;

        // weed out duplicates (eg, donkey & horror steed both eat hay.)
        if (pairsSeen.indexOf(parIndex)==-1 && pairsSeen.indexOf(parIndex2)==-1) {
          for (var k in b.returns) {
            var c =b.returns[k];
            var off = PetStore.get(c.pet_id);
            var maxChance = c.max_chance*100;
            var minChance = c.base_chance*100;
            if (pairsSeen.indexOf(parIndex)==-1) {
              pairsSeen.push(parIndex);
              var p1Eats, p2Eats;
              // if (!this.props.condensed) {
                p1Eats = (React.createElement(PetEats, {pet: p1}));
                p2Eats = (React.createElement(PetEats, {pet: p2}));
              // }
              
              petRows[breedingLevel].push(React.createElement("tr", {key: 'petRow'+i+'_'+j+'_'+k}, 
                React.createElement("td", {className: "c", rowSpan: rowSpan}, breedingLevel), 
                React.createElement("td", {className: "c", rowSpan: rowSpan}, 
                  React.createElement(Link, {to: "item", params: {itemId:p1.item_id}}, 
                    React.createElement(ItemGraphic, {item: ItemStore.getItem(p1.item_id), nolink: "1", cl: "centered-div"}), React.createElement("br", null), 
                    petName(p1.n)
                  ), 
                  p1Eats
                ), 
                React.createElement("td", {className: "c", rowSpan: rowSpan}, 
                  React.createElement(Link, {to: "item", params: {itemId:p2.item_id}}, 
                    React.createElement(ItemGraphic, {item: ItemStore.getItem(p2.item_id), nolink: "1", cl: "centered-div"}), React.createElement("br", null), 
                    petName(p2.n)
                  ), 
                  p2Eats
                ), 
                React.createElement("td", {className: "c"}, 
                  React.createElement(Link, {to: "item", params: {itemId:off.item_id}}, 
                    React.createElement(ItemGraphic, {item: ItemStore.getItem(off.item_id), nolink: "1", cl: "centered-div"}), React.createElement("br", null), 
                    petName(off.n)
                  )
                ), 
                React.createElement("td", {className: "c"}, numeral(minChance).format('0'), "%"), 
                React.createElement("td", {className: "c"}, numeral(maxChance).format('0'), "%"), 
                React.createElement("td", {className: "c"}, numeral(maxChance - minChance).format('0')), 
                React.createElement("td", {className: "c", rowSpan: rowSpan}, time), 
                React.createElement("td", {className: "r", rowSpan: rowSpan}, numeral(b.xp).format('0,0'))
              ));
            } else {
              petRows[breedingLevel].push(React.createElement("tr", {key: 'petRow'+i+'_'+j+'_'+k}, 
                React.createElement("td", {className: "c"}, 
                  React.createElement(Link, {to: "item", params: {itemId:off.item_id}}, 
                    React.createElement(ItemGraphic, {item: ItemStore.getItem(off.item_id), nolink: "1", cl: "centered-div"}), React.createElement("br", null), 
                    petName(off.n)
                  )
                ), 
                React.createElement("td", {className: "c"}, numeral(minChance).format('0'), "%"), 
                React.createElement("td", {className: "c"}, numeral(maxChance).format('0'), "%"), 
                React.createElement("td", {className: "c"}, numeral(maxChance - minChance).format('0'))
              ));
            }
          }
        }
      }
    }

    var heading = this.props.heading ? (React.createElement("h4", null, this.props.heading)) : '';
    return (
      React.createElement("div", null, heading, 
      React.createElement("table", {className: "table table-bordered"}, 
        React.createElement("thead", null, React.createElement("tr", null, 
          React.createElement("th", null, "Level"), 
          React.createElement("th", null, "Parent 1"), 
          React.createElement("th", null, "Parent 2"), 
          React.createElement("th", null, "Offspring"), 
          React.createElement("th", null, "% Min"), 
          React.createElement("th", null, "% Max"), 
          React.createElement("th", null, "Grass"), 
          React.createElement("th", null, "Time (min)"), 
          React.createElement("th", null, "Exp")
        )), 
        React.createElement("tbody", null, petRows.map(function(rows,breedingLevel){return rows;}))
      )
      )
    );
  }
});

module.exports = PetTable;

},{"../stores/ItemStore.js":333,"../stores/PetStore.js":339,"./ItemGraphic.jsx":295,"./PetEats.jsx":314,"numeral":7,"react":280,"react-router":121}],316:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var SearchStore = require('../stores/SearchStore.js');
var SearchWatchMixin = require('../mixins/SearchWatchMixin.js');
var Constants = require('../constants/AppConstants.js');
var AppActions = require('../actions/AppActions.js');
var ItemGraphic = require('./ItemGraphic.jsx');
var SearchItemTableRow = require('./SearchItemTableRow.jsx');

var ButtonGroup = require('react-bootstrap').ButtonGroup,
    Button = require('react-bootstrap').Button;

var HtmlSelect = require('./html/select.jsx');

function getSearchResults() {
  return {results:SearchStore.getResults(), filters:SearchStore.getFilters()};
}

var Search = React.createClass({displayName: "Search",
  mixins: [ Router.State, SearchWatchMixin(getSearchResults) ],
  componentDidMount: function() {
    this.props.setPage('items')
    
  },
  _toggleFilters: function(e) {
    e.preventDefault();
    AppActions.toggleFilters();
  },
  _handleCat1Change: function(e) {
    var n = this.refs.cat1.getDOMNode();
    AppActions.setCat1(n.options[n.selectedIndex].value);
  },
  _handleCat2Change: function(e) {
    var n = this.refs.cat2.getDOMNode();
    AppActions.setCat2(n.options[n.selectedIndex].value);
  },
  _handleSubCatChange: function(e) {
    var n = this.refs.cat2.getDOMNode();
    AppActions.setSubCat(n.options[n.selectedIndex].value);
  },
  _handleMinPriceChange: function(e) {
    AppActions.setPrice('min', this.refs.minPrice.getDOMNode().value);
  },
  _handleMaxPriceChange: function(e) {
    AppActions.setPrice('max', this.refs.maxPrice.getDOMNode().value);
  },
  _outputGrid: function(e) {
    if (this.state.filters.output == 'grid') return;
    AppActions.setOutputFormat('grid');
  },
  _outputTabled: function(e) {
    if (this.state.filters.output == 'tabled') return;
    AppActions.setOutputFormat('tabled');
  },
  render: function(){
    var format = this.state.filters.output;
    var results = this.state.results.map(function(o,i){
      return format == 'tabled' ? (React.createElement(SearchItemTableRow, {item: o, key: 'item_' + o.id})) : (
        React.createElement("li", {key: 'item_' + o.id}, 
          React.createElement(Link, {to: "item", params: {itemId:o.id}}, 
            React.createElement(ItemGraphic, {item: o, nolink: true}), React.createElement("br", null), 
            o.n
          )
        )
      );
    });

    var searchResults = format == 'grid' ? 
      (React.createElement("ul", {className: "search-results"}, results)) :
      (
        React.createElement("table", {className: "table table-bordered"}, React.createElement("thead", null, React.createElement("tr", {key: "head1"}, 
          React.createElement("th", {key: "sresTh1"}, "Level"), 
          React.createElement("th", {key: "sresTh2", colSpan: "2"}, "Item"), 
          React.createElement("th", {key: "sresTh3", className: "hidden-xs"}, "Skill"), 
          React.createElement("th", {key: "sresTh4", className: "hidden-xs"}, "Price"), 
          React.createElement("th", {key: "sresTh5", className: "hidden-xs"}, "Slot"), 
          React.createElement("th", {key: "sresTh6", className: "hidden-xs"}, "Power"), 
          React.createElement("th", {key: "sresTh7", className: "hidden-xs"}, "Aim"), 
          React.createElement("th", {key: "sresTh8", className: "hidden-xs"}, "Armor"), 
          React.createElement("th", {key: "sresTh9", className: "hidden-xs"}, "Magic"), 
          React.createElement("th", {key: "sresTh10", className: "hidden-xs"}, "Speed")
        )
        ), React.createElement("tbody", null, results))
      )

    var filterPanelBodyClass = 'panel-body' + (this.state.filters.show ? '' : ' hide');
    var cat2Select = '';
    var cat1 = parseInt(this.state.filters.cat1);

    switch(parseInt(cat1)) {
      case 0: // Armor
      case 2: // Jewelry
        cat2Select = (React.createElement("div", {className: "col-sm-3"}, 
          React.createElement("label", {htmlFor: "cat2"}, "Sub Category"), 
          React.createElement(HtmlSelect, {ref: "cat2", id: "cat2", 
            onChange: this._handleCat2Change, 
            defaultValue: this.state.filters.cat2, 
            options: Constants.subCats[cat1]})
          ));
        break;
      case 1: // Foods
      case 3: // Materials
      case 4: // Tools
      case 5: // Weapons
      case 8: // House
        cat2Select = (React.createElement("div", {className: "col-sm-3"}, 
          React.createElement("label", {htmlFor: "cat2"}, "Sub Category"), 
          React.createElement(HtmlSelect, {ref: "cat2", id: "cat2", 
            onChange: this._handleSubCatChange, 
            defaultValue: this.state.filters.subCat, 
            options: Constants.subCats[cat1]})
          ));
        break;
    }

    return (
    React.createElement("div", null, 
      React.createElement("article", {className: "context"}, 
        React.createElement("div", {className: "panel panel-default"}, 
          React.createElement("div", {className: "panel-heading"}, 
            React.createElement("div", {className: "pull-right button-toolbar"}, 
              React.createElement("div", {className: "button-group"}, 
                React.createElement("a", {onClick: this._toggleFilters, className: "btn btn-primary btn-xs", href: "#"}, "toggle filters")
              )
            ), 
            React.createElement("h2", {className: "panel-title"}, "Items")
          ), 
          React.createElement("div", {className: filterPanelBodyClass}, 
            React.createElement("form", {role: "form"}, 
              React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-sm-3"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "cat1"}, "Category"), 
                    React.createElement(HtmlSelect, {ref: "cat1", onChange: this._handleCat1Change, defaultValue: this.state.filters.cat1, options: Constants.itemCats})
                  )
                ), 
                cat2Select, 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "minPrice"}, "Min Price"), 
                    React.createElement("input", {type: "text", id: "minPrice", className: "form-control", 
                      ref: "minPrice", onChange: this._handleMinPriceChange, 
                      defaultValue: this.state.filters.minPrice})
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "maxPrice"}, "Max Price"), 
                    React.createElement("input", {type: "text", id: "maxPrice", className: "form-control", 
                      ref: "maxPrice", onChange: this._handleMaxPriceChange, 
                      defaultValue: this.state.filters.maxPrice})
                  )
                ), 
                React.createElement("div", {className: "col-sm-2"}, 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "outputFormat"}, "Output Format"), 
                     React.createElement(ButtonGroup, null, 
                      React.createElement(Button, {active: this.state.filters.output=='grid', onClick: this._outputGrid}, React.createElement("i", {className: "glyphicon glyphicon-th-large"})), 
                      React.createElement(Button, {active: this.state.filters.output=='tabled', onClick: this._outputTabled}, React.createElement("i", {className: "glyphicon glyphicon-th-list"}))
                    )
                  )
                )

              )
            )
          )
        ), 
        searchResults
      )
    )
    );
  }
});

module.exports = Search;

},{"../actions/AppActions.js":281,"../constants/AppConstants.js":321,"../mixins/SearchWatchMixin.js":327,"../stores/SearchStore.js":340,"./ItemGraphic.jsx":295,"./SearchItemTableRow.jsx":317,"./html/select.jsx":320,"react":280,"react-bootstrap":58,"react-router":121}],317:[function(require,module,exports){
var React = require('react');
var Router = require('react-router');
var Link = Router.Link;
var ItemGraphic = require('./ItemGraphic.jsx');
var util = require('../util.js');
var numeral = require('numeral');

var SearchItemTableRow = React.createClass({displayName: "SearchItemTableRow",
  render: function() {
    var item = this.props.item;
    return (
        React.createElement("tr", {key: "searchItemRow" + item.id}, 
          React.createElement("td", {key: 'srTd1'+item.id, className: "c"}, util.getItemLevel(item)), 
          React.createElement("td", {key: 'srTd2'+item.id}, React.createElement(ItemGraphic, {item: item}), React.createElement("br", null)), 
          React.createElement("td", {key: 'srTd3'+item.id}, React.createElement(Link, {to: "item", params: {itemId:item.id}}, item.n)), 
          React.createElement("td", {key: 'srTd4'+item.id, className: "hidden-xs"}, util.getItemSkill(item)), 
          React.createElement("td", {key: 'srTd5'+item.id, className: "r hidden-xs"}, util.valOrDash(numeral(item.params.price).format('0,0'))), 
          React.createElement("td", {key: 'srTd6'+item.id, className: "c hidden-xs"}, "-"), 
          React.createElement("td", {key: 'srTd7'+item.id, className: "c hidden-xs"}, util.valOrDash(item.params.power)), 
          React.createElement("td", {key: 'srTd8'+item.id, className: "c hidden-xs"}, util.valOrDash(item.params.aim)), 
          React.createElement("td", {key: 'srTd9'+item.id, className: "c hidden-xs"}, util.valOrDash(item.params.armor)), 
          React.createElement("td", {key: 'srTd10'+item.id, className: "c hidden-xs"}, util.valOrDash(item.params.magic)), 
          React.createElement("td", {key: 'srTd11'+item.id, className: "c hidden-xs"}, util.valOrDash(item.params.speed))
        )
    );
  }
});

module.exports = SearchItemTableRow;

},{"../util.js":341,"./ItemGraphic.jsx":295,"numeral":7,"react":280,"react-router":121}],318:[function(require,module,exports){
var React = require('react');

var ReactBootstrap = require('react-bootstrap')
  , Navbar = ReactBootstrap.Navbar
  , Nav = ReactBootstrap.Nav
  , DropdownButton = ReactBootstrap.DropdownButton
  , ListGroup = ReactBootstrap.ListGroup
  , ListGroupItem = ReactBootstrap.ListGroupItem
  , Input = ReactBootstrap.Input
  , Button = ReactBootstrap.Button
  , Badge = ReactBootstrap.Badge
  ;

var Router = require('react-router');
var InternalLink = Router.Link;

var ReactRouterBootstrap = require('react-router-bootstrap')
  , NavItemLink = ReactRouterBootstrap.NavItemLink
  , MenuItemLink = ReactRouterBootstrap.MenuItemLink
  // , ButtonLink = ReactRouterBootstrap.ButtonLink
  ;

// var OffCanvasNav = rqeuire('react-offcanvas');

var SearchStore = require('../stores/SearchStore.js')
  , MobStore = require('../stores/MobStore.js')
  , NPCStore = require('../stores/NPCStore.js')
;

var NavMixin = require('../mixins/NavMixin.js');

function getCounts() {
  return {
    items:SearchStore.getResults().length,
    mobs:MobStore.getResults().length,
    npcs:NPCStore.getResults().length
  };
}

var SiteNav = React.createClass({displayName: "SiteNav",
  mixins: [ 
    NavMixin(getCounts),
    Router.Navigation,
    Router.State,
  ],
  onSubmit: function(e) {
    e.preventDefault();
    this.props.onSearch(this.refs.q.getInputDOMNode().value)
  },
  componentDidMount: function(){
//    this.refs.q.getInputDOMNode().focus();
  },
  _resetAndSearch: function(page) {
    this.props.setLoading(true);
    this.props.onSearch(this.refs.q.getInputDOMNode().value, page);
  },
  navClick: function(href) {
    if (href != this.getPathname()) {
      var _self = this;
      this.props.setLoading(true);
      this.props.closeNav(function(){
        // small delay on loading to allow CSS animation to complete on mobile.
        // consider using react-responsive to only do this as needed.
        window.setTimeout(function(){
          _self.transitionTo(href);  
        }, 600)
      });
    }
  },
  closeNav: function(e) {
    e.preventDefault();
    this.props.closeNav();
  },
  itemsClick: function() {
    this._resetAndSearch('items');
  },
  mobsClick: function() {
    this._resetAndSearch('mobs');
  },
  npcsClick: function() {
    this._resetAndSearch('vendors');
  },
  render: function(){
    var _self = this;
    var cl = this.props.showNav ? 'site-nav' : 'site-nav inactive-nav'
    cl = '';

    return (
      React.createElement("nav", {className: cl, id: "site-nav"}, 
        React.createElement("h4", null, 
          React.createElement("a", {href: "#", className: "pull-right visible-sm-inline visible-xs-inline", onClick: this.closeNav}, React.createElement("i", {className: "glyphicon glyphicon-remove-circle"})), 
          React.createElement("a", {href: "#"}, "modb")
        ), 
        React.createElement("form", {className: "", role: "search", onSubmit: this.onSubmit}, 
           React.createElement("div", {className: "form-group"}, 
            React.createElement(Input, {type: "text", ref: "q", placeholder: "Search", defaultValue: this.props.q, buttonAfter: React.createElement(Button, {type: "submit"}, React.createElement("i", {className: "glyphicon glyphicon-search"}))})
          )
        ), 
        React.createElement(ListGroup, null, 
          React.createElement(ListGroupItem, {href: "#/items", onClick: this.navClick.bind(_self, '/items')}, "Items ", React.createElement(Badge, {className: "pull-right"}, this.state.items)), 
          React.createElement(ListGroupItem, {href: "#/mobs", onClick: this.navClick.bind(_self, '/mobs')}, "Mobs ", React.createElement(Badge, {className: "pull-right"}, this.state.mobs)), 
          React.createElement(ListGroupItem, {href: "#/vendors", onClick: this.navClick.bind(_self, '/vendors')}, "Vendors ", React.createElement(Badge, {className: "pull-right"}, this.state.npcs)), 
          React.createElement(ListGroupItem, {href: "#/breeding"}, "Breeding")
        )
      )
    );
  }
});

module.exports = SiteNav;

/*
        <Navbar brand={brand} staticTop className="bs-docs-nav" role="banner" toggleNavKey={0}>
          <form className="navbar-form navbar-right" action="/items" role="search" onSubmit={this.onSubmit}>
             <div className="form-group">
              <input type="text" className="form-control" name="q" ref="q" placeholder="Search" defaultValue={this.props.q} />
            </div>
            <button type="submit" className="btn btn-default">Go</button>
          </form>
          <Nav className="bs-navbar-collapse" role="navigation" eventKey={0} id="top">
            <NavItemLink to="search" onClick={this.itemsClick}>Items</NavItemLink>
            <DropdownButton eventKey={2} title="NPCs">
              <MenuItemLink to="mobs" eventKey="1">Mobs</MenuItemLink>
              <MenuItemLink to="npcs" eventKey="2">Vendors</MenuItemLink>
            </DropdownButton>
            <DropdownButton eventKey={3} title="Skills">
              <MenuItemLink to="breeding" eventKey="1" to="breeding">Breeding</MenuItemLink>
            </DropdownButton>
          </Nav>
        </Navbar>
*/
},{"../mixins/NavMixin.js":326,"../stores/MobStore.js":335,"../stores/NPCStore.js":337,"../stores/SearchStore.js":340,"react":280,"react-bootstrap":58,"react-router":121,"react-router-bootstrap":93}],319:[function(require,module,exports){
var React = require('react');
var Router = require('react-router'); 
var Link = Router.Link;
var Panel = require('react-bootstrap').Panel;

var Todos = React.createClass({displayName: "Todos",
  getInitialState: function(){
    return {
      showTodoDesc: false,
      activeTodos:{}
    }
  },
  toggleTodoDesc: function() {
    this.setState({
      showTodoDesc: !this.state.showTodoDesc,
    });
  },
  clickTodo: function(idx, e) {
    e.preventDefault();
    var active = this.state.activeTodos;
    if (!active[idx]) {
      active[idx] = true;
    } else {
      active[idx] = !active[idx];
    }
    this.setState({activeTodos:active})
    e.target.blur()
  },
  render: function(){

    var todos = [
      {
        cat: 'Items',
        title: 'Items',
        desc: 'Search and filter all items in MO RPG.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Sub-Categories',
        desc: 'For almost every category of items, new sub-categories have been added',
        done: true
      },
      {
        cat: 'Items',
        title: 'Vendors & drops',
        desc: 'View vendors to buy/sell items from, and mobs that drop them.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Item Crafting',
        desc: 'View crafting recipe for items, including pattern for forged items. Also view see any items the item is a material for.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Item Enchanting',
        desc: 'View enchanting info for all items, including the full enchant chain for items like the <a href="#/items/1327">Boar Spear</a>.',
        done: true
      },
      {
        cat: 'Items',
        title: 'List View',
        desc: 'Let users switch between grid & list view on output.',
        done: true
      },
      {
        cat: 'Items',
        title: 'Maps & Coordinates',
        desc: 'Add map locations and coordinates for vendors, and map locations for mobs.',
        done: true
      },
      {
        cat:'Pets',
        title:'Pets',
        desc: 'Search, filter and view all pets in the MO RPG world.',
      },
      {
        cat: 'Pets',
        title: 'Parent Pets',
        desc: 'For Parent Pets, view info about breeding including foods they eat, other pets they breed with and their offspring.',
      },
      {
        cat: 'Pets',
        title: 'Offspring',
        desc: 'For offspring, view what set of parents breeds them.',
      },
      {
        cat: 'Pets',
        title: 'Leveled Pets',
        desc: 'For pets that grow/evolve into parent pets, view the breeding info about those steps.',
      },
      {
        cat:'Mobs',
        title:'Mobs',
        desc: 'Filter and view all mobs in the MO RPG world.',
        done: true
      },
      {
        cat: 'Mobs',
        title: 'Mob Drops',
        desc: 'View all items a mob drops.',
        done: true
      },
      {
        cat: 'Mobs',
        title: 'Mob/Vendor Maps',
        desc: 'Include links to high-res maps the monsters and vendors are on.'
      },
      {
        cat:'Vendors',
        title:'Vendors',
        desc: 'Filter and view all Vendors in the MO RPG world.',
        done: true
      },
      {
        cat:'General',
        title:'Search Mobs & Vendors',
        desc: 'Make the search box affect all 3 areas, not just items.',
        done: true
      },    
      {
        cat:'General',
        title:'Touch Support',
        desc: 'Added better touch support for mobile devices.',
        done: true
      },    
      {
        cat:'General',
        title:'Loading Indicators',
        desc: 'Add spinning icon to indicate pages are loading/rendering.',
        done: true
      },    
      {
        cat:'General',
        title:'Moar Mobile Friendly',
        desc: 'Off-canvas navigation and other mobile friendly features added.',
        done: true
      },    
      {
        cat:'General',
        title:'Better bookmark support',
        desc: 'Provide better support bookmarking & sending links. (eg, having URL update as filters are changed.)'
          
      },    
    ];
    var _self = this;

    return (
    React.createElement("div", null, 
      React.createElement("article", {className: "context"}, 
        React.createElement("h2", null, "Todo List"), 
        React.createElement("small", null, React.createElement("a", {href: "#", onClick: this.toggleTodoDesc, className: "btn btn-primary btn-xs"}, "Toggle Todo Descriptions")), 
        React.createElement("ul", null, 
          todos.map(function(todo,i){
            var cl = '';
            var title = todo.title;
            if (todo.done) {
              title += ' (done)';
              cl = 'done text-success'
            } else {
              cl = 'text-warning'
            }
            var desc = _self.state.showTodoDesc || _self.state.activeTodos[i] ? (React.createElement("div", {className: "text-muted", dangerouslySetInnerHTML: {__html:todo.desc}})) : '';
            return (
              React.createElement("li", {className: cl, key: "todo"+i}, 
                React.createElement("strong", null, React.createElement("a", {className: cl, href: "#", onClick: _self.clickTodo.bind(_self,i)}, title)), 
                desc
              )
            )
          })
        )
      )
    )
    );
  }
});

module.exports = Todos;

},{"react":280,"react-bootstrap":58,"react-router":121}],320:[function(require,module,exports){
var React = require('react');

var HtmlSelect = React.createClass({displayName: "HtmlSelect",

  render: function() {
    var opts = this.props.options;
    if (!(opts instanceof Array)) {
      var oo = opts;
      opts = [];
      var kk = Object.keys(oo);
      for (var i=0,maxI=kk.length;i<maxI;i++) {
        opts[kk[i]] = oo[kk[i]];
      }
    }
    return(
      React.createElement("select", {ref: this.props.ref, onChange: this.props.onChange, 
        value: this.props.defaultValue, className: "form-control"}, 
        React.createElement("option", {key: "nullValue", value: "-1"}), 
        opts.map(function(v,k){
          return (
            React.createElement("option", {key: k, value: k}, v)
          );
        })
      )
    )
  }
});

module.exports = HtmlSelect;
},{"react":280}],321:[function(require,module,exports){
var React = require('react');

var keyMirror = require('react/lib/keyMirror');

var obj = {
  ActionTypes: keyMirror({
    APP_INITIALIZE: null,
    APP_RESET: null,
    SWITCH_PAGE: null,

    SEARCH: null,
    SET_SEARCH_CAT1: null,
    SET_SEARCH_CAT2: null,
    SET_SEARCH_SUB_CAT: null,
    SET_MIN_PRICE: null,
    SET_MAX_PRICE: null,
    TOGGLE_FILTERS: null,

    SEARCH_NPCS: null,
    NPCS_BY_ITEM: null,
    TOGGLE_VENDOR_FILTERS: null,
    SET_NPC_MAP: null,

    SEARCH_MOBS: null,
    SET_MOB_FILTERS: null,
    MOBS_BY_ITEM: null,
    TOGGLE_MOB_FILTERS: null,
    SET_MOB_MAP: null,

    SEARCH_PETS: null,
    SEARCH_CRAFTS: null,
    SET_OUTPUT_FORMAT: null,

  }),
  Icons: {
    vendorTab: (React.createElement("i", {className: "fa fa-users"})),
    dropsTab: (React.createElement("i", {className: "fa fa-bug"})),
    craftTab: (React.createElement("i", {className: "fa fa-diamond"})),
    enchantTab: (React.createElement("i", {className: "fa fa-flash"})),
    breedingTab: (React.createElement("i", {className: "fa fa-linux"})),
  },
  Breakpoints: {
    xs: 768,
    sm: 992,
    md: 1200,
  },
  maps:["Dorpat", "Dungeon", "Narwa", "Whiland", "Reval", "Rakblood", "Blood River", "Hell", "Clouds", "Heaven", "Cesis", "Walco", "Tutorial Island", "Pernau", "Fellin", "Dragon's Lair", "No Man's Land", "Ancient Dungeon", "Lost Woods", "Minigames", "Broceliande Forest", "Devil's Triangle", "Cathedral", "Illusion Guild"],
  itemCats:["Armor","Food","Jewelry","Material","Tool","Weapon","Spell","Pet","House"],
  subCats: {
    0: { // Armor
      0: 'Head',
      1: 'Back',
      2: 'Chest',
      3: 'Off Hand',
      5: 'Hands',
      6: 'Boots',
      11: 'Legs',
    },
    1: { // Food
      0: 'Cooked Food',
      1: 'Specialty Dishes',
      2: 'Potions',
      3: 'Event Items',
      4: 'Ingredients',
    },
    2: { // Jewelry 
      7: 'Neck',
      8: 'Ring',
    },
    3: { // Materials
      0: 'Bars',
      1: 'Bones',
      2: 'Chunks/Ore',
      3: 'Dust',
      4: 'Eggs',
      5: 'Enchanting',
      6: 'Eyes',
      7: 'Fabrics',
      8: 'Fangs/Beaks',
      9: 'Feathers',
      10: 'Gems',
      11: 'Horns',
      12: 'Leather',
      13: 'Farmed Items',
      14: 'Marks',
      15: 'Orbs',
      16: 'Presents',
      17: 'Raw Foods',
      18: 'Scales',
      19: 'Seeds',
      20: 'Shrooms',
      21: 'Teleports',
      22: 'Vials',
      23: 'Wood',
      99: 'Other'
    },
    4: { // Tools
      0: 'Tools',
      1: 'Pouches',
      2: 'Medallions',
      3: 'Permission Slips',
    },
    5: { // Weapons
      0: '1-Handed',
      1: '2-Handed',
      2: 'Wands/Staffs',
      3: 'Keys',
      4: 'Event Items'
    },
    6: { // Spells
      
    },
    7: { // Pets

    },
    8: { // House
      0: 'Beds',
      1: 'Cabinets',
      2: 'Chairs',
      3: 'Chests',
      4: 'Floors',
      5: 'Tables',
      6: 'Walls',
      7: 'Specialty Items',

    }
  },
  mobParamsKeyMap: {
    combat_level: "Level",
    health: "HP",
  },
  itemParamsKeyMap: {
    min_defense: "Defense Required",
    min_strength: "Strength Required",
    min_magic: "Magic Required",
    min_health: "Health Required",
    armor: "Armor",
    aim: "Aim",
    power: "Power",
    magic: "Magic",
    speed: "Speed",
    min_cooking: "Cooking",
    min_alchemy: "Alchemy",
    min_jewelry: "Jewelry",
    min_forging: "Forging",
    min_carpentry: "Carpentry",
    min_farming: "Farming",
  },
  itemSlots: {
    0: 'Head',
    1: 'Back',
    2: 'Chest',
    3: 'Off Hand',
    4: 'Main Hand',
    5: 'Hands',
    6: 'Boots',
    7: 'Neck',
    8: 'Ring',
    11: 'Legs',
    14: 'Potion'
  },
  PayloadSources: keyMirror({
    VIEW_ACTION: null
  }),

  Pages: keyMirror({
    HOME: null,
    SEARCH: null,
    ITEM: null,
    NOT_FOUND: null
  }),

  LayoutConfig: {
    // Keep in sync with `server/constants/ServerConstants.js`
    ROOT_ELEMENT_ID: 'ReactRootElement'
  },
  sheets: [
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgiso32_anvil.gif?f61f376221c3fe1dea3f4bb8c39207f2rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_classm32.gif?22b176a3c34bfbdd303ab24b0675b49crpg.mo.ee"
    },
    {
        "w": 54,
        "h": 34,
        "u": "https://rpgssl.r.worldssl.net/sheet/ground.gif?30b533254c058f47580c3124c2412d85rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/townactions.gif?d2cabb3b664c5c76559f5b7b99e1dcbarpg.mo.ee"
    },
    {
        "w": 854,
        "h": 24,
        "u": "https://rpgssl.r.worldssl.net/gui.png?b5e9e0f058021a7bc8208462effe8004rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster132.gif?8c2593ddf9c17b0d502c353947461deerpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgweapon32.gif?81e225ef3de2f587fa7ab3896d21c506rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_armor32.gif?22eb32e7e8252655b91e205a3d7e0d61rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_food32.gif?80cfd7aaf17404a04e6ca57872eeeba1rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/tools.gif?41fc47a2d5b8f371902cab50f06279fdrpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/fish_new32.gif?7cc807d2c52911c282d6f78a8dad2827rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgmisc32.gif?62fa3014a3fbfbe17b4c4d6e39c378f8rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_undead32.gif?5aa0bf60bd60328e58d7cbfa3b1a25bdrpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_jewls32.gif?f19d4e9fc49bbed856246408f36d0d62rpg.mo.ee"
    },
    {
        "w": 54,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/big_stuff.gif?5e2a64a066d8d049cfa797ffd403e65frpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_dragon32.gif?3126ec8f0a0a4d819c8fd5868c5568b6rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster432.gif?dae4547bdb8044ffcf08a91491e25017rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster232.gif?d99eb5506b0405485c87846cc48922aerpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster732.gif?1d83cd94fa15a0b7124db3c88dfc01f5rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster632.gif?e0bb22f6719da9a189e487a48a20ef56rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_uniques32.gif?ede6af17cab027c12cbe515147d7485drpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_humans32.gif?26e7ecdd21a060311edc422cc0d05617rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/alchemyitems2.gif?48378a45b80c4b2ff4adf0a5ad9dbaa0rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster532.gif?fee48d8a692498521f20c2b8051cfe91rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dg_monster332.gif?7f655fead6c6683c6b6c07b8f8ad1e35rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/heads.gif?a4e0dd62ca9e318430c8fdb43e1ee2f4rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/facial_hair.gif?1b389be5a4f135a351c31be20ce01b98rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/bodys.gif?212421cce41f28207091192c746badderpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/pants.gif?bfcf4cb2a8f106778f8424f3b2f88f38rpg.mo.ee"
    },
    {
        "w": 64,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/capes.gif?98ba2083cddca9ef8d80df9068fbddc7rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/left_hands.gif?ba1889643015f63546b24cfcf18cc4f8rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/right_hands.gif?793475e1b2132ad3a4fc3f45097137dbrpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/shields.gif?f8146638b4130303e4a2aca3b604ece3rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/weapons.gif?b21dd88639ff3e4c00f4ded5b8a0af62rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/helmets.gif?fcbaf2d63d35a98681e6de5c75aef777rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/boots.gif?da83e063b1e0064b15457c7004138825rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/magic.gif?3c5686cd779f2ac3d903f9d4b726a0e1rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/mspell.gif?6ec440cac5d1a9b3f338eb210ebc1175rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/sicos.gif?a296010c1cc60f92dd5cc97c1c1aed6arpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/mweapons.gif?c474d3b0973ca7c476648c713792b3bbrpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/animals.gif?c6fe6b90dea1ae0d769db4a17a98d6ffrpg.mo.ee"
    },
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/newworld2.gif?0d1827c3f861deb381b2ce18b5094204rpg.mo.ee"
    },
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/ground_tops.gif?a55dadc6afeb2aa6f7f675c9ce65bd94rpg.mo.ee"
    },
    {
        "w": 64,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/boss.gif?94b1edaca4001bb0e422eb91566c406brpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/pets.gif?ce81f547b81fccfc0f93525b0cb36bd5rpg.mo.ee"
    },
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/pots_crates.gif?3d99637d2738e3ae23c04703801d87carpg.mo.ee"
    },
    {
        "w": 576,
        "h": 335,
        "u": "https://rpgssl.r.worldssl.net/sheet/big_pyramid.gif?5a98089c5906eb4d729986654a44bdd5rpg.mo.ee"
    },
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/house.gif?9fa66ff575efc5bcff397c52fb60e241rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/house_inv.gif?86583c8cd7352bf2a8abce17940ea10crpg.mo.ee"
    },
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/farming_products.gif?200ae96091b352fc5ee544d89e7f9f59rpg.mo.ee"
    },
    {
        "w": 46,
        "h": 46,
        "u": "https://rpgssl.r.worldssl.net/sheet/wearable/weapons2h.gif?db6882ed3b97af768e9810cd0270dc3erpg.mo.ee"
    },
    {
        "w": 64,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/halloween.gif?f0cb8b948f34abd9e2b99baac244c6d3rpg.mo.ee"
    },
    {
        "w": 54,
        "h": 34,
        "u": "https://rpgssl.r.worldssl.net/sheet/ground2.gif?551fe5b46e91f4c119e2b5b22b40bd96rpg.mo.ee"
    },
    {
        "w": 596,
        "h": 544,
        "u": "https://rpgssl.r.worldssl.net/sheet/cathedral.gif?262ea93f911e987b4752325368d46b0crpg.mo.ee"
    },
    {
        "w": 54,
        "h": 49,
        "u": "https://rpgssl.r.worldssl.net/sheet/newworld3.gif?6b5eb2a2d7145e12db75f15c1d0e5a21rpg.mo.ee"
    },
    {
        "w": 64,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/boss2.gif?5fb8bc3d6d84060adf00782d317167carpg.mo.ee"
    },
    {
        "w": 64,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/boss3.gif?0fc5e8d38832e198acfbe3708d6388ebrpg.mo.ee"
    },
    {
        "w": 64,
        "h": 64,
        "u": "https://rpgssl.r.worldssl.net/sheet/boss4.gif?367ad629bd58725acaf98734fc8d233drpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgmisc2.gif?074856fb20739a92e4b53d588dfc5872rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgmisc3.gif?752a74d31aef5ed26c5245ea7222928drpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgmisc4.gif?0175772c4218e5936e1d28229e3e53f2rpg.mo.ee"
    },
    {
        "w": 32,
        "h": 32,
        "u": "https://rpgssl.r.worldssl.net/sheet/dgmisc5.gif?d30f1b761d24627899fe15ae1b1fbed7rpg.mo.ee"
    }
]
};
obj.itemCatMap = {};
obj.itemCats.map(function(item,idx){
  obj.itemCatMap[item.toUpperCase()] = idx;
});

module.exports = obj;

// // Stuff to make drawBody work
// window.BODY_PARTS = {"HEADS":{"0":{"img":{"sheet":"26","x":0,"y":0},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"1":{"img":{"sheet":"26","x":1,"y":0},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"2":{"img":{"sheet":"26","x":3,"y":0},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"3":{"img":{"sheet":"26","x":4,"y":0},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"4":{"img":{"sheet":"26","x":5,"y":0},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"5":{"img":{"sheet":"26","x":6,"y":0},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"6":{"img":{"sheet":"26","x":7,"y":0}},"7":{"img":{"sheet":"26","x":8,"y":0}},"8":{"img":{"sheet":"26","x":9,"y":0}},"9":{"img":{"sheet":"26","x":0,"y":1}},"10":{"img":{"sheet":"26","x":1,"y":1}},"11":{"img":{"sheet":"26","x":2,"y":1}},"12":{"img":{"sheet":"26","x":3,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"13":{"img":{"sheet":"26","x":4,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"14":{"img":{"sheet":"26","x":5,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"15":{"img":{"sheet":"26","x":6,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"16":{"img":{"sheet":"26","x":7,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"17":{"img":{"sheet":"26","x":8,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"18":{"img":{"sheet":"26","x":9,"y":1},"available":true,"facial_hairs":[0,1,2,3,4,5,6,7]},"19":{"img":{"sheet":"26","x":0,"y":2}}},"BODIES":{"0":{"img":{"sheet":"28","x":0,"y":0},"available":true},"1":{"img":{"sheet":"28","x":1,"y":0},"available":true},"2":{"img":{"sheet":"28","x":3,"y":0},"available":true},"3":{"img":{"sheet":"28","x":4,"y":0},"available":true},"4":{"img":{"sheet":"28","x":5,"y":0},"available":true},"5":{"img":{"sheet":"28","x":6,"y":0},"available":true},"6":{"img":{"sheet":"28","x":7,"y":0},"available":true},"7":{"img":{"sheet":"28","x":8,"y":0},"available":true},"8":{"img":{"sheet":"28","x":9,"y":0},"available":true},"9":{"img":{"sheet":"28","x":0,"y":1},"available":true},"10":{"img":{"sheet":"28","x":1,"y":1}},"11":{"img":{"sheet":"28","x":2,"y":1}},"12":{"img":{"sheet":"28","x":3,"y":1}},"13":{"img":{"sheet":"28","x":4,"y":1}},"14":{"img":{"sheet":"28","x":5,"y":1}},"15":{"img":{"sheet":"28","x":6,"y":1}},"16":{"img":{"sheet":"28","x":7,"y":1}},"17":{"img":{"sheet":"28","x":8,"y":1}},"18":{"img":{"sheet":"28","x":9,"y":1}},"19":{"img":{"sheet":"28","x":0,"y":2}},"20":{"img":{"sheet":"28","x":1,"y":2}},"21":{"img":{"sheet":"28","x":2,"y":2}},"22":{"img":{"sheet":"28","x":3,"y":2}},"23":{"img":{"sheet":"28","x":4,"y":2}},"24":{"img":{"sheet":"28","x":5,"y":2}},"25":{"img":{"sheet":"28","x":6,"y":2}},"26":{"img":{"sheet":"28","x":7,"y":2}},"27":{"img":{"sheet":"28","x":8,"y":2}},"28":{"img":{"sheet":"28","x":9,"y":2}},"29":{"img":{"sheet":"28","x":0,"y":3}},"30":{"img":{"sheet":"28","x":1,"y":3}},"31":{"img":{"sheet":"28","x":2,"y":3}},"32":{"img":{"sheet":"28","x":3,"y":3}},"33":{"img":{"sheet":"28","x":4,"y":3}},"34":{"img":{"sheet":"28","x":5,"y":3}},"35":{"img":{"sheet":"28","x":6,"y":3}},"36":{"img":{"sheet":"28","x":7,"y":3}},"37":{"img":{"sheet":"28","x":8,"y":3}},"38":{"img":{"sheet":"28","x":9,"y":3}},"39":{"img":{"sheet":"28","x":0,"y":4}},"40":{"img":{"sheet":"28","x":1,"y":4}},"41":{"img":{"sheet":"28","x":2,"y":4}},"42":{"img":{"sheet":"28","x":3,"y":4}},"43":{"img":{"sheet":"28","x":4,"y":4}},"44":{"img":{"sheet":"28","x":5,"y":4}},"45":{"img":{"sheet":"28","x":6,"y":4}},"46":{"img":{"sheet":"28","x":7,"y":4}},"47":{"img":{"sheet":"28","x":8,"y":4}},"48":{"img":{"sheet":"28","x":9,"y":4}},"49":{"img":{"sheet":"28","x":0,"y":5}},"50":{"img":{"sheet":"28","x":1,"y":5}},"51":{"img":{"sheet":"28","x":2,"y":5}},"52":{"img":{"sheet":"28","x":3,"y":5}},"53":{"img":{"sheet":"28","x":4,"y":5}},"54":{"img":{"sheet":"28","x":5,"y":5}},"55":{"img":{"sheet":"28","x":6,"y":5}},"56":{"img":{"sheet":"28","x":7,"y":5}},"57":{"img":{"sheet":"28","x":8,"y":5}},"58":{"img":{"sheet":"28","x":9,"y":5}},"59":{"img":{"sheet":"28","x":0,"y":6}},"60":{"img":{"sheet":"28","x":1,"y":6}},"61":{"img":{"sheet":"28","x":2,"y":6}},"62":{"img":{"sheet":"28","x":3,"y":6}},"63":{"img":{"sheet":"28","x":4,"y":6}},"64":{"img":{"sheet":"28","x":5,"y":6}},"65":{"img":{"sheet":"28","x":6,"y":6}},"66":{"img":{"sheet":"28","x":7,"y":6}},"67":{"img":{"sheet":"28","x":8,"y":6}},"68":{"img":{"sheet":"28","x":9,"y":6}},"69":{"img":{"sheet":"28","x":0,"y":7}},"70":{"img":{"sheet":"28","x":1,"y":7}},"71":{"img":{"sheet":"28","x":2,"y":7}},"72":{"img":{"sheet":"28","x":3,"y":7}},"73":{"img":{"sheet":"28","x":4,"y":7}},"74":{"img":{"sheet":"28","x":5,"y":7}},"75":{"img":{"sheet":"28","x":6,"y":7}},"76":{"img":{"sheet":"28","x":7,"y":7}},"77":{"img":{"sheet":"28","x":8,"y":7}},"78":{"img":{"sheet":"28","x":9,"y":7}},"79":{"img":{"sheet":"28","x":0,"y":8}},"80":{"img":{"sheet":"28","x":1,"y":8}},"81":{"img":{"sheet":"28","x":2,"y":8}},"82":{"img":{"sheet":"28","x":3,"y":8}},"83":{"img":{"sheet":"28","x":4,"y":8}},"84":{"img":{"sheet":"28","x":5,"y":8}},"85":{"img":{"sheet":"28","x":6,"y":8}},"86":{"img":{"sheet":"28","x":7,"y":8}},"87":{"img":{"sheet":"28","x":8,"y":8}},"88":{"img":{"sheet":"28","x":9,"y":8}},"89":{"img":{"sheet":"28","x":0,"y":9}},"90":{"img":{"sheet":"28","x":1,"y":9}},"91":{"img":{"sheet":"28","x":2,"y":9}},"92":{"img":{"sheet":"28","x":3,"y":9}}},"PANTS":{"0":{"img":{"sheet":"29","x":0,"y":0},"available":true},"1":{"img":{"sheet":"29","x":1,"y":0},"available":true},"2":{"img":{"sheet":"29","x":3,"y":0},"available":true},"3":{"img":{"sheet":"29","x":4,"y":0},"available":true},"4":{"img":{"sheet":"29","x":5,"y":0},"available":true},"5":{"img":{"sheet":"29","x":6,"y":0},"available":true},"6":{"img":{"sheet":"29","x":7,"y":0},"available":true},"7":{"img":{"sheet":"29","x":8,"y":0},"available":true},"8":{"img":{"sheet":"29","x":9,"y":0},"available":true},"9":{"img":{"sheet":"29","x":0,"y":1},"available":true},"10":{"img":{"sheet":"29","x":1,"y":1}},"11":{"img":{"sheet":"29","x":2,"y":1}},"12":{"img":{"sheet":"29","x":3,"y":1}},"13":{"img":{"sheet":"29","x":4,"y":1}},"14":{"img":{"sheet":"29","x":5,"y":1}},"15":{"img":{"sheet":"29","x":6,"y":1}},"16":{"img":{"sheet":"29","x":7,"y":1}},"17":{"img":{"sheet":"29","x":8,"y":1}},"18":{"img":{"sheet":"29","x":9,"y":1}},"19":{"img":{"sheet":"29","x":0,"y":2}},"20":{"img":{"sheet":"29","x":1,"y":2}},"21":{"img":{"sheet":"29","x":2,"y":2}},"22":{"img":{"sheet":"29","x":3,"y":2}},"23":{"img":{"sheet":"29","x":4,"y":2}},"24":{"img":{"sheet":"29","x":5,"y":2}},"25":{"img":{"sheet":"29","x":6,"y":2}},"26":{"img":{"sheet":"29","x":7,"y":2}},"27":{"img":{"sheet":"29","x":8,"y":2}},"28":{"img":{"sheet":"29","x":9,"y":2}},"29":{"img":{"sheet":"29","x":0,"y":3}},"30":{"img":{"sheet":"29","x":1,"y":3}},"31":{"img":{"sheet":"29","x":2,"y":3}},"32":{"img":{"sheet":"29","x":3,"y":3}},"33":{"img":{"sheet":"29","x":4,"y":3}},"34":{"img":{"sheet":"29","x":5,"y":3}},"35":{"img":{"sheet":"29","x":6,"y":3}},"36":{"img":{"sheet":"29","x":7,"y":3}},"37":{"img":{"sheet":"29","x":8,"y":3}},"38":{"img":{"sheet":"29","x":9,"y":3}},"39":{"img":{"sheet":"29","x":0,"y":4}},"40":{"img":{"sheet":"29","x":1,"y":4}},"41":{"img":{"sheet":"29","x":2,"y":4}},"42":{"img":{"sheet":"29","x":3,"y":4}},"43":{"img":{"sheet":"29","x":4,"y":4}},"44":{"img":{"sheet":"29","x":5,"y":4}},"45":{"img":{"sheet":"29","x":6,"y":4}},"46":{"img":{"sheet":"29","x":7,"y":4}},"47":{"img":{"sheet":"29","x":8,"y":4}},"48":{"img":{"sheet":"29","x":9,"y":4}},"49":{"img":{"sheet":"29","x":0,"y":5}},"50":{"img":{"sheet":"29","x":1,"y":5}},"51":{"img":{"sheet":"29","x":2,"y":5}},"52":{"img":{"sheet":"29","x":3,"y":5}},"53":{"img":{"sheet":"29","x":4,"y":5}},"54":{"img":{"sheet":"29","x":5,"y":5}},"55":{"img":{"sheet":"29","x":6,"y":5}},"56":{"img":{"sheet":"29","x":7,"y":5}},"57":{"img":{"sheet":"29","x":8,"y":5}},"58":{"img":{"sheet":"29","x":9,"y":5}},"59":{"img":{"sheet":"29","x":0,"y":6}},"60":{"img":{"sheet":"29","x":1,"y":6}},"61":{"img":{"sheet":"29","x":2,"y":6}},"62":{"img":{"sheet":"29","x":3,"y":6}}},"FACIAL_HAIR":{"0":{"name":"None","img":{"sheet":"27","x":0,"y":0},"available":true},"1":{"name":"Black beard","img":{"sheet":"27","x":1,"y":0},"available":true},"2":{"name":"White beard","img":{"sheet":"27","x":3,"y":0},"available":true},"3":{"name":"Orange beard","img":{"sheet":"27","x":4,"y":0},"available":true},"4":{"name":"Yellow beard","img":{"sheet":"27","x":5,"y":0},"available":true},"5":{"name":"Yellow Long beard","img":{"sheet":"27","x":6,"y":0},"available":true},"6":{"name":"Gray Long beard","img":{"sheet":"27","x":7,"y":0},"available":true},"7":{"name":"Green Long beard","img":{"sheet":"27","x":8,"y":0},"available":true}},"CAPES":{"0":{"name":"None","img":{"sheet":"30","x":0,"y":0}},"1":{"name":"Red Cape","img":{"sheet":"30","x":1,"y":0}},"2":{"name":"Blue Cape","img":{"sheet":"30","x":3,"y":0}},"3":{"name":"Devil Wings","img":{"sheet":"30","x":4,"y":0}},"4":{"name":"Donator Cape","img":{"sheet":"30","x":5,"y":0}},"5":{"name":"Archdevil Wings","img":{"sheet":"30","x":6,"y":0}},"6":{"name":"Arcangel Wings","img":{"sheet":"30","x":7,"y":0}},"7":{"name":"Angel Wings","img":{"sheet":"30","x":8,"y":0}},"8":{"name":"Berserker Cape","img":{"sheet":"30","x":9,"y":0}},"9":{"name":"Merlin Cape","img":{"sheet":"30","x":0,"y":1}},"10":{"name":"Twilight Cape","img":{"sheet":"30","x":1,"y":1}},"11":{"name":"Gandalf Cape","img":{"sheet":"30","x":2,"y":1}},"12":{"name":"Warlord Cape","img":{"sheet":"30","x":3,"y":1}},"13":{"name":"Donator Wings","img":{"sheet":"30","x":4,"y":1}},"14":{"name":"Big Spender Wings","img":{"sheet":"30","x":5,"y":1}},"15":{"name":"Welth Wings","img":{"sheet":"30","x":6,"y":1}},"16":{"name":"Admin Wings","img":{"sheet":"30","x":7,"y":1}},"17":{"name":"Overlord Cape","img":{"sheet":"30","x":8,"y":1}},"18":{"name":"Phoenix Cape","img":{"sheet":"30","x":9,"y":1}},"19":{"name":"Behemoth Cape","img":{"sheet":"30","x":0,"y":2}},"20":{"name":"Valentine Cape","img":{"sheet":"30","x":1,"y":2}},"21":{"name":"Nephilim Wings","img":{"sheet":"30","x":2,"y":2}},"22":{"name":"Thunder Wings","img":{"sheet":"30","x":3,"y":2}},"23":{"name":"Ice Wings","img":{"sheet":"30","x":4,"y":2}},"24":{"name":"Balance Wings","img":{"sheet":"30","x":5,"y":2}},"25":{"name":"Enchanted Balance Wings","img":{"sheet":"30","x":6,"y":2}},"26":{"name":"Soul Wings","img":{"sheet":"30","x":7,"y":2}},"27":{"name":"Enchanted Soul Wings","img":{"sheet":"30","x":8,"y":2}},"28":{"name":"Divine Wings","img":{"sheet":"30","x":9,"y":2}},"29":{"name":"Divine Wings","img":{"sheet":"30","x":0,"y":3}},"30":{"name":"Encanted Arcdevil Wings","img":{"sheet":"30","x":1,"y":3}},"31":{"name":"Sunstorm Wings","img":{"sheet":"30","x":2,"y":3}},"32":{"name":"Enchanted Sunstorm Wings","img":{"sheet":"30","x":3,"y":3}},"33":{"name":"Iron Wings","img":{"sheet":"30","x":4,"y":3}},"34":{"name":"Bat Wings","img":{"sheet":"30","x":5,"y":3}},"35":{"name":"Enchanted Bat Wings","img":{"sheet":"30","x":6,"y":3}},"36":{"name":"Enchanted Nephilim Wings","img":{"sheet":"30","x":7,"y":3}},"37":{"name":"Enchanted Archangel Wings","img":{"sheet":"30","x":8,"y":3}},"38":{"name":"Fire Wings","img":{"sheet":"30","x":9,"y":3}},"39":{"name":"Encanted Fire Wings","img":{"sheet":"30","x":0,"y":4}},"40":{"name":"Gorgon Wings","img":{"sheet":"30","x":1,"y":4}},"41":{"name":"Spirit Wings","img":{"sheet":"30","x":2,"y":4}},"42":{"name":"Enchanted Spirit Wings","img":{"sheet":"30","x":3,"y":4}},"43":{"name":"Enchanted Lightning wings","img":{"sheet":"30","x":4,"y":4}},"44":{"name":"Enchanted Ice wings","img":{"sheet":"30","x":5,"y":4}},"45":{"name":"Enchanted Iron Wings","img":{"sheet":"30","x":6,"y":4}},"46":{"name":"Wings of Path","img":{"sheet":"30","x":7,"y":4}},"47":{"name":"Enchanted Wings of Path","img":{"sheet":"30","x":8,"y":4}},"48":{"name":"Core Wings","img":{"sheet":"30","x":9,"y":4}},"49":{"name":"Enchanted Core Wings","img":{"sheet":"30","x":0,"y":5}},"50":{"name":"Enchanted Underworld Wings","img":{"sheet":"30","x":1,"y":5}},"51":{"name":"Underworld Wings","img":{"sheet":"30","x":2,"y":5}},"52":{"name":"Enchanted Gorgon Wings","img":{"sheet":"30","x":3,"y":5}},"53":{"name":"Enchanted Saint Dragon Wings","img":{"sheet":"30","x":4,"y":5}},"54":{"name":"Enchanted Ruby Dragon Wings","img":{"sheet":"30","x":5,"y":5}},"55":{"name":"Enchanted Sapphire Dragon Wings","img":{"sheet":"30","x":6,"y":5}},"56":{"name":"Sapphire Dragon Wings","img":{"sheet":"30","x":7,"y":5}},"57":{"name":"Enchanted Angel Wings","img":{"sheet":"30","x":8,"y":5}},"58":{"name":"Enchanted Devil WIngs","img":{"sheet":"30","x":9,"y":5}},"59":{"name":"Saint Dragon Wings","img":{"sheet":"30","x":0,"y":6}},"60":{"name":"Ruby Dragon Wings","img":{"sheet":"30","x":1,"y":6}},"61":{"name":"Shadow Wings","img":{"sheet":"30","x":2,"y":6}},"62":{"name":"Enchanted Shadow Wings","img":{"sheet":"30","x":3,"y":6}},"63":{"name":"Crystal Wings","img":{"sheet":"30","x":4,"y":6}},"64":{"name":"Enchanted Crystal Wings","img":{"sheet":"30","x":5,"y":6}},"65":{"name":"War Dragon Wings","img":{"sheet":"30","x":6,"y":6}},"66":{"name":"Peace Dragon Wings","img":{"sheet":"30","x":7,"y":6}},"67":{"name":"Peace Dragon Wings +14","img":{"sheet":"30","x":8,"y":6}},"68":{"name":"Peace Dragon Wings +12","img":{"sheet":"30","x":9,"y":6}},"69":{"name":"Peace Dragon Wings +11","img":{"sheet":"30","x":0,"y":7}},"70":{"name":"Peace Dragon Wings +15","img":{"sheet":"30","x":1,"y":7}},"71":{"name":"Peace Dragon Wings +13","img":{"sheet":"30","x":2,"y":7}},"72":{"name":"NPC","img":{"x":0,"y":0,"sheet":"guild_buildings.png","sheet_file":"guild_buildings.png","file":"npc.png","w":1,"h":1,"pos":{"_x":0,"_y":23}}}},"LEFT_HANDS":{"0":{"img":{"sheet":"31","x":0,"y":0}},"1":{"img":{"sheet":"31","x":1,"y":0}},"2":{"img":{"sheet":"31","x":3,"y":0}},"3":{"img":{"sheet":"31","x":4,"y":0}},"4":{"img":{"sheet":"31","x":5,"y":0}},"5":{"img":{"sheet":"31","x":6,"y":0}}},"RIGHT_HANDS":{"0":{"img":{"sheet":"32","x":0,"y":0}},"1":{"img":{"sheet":"32","x":1,"y":0}},"2":{"img":{"sheet":"32","x":3,"y":0}}},"SHIELDS":{"0":{"img":{"sheet":"33","x":0,"y":0}},"1":{"img":{"sheet":"33","x":1,"y":0}},"2":{"img":{"sheet":"33","x":3,"y":0}},"3":{"img":{"sheet":"33","x":4,"y":0}},"4":{"img":{"sheet":"33","x":5,"y":0}},"5":{"img":{"sheet":"33","x":6,"y":0}},"6":{"img":{"sheet":"33","x":7,"y":0}},"7":{"img":{"sheet":"33","x":8,"y":0}},"8":{"img":{"sheet":"33","x":9,"y":0}},"9":{"img":{"sheet":"33","x":0,"y":1}},"10":{"img":{"sheet":"33","x":1,"y":1}},"11":{"img":{"sheet":"33","x":2,"y":1}},"12":{"img":{"sheet":"33","x":3,"y":1}},"13":{"img":{"sheet":"33","x":4,"y":1}},"14":{"img":{"sheet":"33","x":5,"y":1}},"15":{"img":{"sheet":"33","x":6,"y":1}},"16":{"img":{"sheet":"33","x":7,"y":1}},"17":{"img":{"sheet":"33","x":8,"y":1}},"18":{"img":{"sheet":"33","x":9,"y":1}},"19":{"img":{"sheet":"33","x":0,"y":2}},"20":{"img":{"sheet":"33","x":1,"y":2}},"21":{"img":{"sheet":"33","x":2,"y":2}},"22":{"img":{"sheet":"33","x":3,"y":2}},"23":{"img":{"sheet":"33","x":4,"y":2}},"24":{"img":{"sheet":"33","x":5,"y":2}},"25":{"img":{"sheet":"33","x":6,"y":2}},"26":{"img":{"sheet":"33","x":7,"y":2}},"27":{"img":{"sheet":"33","x":8,"y":2}},"28":{"img":{"sheet":"33","x":9,"y":2}},"29":{"img":{"sheet":"33","x":0,"y":3}},"30":{"img":{"sheet":"33","x":1,"y":3}},"31":{"img":{"sheet":"33","x":2,"y":3}},"32":{"img":{"sheet":"33","x":3,"y":3}},"33":{"img":{"sheet":"33","x":4,"y":3}},"34":{"img":{"sheet":"33","x":5,"y":3}},"35":{"img":{"sheet":"33","x":6,"y":3}},"36":{"img":{"sheet":"33","x":7,"y":3}},"37":{"img":{"sheet":"33","x":8,"y":3}},"38":{"img":{"sheet":"33","x":9,"y":3}},"39":{"img":{"sheet":"33","x":0,"y":4}},"40":{"img":{"sheet":"33","x":1,"y":4}},"41":{"img":{"sheet":"33","x":2,"y":4}},"42":{"img":{"sheet":"33","x":3,"y":4}},"43":{"img":{"sheet":"33","x":4,"y":4}},"44":{"img":{"sheet":"33","x":5,"y":4}},"45":{"img":{"sheet":"33","x":6,"y":4}},"46":{"img":{"sheet":"33","x":7,"y":4}},"47":{"img":{"sheet":"33","x":8,"y":4}},"48":{"img":{"sheet":"33","x":9,"y":4}},"49":{"img":{"sheet":"33","x":0,"y":5}},"50":{"img":{"sheet":"33","x":1,"y":5}},"51":{"img":{"sheet":"33","x":2,"y":5}},"52":{"img":{"sheet":"33","x":3,"y":5}},"53":{"img":{"sheet":"33","x":4,"y":5}},"54":{"img":{"sheet":"33","x":5,"y":5}},"55":{"img":{"sheet":"33","x":6,"y":5}}},"HELMETS":{"0":{"img":{"sheet":"35","x":0,"y":0}},"1":{"img":{"sheet":"35","x":1,"y":0}},"2":{"img":{"sheet":"35","x":3,"y":0}},"3":{"img":{"sheet":"35","x":4,"y":0}},"4":{"img":{"sheet":"35","x":5,"y":0}},"5":{"img":{"sheet":"35","x":6,"y":0}},"6":{"img":{"sheet":"35","x":7,"y":0}},"7":{"img":{"sheet":"35","x":8,"y":0}},"8":{"img":{"sheet":"35","x":9,"y":0}},"9":{"img":{"sheet":"35","x":0,"y":1}},"10":{"img":{"sheet":"35","x":1,"y":1}},"11":{"img":{"sheet":"35","x":2,"y":1}},"12":{"img":{"sheet":"35","x":3,"y":1}},"13":{"img":{"sheet":"35","x":4,"y":1}},"14":{"img":{"sheet":"35","x":5,"y":1}},"15":{"img":{"sheet":"35","x":6,"y":1}},"16":{"img":{"sheet":"35","x":7,"y":1}},"17":{"img":{"sheet":"35","x":8,"y":1}},"18":{"img":{"sheet":"35","x":9,"y":1}},"19":{"img":{"sheet":"35","x":0,"y":2}},"20":{"img":{"sheet":"35","x":1,"y":2}},"21":{"img":{"sheet":"35","x":2,"y":2}},"22":{"img":{"sheet":"35","x":3,"y":2}},"23":{"img":{"sheet":"35","x":4,"y":2}},"24":{"img":{"sheet":"35","x":5,"y":2}},"25":{"img":{"sheet":"35","x":6,"y":2}},"26":{"img":{"sheet":"35","x":7,"y":2}},"27":{"img":{"sheet":"35","x":8,"y":2}},"28":{"img":{"sheet":"35","x":9,"y":2}},"29":{"img":{"sheet":"35","x":0,"y":3}},"30":{"img":{"sheet":"35","x":1,"y":3}},"31":{"img":{"sheet":"35","x":2,"y":3}},"32":{"img":{"sheet":"35","x":3,"y":3}},"33":{"img":{"sheet":"35","x":4,"y":3}},"34":{"img":{"sheet":"35","x":5,"y":3}},"35":{"img":{"sheet":"35","x":6,"y":3}},"36":{"img":{"sheet":"35","x":7,"y":3}},"37":{"img":{"sheet":"35","x":8,"y":3}},"38":{"img":{"sheet":"35","x":9,"y":3}},"39":{"img":{"sheet":"35","x":0,"y":4}},"40":{"img":{"sheet":"35","x":1,"y":4}},"41":{"img":{"sheet":"35","x":2,"y":4}},"42":{"img":{"sheet":"35","x":3,"y":4}},"43":{"img":{"sheet":"35","x":4,"y":4}},"44":{"img":{"sheet":"35","x":5,"y":4}},"45":{"img":{"sheet":"35","x":6,"y":4}},"46":{"img":{"sheet":"35","x":7,"y":4}},"47":{"img":{"sheet":"35","x":8,"y":4}},"48":{"img":{"sheet":"35","x":9,"y":4}},"49":{"img":{"sheet":"35","x":0,"y":5}},"50":{"img":{"sheet":"35","x":1,"y":5}},"51":{"img":{"sheet":"35","x":2,"y":5}},"52":{"img":{"sheet":"35","x":3,"y":5}},"53":{"img":{"sheet":"35","x":4,"y":5}},"54":{"img":{"sheet":"35","x":5,"y":5}}},"BOOTS":{"0":{"img":{"sheet":"36","x":0,"y":0}},"1":{"img":{"sheet":"36","x":1,"y":0}},"2":{"img":{"sheet":"36","x":3,"y":0}},"3":{"img":{"sheet":"36","x":4,"y":0}},"4":{"img":{"sheet":"36","x":5,"y":0}},"5":{"img":{"sheet":"36","x":6,"y":0}},"6":{"img":{"sheet":"36","x":7,"y":0}},"7":{"img":{"sheet":"36","x":8,"y":0}},"8":{"img":{"sheet":"36","x":9,"y":0}},"9":{"img":{"sheet":"36","x":0,"y":1}},"10":{"img":{"sheet":"36","x":1,"y":1}},"11":{"img":{"sheet":"36","x":2,"y":1}},"12":{"img":{"sheet":"36","x":3,"y":1}},"13":{"img":{"sheet":"36","x":4,"y":1}},"14":{"img":{"sheet":"36","x":5,"y":1}},"15":{"img":{"sheet":"36","x":6,"y":1}},"16":{"img":{"sheet":"36","x":7,"y":1}},"17":{"img":{"sheet":"36","x":8,"y":1}},"18":{"img":{"sheet":"36","x":9,"y":1}},"19":{"img":{"sheet":"36","x":0,"y":2}},"20":{"img":{"sheet":"36","x":1,"y":2}},"21":{"img":{"sheet":"36","x":2,"y":2}},"22":{"img":{"sheet":"36","x":3,"y":2}}},"GROUND_EFFECT":{"0":{"img":{"sheet":"34","x":0,"y":0,"pos":{"_x":0,"_y":0}}},"1":{"name":"NPC","img":{"x":0,"y":0,"sheet":"guild_buildings.png","sheet_file":"guild_buildings.png","file":"npc.png","w":1,"h":1,"pos":{"_x":0,"_y":23}}}},"WEAPONS":{"0":{"img":{"sheet":"34","x":0,"y":0,"pos":{"_x":0,"_y":0}}},"1":{"img":{"sheet":"34","x":1,"y":0,"pos":{"_x":11,"_y":-2}}},"2":{"img":{"sheet":"34","x":3,"y":0,"pos":{"_x":11,"_y":-2}}},"3":{"img":{"sheet":"34","x":4,"y":0,"pos":{"_x":-2,"_y":2}}},"4":{"img":{"sheet":"34","x":5,"y":0,"pos":{"_x":-1,"_y":2}}},"5":{"img":{"sheet":"34","x":6,"y":0,"pos":{"_x":0,"_y":1}}},"6":{"img":{"sheet":"34","x":7,"y":0,"pos":{"_x":-1,"_y":2}}},"7":{"img":{"sheet":"34","x":8,"y":0,"pos":{"_x":12,"_y":3}}},"8":{"img":{"sheet":"34","x":9,"y":0,"pos":{"_x":15,"_y":-3}}},"9":{"img":{"sheet":"34","x":0,"y":1,"pos":{"_x":12,"_y":-4}}},"10":{"img":{"sheet":"34","x":1,"y":1,"pos":{"_x":13,"_y":-1}}},"11":{"img":{"sheet":"51","x":0,"y":0,"pos":{"_x":2,"_y":-6}}},"12":{"img":{"sheet":"51","x":1,"y":0,"pos":{"_x":0,"_y":-2}}},"13":{"img":{"sheet":"34","x":4,"y":1,"pos":{"_x":16,"_y":-2}}},"14":{"img":{"sheet":"34","x":5,"y":1,"pos":{"_x":11,"_y":-7}}},"15":{"img":{"sheet":"34","x":6,"y":1,"pos":{"_x":15,"_y":-3}}},"16":{"img":{"sheet":"34","x":7,"y":1,"pos":{"_x":11,"_y":-1}}},"17":{"img":{"sheet":"34","x":8,"y":1,"pos":{"_x":11,"_y":-1}}},"18":{"img":{"sheet":"51","x":11,"y":1,"pos":{"_x":2,"_y":0}}},"19":{"img":{"sheet":"34","x":0,"y":2,"pos":{"_x":11,"_y":-5}}},"20":{"img":{"sheet":"51","x":9,"y":0,"pos":{"_x":4,"_y":7}}},"21":{"img":{"sheet":"34","x":2,"y":2,"pos":{"_x":15,"_y":-5}}},"22":{"img":{"sheet":"34","x":3,"y":2,"pos":{"_x":15,"_y":-5}}},"23":{"img":{"sheet":"51","x":9,"y":1,"pos":{"_x":0,"_y":-1}}},"24":{"img":{"sheet":"51","x":8,"y":1,"pos":{"_x":1,"_y":-1}}},"25":{"img":{"sheet":"34","x":6,"y":2,"pos":{"_x":-2,"_y":-1}}},"26":{"img":{"sheet":"34","x":7,"y":2,"pos":{"_x":16,"_y":-5}}},"27":{"img":{"sheet":"34","x":8,"y":2,"pos":{"_x":12,"_y":-3}}},"28":{"img":{"sheet":"51","x":12,"y":1,"pos":{"_x":2,"_y":-1}}},"29":{"img":{"sheet":"34","x":0,"y":3,"pos":{"_x":18,"_y":-5}}},"30":{"img":{"sheet":"34","x":1,"y":3,"pos":{"_x":14,"_y":-4}}},"31":{"img":{"sheet":"51","x":10,"y":1,"pos":{"_x":-3,"_y":-2}}},"32":{"img":{"sheet":"51","x":2,"y":0,"pos":{"_x":-3,"_y":-4}}},"33":{"img":{"sheet":"34","x":4,"y":3,"pos":{"_x":15,"_y":-2}}},"34":{"img":{"sheet":"34","x":5,"y":3,"pos":{"_x":10,"_y":-3}}},"35":{"img":{"sheet":"34","x":6,"y":3,"pos":{"_x":14,"_y":-1}}},"36":{"img":{"sheet":"34","x":7,"y":3,"pos":{"_x":14,"_y":-1}}},"37":{"img":{"sheet":"51","x":2,"y":1,"pos":{"_x":4,"_y":-4}}},"38":{"img":{"sheet":"34","x":9,"y":3,"pos":{"_x":15,"_y":-4}}},"39":{"img":{"sheet":"34","x":0,"y":4,"pos":{"_x":16,"_y":-2}}},"40":{"img":{"sheet":"34","x":1,"y":4,"pos":{"_x":13,"_y":0}}},"41":{"img":{"sheet":"34","x":2,"y":4,"pos":{"_x":14,"_y":-3}}},"42":{"img":{"sheet":"34","x":3,"y":4,"pos":{"_x":13,"_y":-1}}},"43":{"img":{"sheet":"51","x":7,"y":1,"pos":{"_x":2,"_y":0}}},"44":{"img":{"sheet":"51","x":6,"y":1,"pos":{"_x":1,"_y":1}}},"45":{"img":{"sheet":"34","x":6,"y":4,"pos":{"_x":13,"_y":1}}},"46":{"img":{"sheet":"34","x":7,"y":4,"pos":{"_x":13,"_y":1}}},"47":{"img":{"sheet":"34","x":8,"y":4,"pos":{"_x":14,"_y":-1}}},"48":{"img":{"sheet":"34","x":9,"y":4,"pos":{"_x":13,"_y":-1}}},"49":{"img":{"sheet":"34","x":0,"y":5,"pos":{"_x":13,"_y":-1}}},"50":{"img":{"sheet":"34","x":1,"y":5,"pos":{"_x":13,"_y":-1}}},"51":{"img":{"sheet":"34","x":2,"y":5,"pos":{"_x":13,"_y":-1}}},"52":{"img":{"sheet":"34","x":3,"y":5,"pos":{"_x":13,"_y":-1}}},"53":{"img":{"sheet":"34","x":4,"y":5,"pos":{"_x":13,"_y":-1}}},"54":{"img":{"sheet":"34","x":5,"y":5,"pos":{"_x":13,"_y":-1}}},"55":{"img":{"sheet":"34","x":6,"y":5,"pos":{"_x":13,"_y":-1}}},"56":{"img":{"sheet":"34","x":7,"y":5,"pos":{"_x":13,"_y":-1}}},"57":{"img":{"sheet":"34","x":8,"y":5,"pos":{"_x":13,"_y":-1}}},"58":{"img":{"sheet":"34","x":9,"y":5,"pos":{"_x":13,"_y":-1}}},"59":{"img":{"sheet":"34","x":0,"y":6,"pos":{"_x":13,"_y":0}}},"60":{"img":{"sheet":"34","x":1,"y":6,"pos":{"_x":12,"_y":-1}}},"61":{"img":{"sheet":"34","x":2,"y":6,"pos":{"_x":12,"_y":-1}}},"62":{"img":{"sheet":"34","x":3,"y":6,"pos":{"_x":11,"_y":-1}}},"63":{"img":{"sheet":"34","x":4,"y":6,"pos":{"_x":11,"_y":-1}}},"64":{"img":{"sheet":"34","x":5,"y":6,"pos":{"_x":11,"_y":-1}}},"65":{"img":{"sheet":"34","x":6,"y":6,"pos":{"_x":11,"_y":-1}}},"66":{"img":{"sheet":"34","x":7,"y":6,"pos":{"_x":11,"_y":-1}}},"67":{"img":{"sheet":"34","x":8,"y":6,"pos":{"_x":11,"_y":-1}}},"68":{"img":{"sheet":"34","x":9,"y":6,"pos":{"_x":11,"_y":-1}}},"69":{"img":{"sheet":"34","x":0,"y":7,"pos":{"_x":11,"_y":-1}}},"70":{"img":{"sheet":"34","x":1,"y":7,"pos":{"_x":14,"_y":-1}}},"71":{"img":{"sheet":"34","x":2,"y":7,"pos":{"_x":14,"_y":-2}}},"72":{"img":{"sheet":"34","x":3,"y":7,"pos":{"_x":14,"_y":-2}}},"73":{"img":{"sheet":"34","x":4,"y":7,"pos":{"_x":14,"_y":-2}}},"74":{"img":{"sheet":"34","x":5,"y":7,"pos":{"_x":14,"_y":0}}},"75":{"img":{"sheet":"34","x":6,"y":7,"pos":{"_x":11,"_y":0}}},"76":{"img":{"sheet":"34","x":7,"y":7,"pos":{"_x":11,"_y":0}}},"77":{"img":{"sheet":"34","x":8,"y":7,"pos":{"_x":10,"_y":0}}},"78":{"img":{"sheet":"34","x":9,"y":7,"pos":{"_x":11,"_y":0}}},"79":{"img":{"sheet":"34","x":0,"y":8,"pos":{"_x":9,"_y":0}}},"80":{"img":{"sheet":"34","x":1,"y":8,"pos":{"_x":11,"_y":0}}},"81":{"img":{"sheet":"34","x":2,"y":8,"pos":{"_x":11,"_y":2}}},"82":{"img":{"sheet":"34","x":3,"y":8,"pos":{"_x":11,"_y":2}}},"83":{"img":{"sheet":"34","x":4,"y":8,"pos":{"_x":13,"_y":1}}},"84":{"img":{"sheet":"34","x":5,"y":8,"pos":{"_x":-1,"_y":2}}},"85":{"img":{"sheet":"34","x":6,"y":8,"pos":{"_x":11,"_y":-4}}},"86":{"img":{"sheet":"34","x":7,"y":8,"pos":{"_x":9,"_y":0}}},"87":{"img":{"sheet":"34","x":8,"y":8,"pos":{"_x":10,"_y":4}}},"88":{"img":{"sheet":"34","x":9,"y":8,"pos":{"_x":-4,"_y":1}}},"89":{"img":{"sheet":"34","x":0,"y":9,"pos":{"_x":8,"_y":-1}}},"90":{"img":{"sheet":"34","x":1,"y":9,"pos":{"_x":13,"_y":-2}}},"91":{"img":{"sheet":"34","x":2,"y":9,"pos":{"_x":7,"_y":-2}}},"92":{"img":{"sheet":"34","x":3,"y":9,"pos":{"_x":9,"_y":-2}}},"93":{"img":{"sheet":"34","x":4,"y":9,"pos":{"_x":18,"_y":2}}},"94":{"img":{"sheet":"51","x":7,"y":0,"pos":{"_x":0,"_y":-2}}},"95":{"img":{"sheet":"51","x":8,"y":0,"pos":{"_x":-3,"_y":-4}}},"96":{"img":{"sheet":"34","x":7,"y":9,"pos":{"_x":13,"_y":-5}}},"97":{"img":{"sheet":"34","x":8,"y":9,"pos":{"_x":9,"_y":-7}}},"98":{"img":{"sheet":"34","x":9,"y":9,"pos":{"_x":13,"_y":-4}}},"99":{"img":{"sheet":"51","x":13,"y":0,"pos":{"_x":3,"_y":-3}}},"100":{"img":{"sheet":"51","x":12,"y":0,"pos":{"_x":3,"_y":-4}}},"101":{"img":{"sheet":"34","x":2,"y":10,"pos":{"_x":-4,"_y":-1}}},"102":{"img":{"sheet":"34","x":3,"y":10,"pos":{"_x":13,"_y":-2}}},"103":{"img":{"sheet":"34","x":4,"y":10,"pos":{"_x":13,"_y":-3}}},"104":{"img":{"sheet":"34","x":5,"y":10,"pos":{"_x":13,"_y":-1}}},"105":{"img":{"sheet":"34","x":6,"y":10,"pos":{"_x":13,"_y":-3}}},"106":{"img":{"sheet":"51","x":1,"y":1,"pos":{"_x":3,"_y":-1}}},"107":{"img":{"sheet":"51","x":0,"y":1,"pos":{"_x":-3,"_y":-5}}},"108":{"img":{"sheet":"34","x":9,"y":10,"pos":{"_x":14,"_y":-2}}},"109":{"img":{"sheet":"51","x":4,"y":0,"pos":{"_x":-3,"_y":-4}}},"110":{"img":{"sheet":"34","x":1,"y":11,"pos":{"_x":13,"_y":-1}}},"111":{"img":{"sheet":"34","x":2,"y":11,"pos":{"_x":15,"_y":-4}}},"112":{"img":{"sheet":"51","x":11,"y":0,"pos":{"_x":3,"_y":-1}}},"113":{"img":{"sheet":"51","x":10,"y":0,"pos":{"_x":2,"_y":-3}}},"114":{"img":{"sheet":"34","x":5,"y":11,"pos":{"_x":0,"_y":0}}},"115":{"img":{"sheet":"34","x":6,"y":11,"pos":{"_x":13,"_y":-1}}},"116":{"img":{"sheet":"34","x":7,"y":11,"pos":{"_x":12,"_y":0}}},"117":{"img":{"sheet":"34","x":8,"y":11,"pos":{"_x":10,"_y":-2}}},"118":{"img":{"sheet":"34","x":9,"y":11,"pos":{"_x":10,"_y":-2}}},"119":{"img":{"sheet":"34","x":0,"y":12,"pos":{"_x":12,"_y":0}}},"120":{"img":{"sheet":"34","x":1,"y":12,"pos":{"_x":12,"_y":0}}},"121":{"img":{"sheet":"34","x":2,"y":12,"pos":{"_x":13,"_y":0}}},"122":{"img":{"sheet":"51","x":4,"y":1,"pos":{"_x":0,"_y":0}}},"123":{"img":{"sheet":"51","x":5,"y":1,"pos":{"_x":4,"_y":1}}},"124":{"img":{"sheet":"34","x":5,"y":12,"pos":{"_x":13,"_y":-1}}},"125":{"img":{"sheet":"34","x":6,"y":12,"pos":{"_x":13,"_y":-1}}},"126":{"img":{"sheet":"34","x":7,"y":12,"pos":{"_x":13,"_y":-1}}},"127":{"img":{"sheet":"34","x":8,"y":12,"pos":{"_x":13,"_y":-1}}},"128":{"img":{"sheet":"34","x":9,"y":12,"pos":{"_x":13,"_y":-1}}},"129":{"img":{"sheet":"34","x":0,"y":13,"pos":{"_x":8,"_y":3}}},"130":{"img":{"sheet":"34","x":1,"y":13,"pos":{"_x":11,"_y":0}}},"131":{"img":{"sheet":"34","x":2,"y":13,"pos":{"_x":13,"_y":-1}}},"132":{"img":{"sheet":"34","x":3,"y":13,"pos":{"_x":12,"_y":0}}},"133":{"img":{"sheet":"34","x":4,"y":13,"pos":{"_x":13,"_y":-1}}},"134":{"img":{"sheet":"34","x":5,"y":13,"pos":{"_x":9,"_y":5}}},"135":{"img":{"sheet":"34","x":6,"y":13,"pos":{"_x":9,"_y":5}}},"136":{"img":{"sheet":"51","x":3,"y":1,"pos":{"_x":3,"_y":-1}}},"137":{"img":{"sheet":"51","x":6,"y":0,"pos":{"_x":2,"_y":-3}}},"138":{"img":{"sheet":"34","x":9,"y":13,"pos":{"_x":4,"_y":0}}},"139":{"img":{"sheet":"34","x":0,"y":14,"pos":{"_x":3,"_y":0}}},"140":{"img":{"sheet":"34","x":1,"y":14,"pos":{"_x":11,"_y":1}}},"141":{"img":{"sheet":"34","x":2,"y":14,"pos":{"_x":11,"_y":1}}},"142":{"img":{"sheet":"34","x":3,"y":14,"pos":{"_x":3,"_y":-1}}},"143":{"img":{"sheet":"34","x":4,"y":14,"pos":{"_x":-1,"_y":1}}},"144":{"img":{"sheet":"34","x":5,"y":14,"pos":{"_x":0,"_y":1}}},"145":{"img":{"sheet":"34","x":6,"y":14,"pos":{"_x":11,"_y":2}}},"146":{"img":{"sheet":"34","x":7,"y":14,"pos":{"_x":11,"_y":2}}},"147":{"img":{"sheet":"34","x":8,"y":14,"pos":{"_x":8,"_y":3}}},"148":{"img":{"sheet":"34","x":9,"y":14,"pos":{"_x":8,"_y":4}}},"149":{"img":{"sheet":"34","x":0,"y":15,"pos":{"_x":7,"_y":3}}},"150":{"img":{"sheet":"34","x":1,"y":15,"pos":{"_x":11,"_y":-1}}},"151":{"img":{"sheet":"34","x":2,"y":15,"pos":{"_x":13,"_y":-1}}},"152":{"img":{"sheet":"34","x":3,"y":15,"pos":{"_x":13,"_y":-1}}},"153":{"img":{"sheet":"34","x":4,"y":15,"pos":{"_x":8,"_y":-2}}},"154":{"img":{"sheet":"34","x":5,"y":15,"pos":{"_x":10,"_y":-3}}},"155":{"img":{"sheet":"34","x":6,"y":15,"pos":{"_x":11,"_y":-1}}},"156":{"img":{"sheet":"34","x":7,"y":15,"pos":{"_x":12,"_y":-2}}},"157":{"img":{"sheet":"51","x":3,"y":0,"pos":{"_x":-2,"_y":-3}}},"158":{"img":{"sheet":"34","x":9,"y":15,"pos":{"_x":9,"_y":4}}},"159":{"img":{"sheet":"34","x":0,"y":16,"pos":{"_x":10,"_y":3}}},"160":{"img":{"sheet":"34","x":1,"y":16,"pos":{"_x":7,"_y":3}}},"161":{"img":{"sheet":"34","x":6,"y":16,"pos":{"_x":5,"_y":8}}},"162":{"img":{"sheet":"34","x":7,"y":16,"pos":{"_x":6,"_y":7}}},"163":{"img":{"sheet":"34","x":8,"y":16,"pos":{"_x":7,"_y":7}}},"164":{"img":{"sheet":"34","x":9,"y":16,"pos":{"_x":8,"_y":4}}},"165":{"img":{"sheet":"34","x":2,"y":16,"pos":{"_x":3,"_y":-1}}},"166":{"img":{"sheet":"34","x":3,"y":16,"pos":{"_x":4,"_y":-1}}},"167":{"img":{"sheet":"34","x":4,"y":16,"pos":{"_x":5,"_y":-1}}},"168":{"img":{"sheet":"34","x":5,"y":16,"pos":{"_x":6,"_y":-1}}},"169":{"img":{"sheet":"34","x":0,"y":17,"pos":{"_x":5,"_y":8}}},"170":{"img":{"sheet":"34","x":1,"y":17,"pos":{"_x":5,"_y":6}}},"171":{"img":{"sheet":"34","x":2,"y":17,"pos":{"_x":6,"_y":6}}},"172":{"img":{"sheet":"34","x":3,"y":17,"pos":{"_x":7,"_y":3}}},"173":{"img":{"sheet":"34","x":4,"y":17,"pos":{"_x":12,"_y":-2}}},"174":{"img":{"sheet":"34","x":5,"y":17,"pos":{"_x":7,"_y":6}}},"175":{"img":{"sheet":"34","x":6,"y":17,"pos":{"_x":8,"_y":9}}},"176":{"img":{"sheet":"34","x":7,"y":17,"pos":{"_x":6,"_y":6}}},"177":{"img":{"sheet":"34","x":8,"y":17,"pos":{"_x":6,"_y":6}}},"178":{"img":{"sheet":"34","x":9,"y":17,"pos":{"_x":3,"_y":0}}},"179":{"img":{"sheet":"51","x":13,"y":1,"pos":{"_x":4,"_y":-1}}},"180":{"img":{"sheet":"51","x":13,"y":1,"pos":{"_x":4,"_y":-1}}},"181":{"img":{"sheet":"51","x":0,"y":2,"pos":{"_x":4,"_y":-1}}},"182":{"img":{"sheet":"51","x":1,"y":2,"pos":{"_x":4,"_y":-1}}},"183":{"img":{"sheet":"51","x":2,"y":2,"pos":{"_x":4,"_y":-1}}},"184":{"img":{"sheet":"51","x":3,"y":2,"pos":{"_x":4,"_y":-1}}},"185":{"img":{"sheet":"51","x":4,"y":2,"pos":{"_x":4,"_y":-1}}},"186":{"img":{"sheet":"51","x":5,"y":2,"pos":{"_x":4,"_y":-1}}},"187":{"img":{"sheet":"51","x":6,"y":2,"pos":{"_x":3,"_y":-1}}},"188":{"img":{"sheet":"51","x":7,"y":2,"pos":{"_x":4,"_y":-1}}},"189":{"img":{"sheet":"51","x":8,"y":2,"pos":{"_x":4,"_y":-1}}},"190":{"img":{"sheet":"51","x":9,"y":2,"pos":{"_x":4,"_y":-1}}},"191":{"img":{"sheet":"34","x":8,"y":13,"pos":{"_x":6,"_y":7}}},"192":{"img":{"sheet":"34","x":0,"y":18,"pos":{"_x":7,"_y":0}}},"193":{"img":{"sheet":"34","x":1,"y":18,"pos":{"_x":3,"_y":0}}}}};
// window.IMAGE_SHEET = {};
// for (var i in obj.sheets) {
//   var ii = parseInt(i)+1;
//   window.IMAGE_SHEET[ii] = obj.sheets[i];
// }


},{"react":280,"react/lib/keyMirror":266}],322:[function(require,module,exports){
'use strict';

var Dispatcher = require('flux').Dispatcher
  , Constants = require('../constants/AppConstants.js')
  // , PayloadSources = require('../constants/PayloadSources')
  , assign = require('object-assign')
    ;

var AppDispatcher = assign(new Dispatcher(), {
/*
  handleServerAction(action) {

    if (!action.type) {
      throw new Error('Empty action.type: you likely mistyped the action.');
    }

    this.dispatch({
      source: PayloadSources.SERVER_ACTION,
      action: action
    });
  },
*/
  handleViewAction: function(action) {

    if (!action.actionType) {
      throw new Error('Empty action.actionType: you likely mistyped the action.');
    }

    this.dispatch({
      source: Constants.PayloadSources.VIEW_ACTION,
      action: action
    });
  }
});

module.exports = AppDispatcher;

},{"../constants/AppConstants.js":321,"flux":1,"object-assign":8}],323:[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react');
var HSStore = require('../stores/HSStore.js');

var HighscoresWatchMixin = function(cb){
  return {
    getInitialState:function(){
      HSStore.init();
      return cb(this);
    },
    componentWillMount:function(){
      HSStore.addChangeListener(this._onChange)
    },
    componentWillUnmount:function(){
      HSStore.removeChangeListener(this._onChange)
    },
    _onChange:function(){
      this.setState(cb(this))
    }
  }
}

module.exports = HighscoresWatchMixin;

},{"../stores/HSStore.js":331,"react":280}],324:[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react');
var MobStore = require('../stores/MobStore.js');

var MobWatchMixin = function(cb){
  return {
    getInitialState:function(){
      return cb(this);
    },
    componentWillMount:function(){
      MobStore.addChangeListener(this._onChange)
    },
    componentWillUnmount:function(){
      MobStore.removeChangeListener(this._onChange)
    },
    _onChange:function(){
      this.setState(cb(this))
    }
  }
}

module.exports = MobWatchMixin;

},{"../stores/MobStore.js":335,"react":280}],325:[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react');
var NPCStore = require('../stores/NPCStore.js');

var NPCWatchMixin = function(cb){
  return {
    getInitialState:function(){
      return cb(this);
    },
    componentWillMount:function(){
      NPCStore.addChangeListener(this._onChange)
    },
    componentWillUnmount:function(){
      NPCStore.removeChangeListener(this._onChange)
    },
    _onChange:function(){
      this.setState(cb(this))
    }
  }
}

module.exports = NPCWatchMixin;

},{"../stores/NPCStore.js":337,"react":280}],326:[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react');
var MobStore = require('../stores/MobStore.js');
var NPCStore = require('../stores/NPCStore.js');
var SearchStore = require('../stores/SearchStore.js');

var MobWatchMixin = function(cb){
  return {
    getInitialState:function(){
      MobStore.init();
      SearchStore.init();
      NPCStore.init()
      return cb(this);
    },
    componentWillMount:function(){
      MobStore.addChangeListener(this._onChange)
      NPCStore.addChangeListener(this._onChange)
      SearchStore.addChangeListener(this._onChange)
    },
    componentWillUnmount:function(){
      MobStore.removeChangeListener(this._onChange)
      NPCStore.removeChangeListener(this._onChange)
      SearchStore.removeChangeListener(this._onChange)
    },
    _onChange:function(){
      this.setState(cb(this))
    }
  }
}

module.exports = MobWatchMixin;

},{"../stores/MobStore.js":335,"../stores/NPCStore.js":337,"../stores/SearchStore.js":340,"react":280}],327:[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react');
var SearchStore = require('../stores/SearchStore.js');

var SearchStoreMixin = function(cb){
  return {
    getInitialState:function(){
      return cb(this);
    },
    componentWillMount:function(){
      SearchStore.addChangeListener(this._onChange)
    },
    componentWillUnmount:function(){
      SearchStore.removeChangeListener(this._onChange)
    },
    _onChange:function(){
      this.setState(cb(this))
    }
  }
}

module.exports = SearchStoreMixin;

},{"../stores/SearchStore.js":340,"react":280}],328:[function(require,module,exports){
var Util = require('./util.js')
var React = require('react');

var Router = require('react-router')
  , RouteHandler = Router.RouteHandler
  , Route = Router.Route;

var ReactBootstrap = require('react-bootstrap')
  , Nav = ReactBootstrap.Nav;

var ReactRouterBootstrap = require('react-router-bootstrap')
  , NavItemLink = ReactRouterBootstrap.NavItemLink
  , ButtonLink = ReactRouterBootstrap.ButtonLink;

var DefaultRoute = Router.DefaultRoute
var NotFoundRoute = Router.NotFoundRoute
var NotFound = require('./components/404.jsx');
var Redirect = Router.Redirect

var App = require('./components/App.jsx')
  , Home = require('./components/Home.jsx')
  , Search = require('./components/Search.jsx')
  , Item = require('./components/Item.jsx')
  , Breeding = require('./components/Breeding.jsx')
  , Npcs = require('./components/Npcs.jsx')
  , Npc = require('./components/Npc.jsx')
  , Mobs = require('./components/Mobs.jsx')
  , MobsByMap = require('./components/MobsByMap.jsx')
  , Mob = require('./components/Mob.jsx')
  , Todo = require('./components/Todo.jsx')

var ItemTabVendors = require('./components/ItemTabVendor.jsx')
  , ItemTabDrops = require('./components/ItemTabDrops.jsx')
  , ItemTabCraft = require('./components/ItemTabCraft.jsx')
  , ItemTabEnchant = require('./components/ItemTabEnchant.jsx')
  , ItemTabBreeding = require('./components/ItemTabBreeding.jsx')
  , ItemHome = require('./components/ItemHome.jsx')
;

React.initializeTouchEvents();

var routes = (
  React.createElement(Route, {handler: App, path: "/"}, 
    React.createElement(DefaultRoute, {name: "home", handler: Home}), 
    React.createElement(Route, {name: "search", handler: Search, path: "/items"}), 
    React.createElement(Route, {name: "item", handler: Item, path: "/items/:itemId"}, 
      React.createElement(DefaultRoute, {name: "item-home", handler: ItemHome}), 
      React.createElement(Route, {name: "item-vendor", path: "vendors", handler: ItemTabVendors}), 
      React.createElement(Route, {name: "item-drops", path: "mobs", handler: ItemTabDrops}), 
      React.createElement(Route, {name: "item-craft", path: "craft", handler: ItemTabCraft}), 
      React.createElement(Route, {name: "item-enchant", path: "enchant", handler: ItemTabEnchant}), 
      React.createElement(Route, {name: "item-breeding", path: "breeding", handler: ItemTabBreeding}), 
      React.createElement(NotFoundRoute, {handler: NotFound})
    ), 
    React.createElement(Route, {name: "breeding", handler: Breeding, path: "/breeding"}), 
    React.createElement(Route, {name: "npcs", handler: Npcs, path: "/vendors"}), 
    React.createElement(Route, {name: "npc", handler: Npc, path: "/vendors/:npcId"}), 
    React.createElement(Route, {name: "mobs", handler: Mobs, path: "/mobs"}), 
    React.createElement(Route, {name: "mobsByMap", handler: MobsByMap, path: "/mobsByMap"}), 
    React.createElement(Route, {name: "mob", handler: Mob, path: "/mobs/:mobId"}), 
    React.createElement(Route, {name: "todo", handler: Todo, path: "/todo"}), 
    React.createElement(NotFoundRoute, {handler: NotFound}), 
    React.createElement(Redirect, {from: "company", to: "about"})
  )
);

Router.run(routes, function (Handler) {
  React.render(React.createElement(Handler, null), document.getElementById('main'));
  Util.hideLoader();
});


},{"./components/404.jsx":284,"./components/App.jsx":286,"./components/Breeding.jsx":287,"./components/Home.jsx":292,"./components/Item.jsx":293,"./components/ItemHome.jsx":296,"./components/ItemTabBreeding.jsx":300,"./components/ItemTabCraft.jsx":301,"./components/ItemTabDrops.jsx":302,"./components/ItemTabEnchant.jsx":303,"./components/ItemTabVendor.jsx":304,"./components/Mob.jsx":307,"./components/Mobs.jsx":310,"./components/MobsByMap.jsx":311,"./components/Npc.jsx":312,"./components/Npcs.jsx":313,"./components/Search.jsx":316,"./components/Todo.jsx":319,"./util.js":341,"react":280,"react-bootstrap":58,"react-router":121,"react-router-bootstrap":93}],329:[function(require,module,exports){
module.exports = [
    {
        "id": 0,
        "n": "Bronze Dagger",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 1
            },
            {
                "id": "34",
                "c": 2
            }
        ],
        "pattern": [
            [
                34
            ],
            [
                34
            ],
            [
                29
            ]
        ]
    },
    {
        "id": 37,
        "n": "Bronze Helmet",
        "level": 3,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 4
            }
        ],
        "pattern": [
            [
                34,
                34
            ],
            [
                34,
                34
            ]
        ]
    },
    {
        "id": 38,
        "n": "Bronze Sword",
        "level": 2,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 1
            },
            {
                "id": "34",
                "c": 3
            }
        ],
        "pattern": [
            [
                34
            ],
            [
                34
            ],
            [
                34
            ],
            [
                29
            ]
        ]
    },
    {
        "id": 27,
        "n": "Bronze Boots",
        "level": 5,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                34,
                -1
            ],
            [
                34,
                34,
                34
            ]
        ]
    },
    {
        "id": 1,
        "n": "Bronze Shield",
        "level": 9,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 1
            },
            {
                "id": "34",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                34,
                -1
            ],
            [
                34,
                29,
                34
            ],
            [
                -1,
                34,
                -1
            ]
        ]
    },
    {
        "id": 39,
        "n": "Bronze Gloves",
        "level": 7,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 2
            }
        ],
        "pattern": [
            [
                34
            ],
            [
                34
            ]
        ]
    },
    {
        "id": 40,
        "n": "Bronze Chainmail",
        "level": 11,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 6
            }
        ],
        "pattern": [
            [
                34,
                34
            ],
            [
                34,
                34
            ],
            [
                34,
                34
            ]
        ]
    },
    {
        "id": 41,
        "n": "Bronze Battle Axe",
        "level": 15,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 2
            },
            {
                "id": "34",
                "c": 6
            }
        ],
        "pattern": [
            [
                34,
                34,
                34
            ],
            [
                34,
                34,
                34
            ],
            [
                -1,
                29,
                -1
            ],
            [
                -1,
                29,
                -1
            ]
        ]
    },
    {
        "id": 42,
        "n": "Bronze Large Shield",
        "level": 17,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 5
            }
        ],
        "pattern": [
            [
                -1,
                34,
                -1
            ],
            [
                34,
                34,
                34
            ],
            [
                -1,
                34,
                -1
            ]
        ]
    },
    {
        "id": 43,
        "n": "Bronze Platemail",
        "level": 20,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 9
            }
        ],
        "pattern": [
            [
                34,
                34,
                34
            ],
            [
                34,
                34,
                34
            ],
            [
                34,
                34,
                34
            ]
        ]
    },
    {
        "id": 51,
        "n": "Iron Short Sword",
        "level": 21,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 2
            },
            {
                "id": "313",
                "c": 1
            }
        ],
        "pattern": [
            [
                50
            ],
            [
                50
            ],
            [
                313
            ]
        ]
    },
    {
        "id": 25,
        "n": "Iron Helmet",
        "level": 24,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 4
            }
        ],
        "pattern": [
            [
                50,
                50
            ],
            [
                50,
                50
            ]
        ]
    },
    {
        "id": 52,
        "n": "Iron Boots",
        "level": 29,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                50,
                -1
            ],
            [
                50,
                50,
                50
            ]
        ]
    },
    {
        "id": 53,
        "n": "Iron Small Shield",
        "level": 30,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 4
            },
            {
                "id": "313",
                "c": 1
            }
        ],
        "pattern": [
            [
                -1,
                50,
                -1
            ],
            [
                50,
                313,
                50
            ],
            [
                -1,
                50,
                -1
            ]
        ]
    },
    {
        "id": 36,
        "n": "Forging Hammer",
        "level": 20,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "313",
                "c": 4
            }
        ],
        "pattern": [
            [
                313,
                313,
                313
            ],
            [
                -1,
                313,
                -1
            ]
        ]
    },
    {
        "id": 54,
        "n": "Iron Long Sword",
        "level": 22,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            },
            {
                "id": "313",
                "c": 3
            }
        ],
        "pattern": [
            [
                -1,
                50,
                -1
            ],
            [
                -1,
                50,
                -1
            ],
            [
                -1,
                50,
                -1
            ],
            [
                313,
                313,
                313
            ]
        ]
    },
    {
        "id": 55,
        "n": "Iron Mace",
        "level": 31,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 4
            },
            {
                "id": "313",
                "c": 2
            }
        ],
        "pattern": [
            [
                -1,
                50,
                -1
            ],
            [
                50,
                50,
                50
            ],
            [
                -1,
                313,
                -1
            ],
            [
                -1,
                313,
                -1
            ]
        ]
    },
    {
        "id": 56,
        "n": "Iron Scimitar",
        "level": 25,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            },
            {
                "id": "313",
                "c": 4
            }
        ],
        "pattern": [
            [
                50,
                50,
                -1
            ],
            [
                -1,
                50,
                -1
            ],
            [
                313,
                313,
                313
            ],
            [
                -1,
                313,
                -1
            ]
        ]
    },
    {
        "id": 57,
        "n": "Iron Broad Sword",
        "level": 23,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 4
            },
            {
                "id": "313",
                "c": 2
            }
        ],
        "pattern": [
            [
                50,
                50
            ],
            [
                50,
                50
            ],
            [
                313,
                313
            ]
        ]
    },
    {
        "id": 2,
        "n": "Iron Chainmail",
        "level": 32,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 6
            }
        ],
        "pattern": [
            [
                50,
                50
            ],
            [
                50,
                50
            ],
            [
                50,
                50
            ]
        ]
    },
    {
        "id": 58,
        "n": "Iron Gloves",
        "level": 26,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            }
        ],
        "pattern": [
            [
                50
            ],
            [
                50
            ],
            [
                50
            ]
        ]
    },
    {
        "id": 59,
        "n": "Iron Flail",
        "level": 28,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            },
            {
                "id": "313",
                "c": 5
            }
        ],
        "pattern": [
            [
                50,
                50,
                -1
            ],
            [
                -1,
                50,
                313
            ],
            [
                -1,
                313,
                313
            ],
            [
                -1,
                313,
                313
            ]
        ]
    },
    {
        "id": 60,
        "n": "Iron Scythe",
        "level": 27,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            },
            {
                "id": "313",
                "c": 8
            }
        ],
        "pattern": [
            [
                50,
                50,
                -1,
                -1
            ],
            [
                -1,
                50,
                313,
                313
            ],
            [
                -1,
                313,
                313,
                313
            ],
            [
                -1,
                313,
                313,
                313
            ]
        ]
    },
    {
        "id": 61,
        "n": "Iron Full Helmet",
        "level": 33,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 5
            }
        ],
        "pattern": [
            [
                -1,
                50,
                -1
            ],
            [
                50,
                -1,
                50
            ],
            [
                50,
                -1,
                50
            ]
        ]
    },
    {
        "id": 18,
        "n": "Iron Battle Axe",
        "level": 35,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 6
            },
            {
                "id": "313",
                "c": 2
            }
        ],
        "pattern": [
            [
                -1,
                50,
                50,
                -1
            ],
            [
                50,
                50,
                50,
                50
            ],
            [
                -1,
                313,
                313,
                -1
            ]
        ]
    },
    {
        "id": 62,
        "n": "Iron Battle Hammer",
        "level": 37,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 8
            },
            {
                "id": "313",
                "c": 2
            }
        ],
        "pattern": [
            [
                50,
                50,
                50,
                50
            ],
            [
                50,
                50,
                50,
                50
            ],
            [
                -1,
                313,
                313,
                -1
            ]
        ]
    },
    {
        "id": 67,
        "n": "Iron Excalibur",
        "level": 40,
        "min_chance": 0.1,
        "max_chance": 0.1,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 12
            },
            {
                "id": "313",
                "c": 4
            }
        ],
        "pattern": [
            [
                50,
                50,
                50,
                50
            ],
            [
                50,
                50,
                50,
                50
            ],
            [
                50,
                50,
                50,
                50
            ],
            [
                313,
                313,
                313,
                313
            ]
        ]
    },
    {
        "id": 65,
        "n": "Iron Large Shield",
        "level": 36,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 8
            },
            {
                "id": "313",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                50,
                50,
                -1
            ],
            [
                50,
                313,
                313,
                50
            ],
            [
                50,
                313,
                313,
                50
            ],
            [
                -1,
                50,
                50,
                -1
            ]
        ]
    },
    {
        "id": 66,
        "n": "Iron Platemail",
        "level": 39,
        "min_chance": 0.1,
        "max_chance": 0.1,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 8
            }
        ],
        "pattern": [
            [
                50,
                50
            ],
            [
                50,
                50
            ],
            [
                50,
                50
            ],
            [
                50,
                50
            ]
        ]
    },
    {
        "id": 125,
        "n": "Wooden Harpoon",
        "level": 35,
        "min_chance": 0.1,
        "max_chance": 0.1,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 6
            }
        ],
        "pattern": [
            [
                29,
                29,
                29
            ],
            [
                -1,
                29,
                -1
            ],
            [
                -1,
                29,
                -1
            ],
            [
                -1,
                29,
                -1
            ]
        ]
    },
    {
        "id": 188,
        "n": "Steel Helmet",
        "level": 44,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 4
            }
        ],
        "pattern": [
            [
                291,
                291
            ],
            [
                291,
                291
            ]
        ]
    },
    {
        "id": 143,
        "n": "Steel Scimitar",
        "level": 41,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 6
            },
            {
                "id": "296",
                "c": 3
            }
        ],
        "pattern": [
            [
                296,
                296,
                296
            ],
            [
                291,
                291,
                291
            ],
            [
                -1,
                291,
                -1
            ],
            [
                291,
                291,
                -1
            ]
        ]
    },
    {
        "id": 142,
        "n": "Steel Long Sword",
        "level": 40,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 3
            },
            {
                "id": "296",
                "c": 3
            }
        ],
        "pattern": [
            [
                296,
                296,
                296
            ],
            [
                -1,
                291,
                -1
            ],
            [
                -1,
                291,
                -1
            ],
            [
                -1,
                291,
                -1
            ]
        ]
    },
    {
        "id": 141,
        "n": "Steel Broad Sword",
        "level": 43,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 4
            },
            {
                "id": "296",
                "c": 3
            }
        ],
        "pattern": [
            [
                296,
                296,
                296
            ],
            [
                -1,
                291,
                291
            ],
            [
                -1,
                291,
                291
            ]
        ]
    },
    {
        "id": 146,
        "n": "Steel War Pike",
        "level": 42,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 3
            },
            {
                "id": "296",
                "c": 3
            }
        ],
        "pattern": [
            [
                -1,
                -1,
                291,
                291
            ],
            [
                -1,
                -1,
                296,
                291
            ],
            [
                -1,
                296,
                -1,
                -1
            ],
            [
                296,
                -1,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 191,
        "n": "Steel Chainmail",
        "level": 48,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 7
            }
        ],
        "pattern": [
            [
                291,
                -1,
                291
            ],
            [
                291,
                -1,
                291
            ],
            [
                291,
                291,
                291
            ]
        ]
    },
    {
        "id": 189,
        "n": "Steel Full Helmet",
        "level": 54,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 8
            }
        ],
        "pattern": [
            [
                291,
                291,
                291
            ],
            [
                291,
                -1,
                291
            ],
            [
                291,
                291,
                291
            ]
        ]
    },
    {
        "id": 147,
        "n": "Steel Saw Blade",
        "level": 46,
        "min_chance": 0.55,
        "max_chance": 0.55,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 3
            },
            {
                "id": "296",
                "c": 4
            }
        ],
        "pattern": [
            [
                296,
                291
            ],
            [
                296,
                291
            ],
            [
                296,
                291
            ],
            [
                296,
                -1
            ]
        ]
    },
    {
        "id": 144,
        "n": "Steel Scythe",
        "level": 49,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 3
            },
            {
                "id": "296",
                "c": 5
            }
        ],
        "pattern": [
            [
                296,
                291,
                -1,
                -1
            ],
            [
                291,
                296,
                -1,
                -1
            ],
            [
                291,
                -1,
                296,
                -1
            ],
            [
                -1,
                -1,
                296,
                296
            ]
        ]
    },
    {
        "id": 140,
        "n": "Steel Battle Axe",
        "level": 50,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 5
            },
            {
                "id": "296",
                "c": 2
            }
        ],
        "pattern": [
            [
                -1,
                291,
                291,
                296
            ],
            [
                -1,
                296,
                291,
                291
            ],
            [
                291,
                -1,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 139,
        "n": "Steel Battle Hammer",
        "level": 56,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 6
            },
            {
                "id": "296",
                "c": 6
            }
        ],
        "pattern": [
            [
                291,
                291,
                291,
                291
            ],
            [
                291,
                296,
                296,
                291
            ],
            [
                -1,
                296,
                296,
                -1
            ],
            [
                -1,
                296,
                296,
                -1
            ]
        ]
    },
    {
        "id": 193,
        "n": "Large Steel Shield",
        "level": 55,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 8
            }
        ],
        "pattern": [
            [
                -1,
                291,
                -1
            ],
            [
                291,
                291,
                291
            ],
            [
                291,
                291,
                291
            ],
            [
                -1,
                291,
                -1
            ]
        ]
    },
    {
        "id": 190,
        "n": "Steel Platemail",
        "level": 60,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 9
            }
        ],
        "pattern": [
            [
                291,
                291,
                291
            ],
            [
                291,
                291,
                291
            ],
            [
                291,
                291,
                291
            ]
        ]
    },
    {
        "id": 148,
        "n": "Steel Halberd",
        "level": 52,
        "min_chance": 0.2,
        "max_chance": 0.2,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 5
            },
            {
                "id": "296",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                -1,
                291,
                291
            ],
            [
                -1,
                291,
                296,
                291
            ],
            [
                -1,
                296,
                296,
                291
            ],
            [
                296,
                -1,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 149,
        "n": "Steel Giant Sword",
        "level": 53,
        "min_chance": 0.2,
        "max_chance": 0.2,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 9
            }
        ],
        "pattern": [
            [
                -1,
                -1,
                291,
                -1
            ],
            [
                -1,
                291,
                291,
                -1
            ],
            [
                -1,
                291,
                291,
                -1
            ],
            [
                291,
                291,
                291,
                291
            ]
        ]
    },
    {
        "id": 145,
        "n": "Steel Lance",
        "level": 58,
        "min_chance": 0.1,
        "max_chance": 0.1,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 8
            }
        ],
        "pattern": [
            [
                -1,
                -1,
                291,
                291
            ],
            [
                -1,
                -1,
                291,
                291
            ],
            [
                291,
                291,
                -1,
                -1
            ],
            [
                291,
                291,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 339,
        "n": "Steel Boots",
        "level": 47,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 6
            }
        ],
        "pattern": [
            [
                -1,
                291,
                291
            ],
            [
                291,
                291,
                291
            ],
            [
                -1,
                291,
                -1
            ]
        ]
    },
    {
        "id": 340,
        "n": "Sapphire Boots",
        "level": 71,
        "min_chance": 0.35,
        "max_chance": 0.35,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 3
            },
            {
                "id": "216",
                "c": 1
            },
            {
                "id": "250",
                "c": 3
            }
        ],
        "pattern": [
            [
                250,
                250,
                250
            ],
            [
                201,
                201,
                201
            ],
            [
                -1,
                216,
                -1
            ]
        ]
    },
    {
        "id": 342,
        "n": "Emerald Dragon Boots",
        "level": 75,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 4
            },
            {
                "id": "231",
                "c": 2
            },
            {
                "id": "254",
                "c": 3
            }
        ],
        "pattern": [
            [
                254,
                254,
                254
            ],
            [
                199,
                199,
                199
            ],
            [
                231,
                199,
                231
            ]
        ]
    },
    {
        "id": 344,
        "n": "Ruby Dragon Boots",
        "level": 80,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 2
            },
            {
                "id": "224",
                "c": 2
            },
            {
                "id": "252",
                "c": 2
            }
        ],
        "pattern": [
            [
                252,
                252
            ],
            [
                197,
                197
            ],
            [
                224,
                224
            ]
        ]
    },
    {
        "id": 366,
        "n": "Bone Helmet",
        "level": 10,
        "min_chance": 0.55,
        "max_chance": 0.55,
        "skill": "forging",
        "matts": [
            {
                "id": "270",
                "c": 2
            },
            {
                "id": "274",
                "c": 2
            }
        ],
        "pattern": [
            [
                270,
                270
            ],
            [
                274,
                274
            ]
        ]
    },
    {
        "id": 368,
        "n": "Bone Armor",
        "level": 15,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "271",
                "c": 2
            },
            {
                "id": "272",
                "c": 1
            },
            {
                "id": "273",
                "c": 2
            },
            {
                "id": "274",
                "c": 1
            }
        ],
        "pattern": [
            [
                271,
                273
            ],
            [
                271,
                273
            ],
            [
                272,
                274
            ]
        ]
    },
    {
        "id": 367,
        "n": "Angel Wings",
        "level": 1,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "369",
                "c": 8
            }
        ],
        "pattern": [
            [
                369,
                -1,
                369
            ],
            [
                369,
                369,
                369
            ],
            [
                369,
                369,
                369
            ]
        ]
    },
    {
        "id": 359,
        "n": "Archangel Wings",
        "level": 1,
        "min_chance": 0.15,
        "max_chance": 0.15,
        "skill": "forging",
        "matts": [
            {
                "id": "367",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1303",
                "c": 1
            }
        ],
        "pattern": [
            [
                367,
                1303,
                371
            ]
        ]
    },
    {
        "id": 359,
        "n": "Archangel Wings",
        "level": 1,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "367",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1304",
                "c": 1
            }
        ],
        "pattern": [
            [
                367,
                1304,
                371
            ]
        ]
    },
    {
        "id": 346,
        "n": "Devil Wings",
        "level": 1,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "370",
                "c": 8
            }
        ],
        "pattern": [
            [
                370,
                370,
                370
            ],
            [
                370,
                370,
                370
            ],
            [
                370,
                -1,
                370
            ]
        ]
    },
    {
        "id": 360,
        "n": "Archdevil Wings",
        "level": 1,
        "min_chance": 0.15,
        "max_chance": 0.15,
        "skill": "forging",
        "matts": [
            {
                "id": "346",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1303",
                "c": 1
            }
        ],
        "pattern": [
            [
                346,
                1303,
                371
            ]
        ]
    },
    {
        "id": 360,
        "n": "Archdevil Wings",
        "level": 1,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "346",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1304",
                "c": 1
            }
        ],
        "pattern": [
            [
                346,
                1304,
                371
            ]
        ]
    },
    {
        "id": 35,
        "n": "Sapphire Platemail",
        "level": 80,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 3
            },
            {
                "id": "384",
                "c": 6
            }
        ],
        "pattern": [
            [
                384,
                384,
                384
            ],
            [
                201,
                201,
                201
            ],
            [
                384,
                384,
                384
            ]
        ]
    },
    {
        "id": 138,
        "n": "Sapphire Long Sword",
        "level": 65,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 2
            },
            {
                "id": "384",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                201,
                -1
            ],
            [
                384,
                201,
                384
            ],
            [
                -1,
                384,
                -1
            ],
            [
                -1,
                384,
                -1
            ]
        ]
    },
    {
        "id": 394,
        "n": "Sapphire Barbarian Axe",
        "level": 77,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 2
            },
            {
                "id": "216",
                "c": 1
            },
            {
                "id": "384",
                "c": 5
            }
        ],
        "pattern": [
            [
                -1,
                -1,
                384,
                216
            ],
            [
                -1,
                201,
                384,
                384
            ],
            [
                -1,
                384,
                201,
                -1
            ],
            [
                384,
                -1,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 365,
        "n": "Dragon Slayer",
        "level": 1,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "396",
                "c": 1
            },
            {
                "id": "397",
                "c": 1
            },
            {
                "id": "398",
                "c": 1
            },
            {
                "id": "399",
                "c": 1
            }
        ],
        "pattern": [
            [
                396,
                397,
                398,
                399
            ]
        ]
    },
    {
        "id": 393,
        "n": "Sapphire Halberd",
        "level": 75,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 2
            },
            {
                "id": "216",
                "c": 1
            },
            {
                "id": "384",
                "c": 6
            }
        ],
        "pattern": [
            [
                201,
                384,
                201,
                384
            ],
            [
                -1,
                384,
                384,
                -1
            ],
            [
                -1,
                384,
                216,
                -1
            ],
            [
                -1,
                384,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 426,
        "n": "Emerald Wand",
        "level": 10,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "313",
                "c": 3
            }
        ],
        "pattern": [
            [
                199
            ],
            [
                313
            ],
            [
                313
            ],
            [
                313
            ]
        ]
    },
    {
        "id": 428,
        "n": "Ruby Wand",
        "level": 40,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 3
            },
            {
                "id": "197",
                "c": 1
            }
        ],
        "pattern": [
            [
                197
            ],
            [
                29
            ],
            [
                29
            ],
            [
                29
            ]
        ]
    },
    {
        "id": 434,
        "n": "Wooden Staff",
        "level": 1,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 4
            }
        ],
        "pattern": [
            [
                29
            ],
            [
                29
            ],
            [
                29
            ],
            [
                29
            ]
        ]
    },
    {
        "id": 435,
        "n": "Iron Staff",
        "level": 30,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 2
            }
        ],
        "pattern": [
            [
                50
            ],
            [
                50
            ]
        ]
    },
    {
        "id": 438,
        "n": "Emerald Staff",
        "level": 20,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 2
            },
            {
                "id": "296",
                "c": 6
            }
        ],
        "pattern": [
            [
                199,
                199
            ],
            [
                296,
                296
            ],
            [
                296,
                296
            ],
            [
                296,
                296
            ]
        ]
    },
    {
        "id": 442,
        "n": "Amethyst Staff",
        "level": 40,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "386",
                "c": 2
            },
            {
                "id": "595",
                "c": 6
            }
        ],
        "pattern": [
            [
                386,
                386
            ],
            [
                595,
                595
            ],
            [
                595,
                595
            ],
            [
                595,
                595
            ]
        ]
    },
    {
        "id": 440,
        "n": "Ruby Staff",
        "level": 30,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 2
            },
            {
                "id": "594",
                "c": 6
            }
        ],
        "pattern": [
            [
                197,
                197
            ],
            [
                594,
                594
            ],
            [
                594,
                594
            ],
            [
                594,
                594
            ]
        ]
    },
    {
        "id": 472,
        "n": "Gilded Gryffin Armor",
        "level": 40,
        "min_chance": 0.15,
        "max_chance": 0.15,
        "skill": "forging",
        "matts": [
            {
                "id": "153",
                "c": 1
            },
            {
                "id": "176",
                "c": 1
            },
            {
                "id": "219",
                "c": 1
            }
        ],
        "pattern": [
            [
                153,
                176,
                219
            ]
        ]
    },
    {
        "id": 472,
        "n": "Gilded Gryffin Armor",
        "level": 40,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "153",
                "c": 1
            },
            {
                "id": "177",
                "c": 1
            },
            {
                "id": "219",
                "c": 1
            }
        ],
        "pattern": [
            [
                153,
                177,
                219
            ]
        ]
    },
    {
        "id": 359,
        "n": "Archangel Wings",
        "level": 1,
        "min_chance": 0.35,
        "max_chance": 0.35,
        "skill": "forging",
        "matts": [
            {
                "id": "367",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1305",
                "c": 1
            }
        ],
        "pattern": [
            [
                367,
                1305,
                371
            ]
        ]
    },
    {
        "id": 359,
        "n": "Archangel Wings",
        "level": 1,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "367",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1306",
                "c": 1
            }
        ],
        "pattern": [
            [
                367,
                1306,
                371
            ]
        ]
    },
    {
        "id": 360,
        "n": "Archdevil Wings",
        "level": 1,
        "min_chance": 0.35,
        "max_chance": 0.35,
        "skill": "forging",
        "matts": [
            {
                "id": "346",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1305",
                "c": 1
            }
        ],
        "pattern": [
            [
                346,
                1305,
                371
            ]
        ]
    },
    {
        "id": 360,
        "n": "Archdevil Wings",
        "level": 1,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "346",
                "c": 1
            },
            {
                "id": "371",
                "c": 1
            },
            {
                "id": "1306",
                "c": 1
            }
        ],
        "pattern": [
            [
                346,
                1306,
                371
            ]
        ]
    },
    {
        "id": 472,
        "n": "Gilded Gryffin Armor",
        "level": 40,
        "min_chance": 0.35,
        "max_chance": 0.35,
        "skill": "forging",
        "matts": [
            {
                "id": "153",
                "c": 1
            },
            {
                "id": "178",
                "c": 1
            },
            {
                "id": "219",
                "c": 1
            }
        ],
        "pattern": [
            [
                153,
                178,
                219
            ]
        ]
    },
    {
        "id": 472,
        "n": "Gilded Gryffin Armor",
        "level": 40,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "153",
                "c": 1
            },
            {
                "id": "179",
                "c": 1
            },
            {
                "id": "219",
                "c": 1
            }
        ],
        "pattern": [
            [
                153,
                179,
                219
            ]
        ]
    },
    {
        "id": 473,
        "n": "Bronze Pants",
        "level": 13,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 6
            }
        ],
        "pattern": [
            [
                -1,
                34,
                34,
                -1
            ],
            [
                -1,
                34,
                34,
                -1
            ],
            [
                34,
                -1,
                -1,
                34
            ]
        ]
    },
    {
        "id": 474,
        "n": "Iron Pants",
        "level": 34,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 6
            }
        ],
        "pattern": [
            [
                -1,
                50,
                50,
                -1
            ],
            [
                -1,
                50,
                50,
                -1
            ],
            [
                50,
                -1,
                -1,
                50
            ]
        ]
    },
    {
        "id": 475,
        "n": "Steel Pants",
        "level": 51,
        "min_chance": 0.35,
        "max_chance": 0.35,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 6
            }
        ],
        "pattern": [
            [
                -1,
                291,
                291,
                -1
            ],
            [
                -1,
                291,
                291,
                -1
            ],
            [
                291,
                -1,
                -1,
                291
            ]
        ]
    },
    {
        "id": 476,
        "n": "Sapphire Dragon Pants",
        "level": 73,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "250",
                "c": 2
            },
            {
                "id": "384",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                250,
                250,
                -1
            ],
            [
                -1,
                384,
                384,
                -1
            ],
            [
                384,
                -1,
                -1,
                384
            ]
        ]
    },
    {
        "id": 477,
        "n": "Flame Phoenix Pants",
        "level": 76,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "371",
                "c": 2
            },
            {
                "id": "384",
                "c": 4
            }
        ],
        "pattern": [
            [
                -1,
                371,
                371,
                -1
            ],
            [
                -1,
                384,
                384,
                -1
            ],
            [
                384,
                -1,
                -1,
                384
            ]
        ]
    },
    {
        "id": 478,
        "n": "Amethyst Pants",
        "level": 82,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "386",
                "c": 4
            },
            {
                "id": "658",
                "c": 2
            }
        ],
        "pattern": [
            [
                -1,
                658,
                658,
                -1
            ],
            [
                -1,
                386,
                386,
                -1
            ],
            [
                386,
                -1,
                -1,
                386
            ]
        ]
    },
    {
        "id": 497,
        "n": "Steel Gloves",
        "level": 45,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "291",
                "c": 3
            }
        ],
        "pattern": [
            [
                291
            ],
            [
                291
            ],
            [
                291
            ]
        ]
    },
    {
        "id": 498,
        "n": "Sapphire Gloves",
        "level": 68,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "250",
                "c": 2
            },
            {
                "id": "384",
                "c": 1
            }
        ],
        "pattern": [
            [
                250
            ],
            [
                250
            ],
            [
                384
            ]
        ]
    },
    {
        "id": 500,
        "n": "Ruby Dragon Gloves",
        "level": 75,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "252",
                "c": 2
            },
            {
                "id": "384",
                "c": 1
            }
        ],
        "pattern": [
            [
                252
            ],
            [
                252
            ],
            [
                384
            ]
        ]
    },
    {
        "id": 499,
        "n": "Ruby Dragon Gloves Of Power",
        "level": 75,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                263
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 499,
        "n": "Ruby Dragon Gloves Of Power",
        "level": 75,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                258
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 499,
        "n": "Ruby Dragon Gloves Of Power",
        "level": 75,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                257
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 499,
        "n": "Ruby Dragon Gloves Of Power",
        "level": 75,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                262
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 501,
        "n": "Diamond Gloves",
        "level": 80,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 2
            },
            {
                "id": "256",
                "c": 1
            }
        ],
        "pattern": [
            [
                256
            ],
            [
                195
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 502,
        "n": "Diamond Gloves Of Power",
        "level": 80,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                263
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 502,
        "n": "Diamond Gloves Of Power",
        "level": 80,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                258
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 502,
        "n": "Diamond Gloves Of Power",
        "level": 80,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                257
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 502,
        "n": "Diamond Gloves Of Power",
        "level": 80,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                262
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 173,
        "n": "Medium Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "64",
                "c": 4
            }
        ],
        "pattern": [
            [
                64,
                64,
                64,
                64
            ]
        ]
    },
    {
        "id": 174,
        "n": "High Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "173",
                "c": 3
            }
        ],
        "pattern": [
            [
                173,
                173,
                173
            ]
        ]
    },
    {
        "id": 177,
        "n": "Medium Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "176",
                "c": 4
            }
        ],
        "pattern": [
            [
                176,
                176,
                176,
                176
            ]
        ]
    },
    {
        "id": 178,
        "n": "High Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "177",
                "c": 3
            }
        ],
        "pattern": [
            [
                177,
                177,
                177
            ]
        ]
    },
    {
        "id": 159,
        "n": "Fire Dragon Platemail",
        "level": 93,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "252",
                "c": 2
            },
            {
                "id": "658",
                "c": 4
            }
        ],
        "pattern": [
            [
                252,
                252
            ],
            [
                658,
                658
            ],
            [
                658,
                658
            ]
        ]
    },
    {
        "id": 664,
        "n": "Fire Helmet",
        "level": 80,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "658",
                "c": 4
            }
        ],
        "pattern": [
            [
                658,
                658
            ],
            [
                658,
                658
            ]
        ]
    },
    {
        "id": 665,
        "n": "Full Fire Helmet",
        "level": 88,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "252",
                "c": 2
            },
            {
                "id": "658",
                "c": 7
            }
        ],
        "pattern": [
            [
                252,
                252,
                658
            ],
            [
                658,
                658,
                658
            ],
            [
                658,
                658,
                658
            ]
        ]
    },
    {
        "id": 666,
        "n": "Fire Flail",
        "level": 90,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "224",
                "c": 1
            },
            {
                "id": "597",
                "c": 1
            },
            {
                "id": "658",
                "c": 6
            }
        ],
        "pattern": [
            [
                -1,
                224,
                -1
            ],
            [
                -1,
                597,
                -1
            ],
            [
                658,
                658,
                658
            ],
            [
                658,
                658,
                658
            ]
        ]
    },
    {
        "id": 668,
        "n": "Fire Battle Axe",
        "level": 95,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "224",
                "c": 1
            },
            {
                "id": "597",
                "c": 3
            },
            {
                "id": "658",
                "c": 4
            }
        ],
        "pattern": [
            [
                658,
                224,
                658
            ],
            [
                658,
                597,
                658
            ],
            [
                -1,
                597,
                -1
            ],
            [
                -1,
                597,
                -1
            ]
        ]
    },
    {
        "id": 797,
        "n": "Bone Dagger",
        "level": 10,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "270",
                "c": 1
            },
            {
                "id": "272",
                "c": 3
            },
            {
                "id": "274",
                "c": 1
            }
        ],
        "pattern": [
            [
                -1,
                274,
                -1
            ],
            [
                272,
                272,
                272
            ],
            [
                -1,
                270,
                -1
            ]
        ]
    },
    {
        "id": 799,
        "n": "Bone Long Sword",
        "level": 15,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "270",
                "c": 2
            },
            {
                "id": "272",
                "c": 3
            },
            {
                "id": "274",
                "c": 1
            }
        ],
        "pattern": [
            [
                -1,
                274,
                -1
            ],
            [
                -1,
                270,
                -1
            ],
            [
                272,
                272,
                272
            ],
            [
                -1,
                270,
                -1
            ]
        ]
    },
    {
        "id": 801,
        "n": "Bone Shield",
        "level": 13,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "270",
                "c": 1
            },
            {
                "id": "272",
                "c": 1
            },
            {
                "id": "273",
                "c": 6
            }
        ],
        "pattern": [
            [
                273,
                273,
                273
            ],
            [
                -1,
                272,
                -1
            ],
            [
                -1,
                270,
                -1
            ],
            [
                273,
                273,
                273
            ]
        ]
    },
    {
        "id": 436,
        "n": "Sapphire Staff",
        "level": 10,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "29",
                "c": 6
            },
            {
                "id": "201",
                "c": 2
            }
        ],
        "pattern": [
            [
                201,
                201
            ],
            [
                29,
                29
            ],
            [
                29,
                29
            ],
            [
                29,
                29
            ]
        ]
    },
    {
        "id": 910,
        "n": "Unicorn Blade",
        "level": 70,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "253",
                "c": 6
            },
            {
                "id": "911",
                "c": 2
            }
        ],
        "pattern": [
            [
                911,
                911
            ],
            [
                253,
                253
            ],
            [
                253,
                253
            ],
            [
                253,
                253
            ]
        ]
    },
    {
        "id": 904,
        "n": "Statue of Kronos",
        "level": 95,
        "min_chance": 0.05,
        "max_chance": 0.05,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 1
            },
            {
                "id": "50",
                "c": 1
            },
            {
                "id": "291",
                "c": 1
            },
            {
                "id": "384",
                "c": 1
            },
            {
                "id": "658",
                "c": 1
            }
        ],
        "pattern": [
            [
                34,
                50,
                291
            ],
            [
                384,
                658
            ]
        ]
    },
    {
        "id": 909,
        "n": "Kronos Blade",
        "level": 95,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "666",
                "c": 1
            },
            {
                "id": "668",
                "c": 1
            },
            {
                "id": "904",
                "c": 3
            }
        ],
        "pattern": [
            [
                666,
                904,
                668
            ],
            [
                904,
                -1,
                904
            ]
        ]
    },
    {
        "id": 891,
        "n": "Baby Cupid [Legendary]",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "898",
                "c": 1
            },
            {
                "id": "900",
                "c": 1
            },
            {
                "id": "901",
                "c": 1
            },
            {
                "id": "903",
                "c": 1
            }
        ],
        "pattern": [
            [
                -1,
                901,
                -1
            ],
            [
                900,
                898,
                903
            ]
        ]
    },
    {
        "id": 896,
        "n": "Diablo [Legendary]",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "710",
                "c": 1
            },
            {
                "id": "711",
                "c": 1
            },
            {
                "id": "895",
                "c": 1
            }
        ],
        "pattern": [
            [
                711,
                895,
                710
            ]
        ]
    },
    {
        "id": 585,
        "n": "Ruby Dragon Gloves Of Defense",
        "level": 75,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                263
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 585,
        "n": "Ruby Dragon Gloves Of Defense",
        "level": 75,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                258
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 585,
        "n": "Ruby Dragon Gloves Of Defense",
        "level": 75,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                257
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 585,
        "n": "Ruby Dragon Gloves Of Defense",
        "level": 75,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                262
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 584,
        "n": "Ruby Dragon Gloves Of Accuracy",
        "level": 75,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                263
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 584,
        "n": "Ruby Dragon Gloves Of Accuracy",
        "level": 75,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                258
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 584,
        "n": "Ruby Dragon Gloves Of Accuracy",
        "level": 75,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                257
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 584,
        "n": "Ruby Dragon Gloves Of Accuracy",
        "level": 75,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                262
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 583,
        "n": "Ruby Dragon Gloves Of Magic",
        "level": 75,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                263
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 583,
        "n": "Ruby Dragon Gloves Of Magic",
        "level": 75,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                258
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 583,
        "n": "Ruby Dragon Gloves Of Magic",
        "level": 75,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                257
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 583,
        "n": "Ruby Dragon Gloves Of Magic",
        "level": 75,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "500",
                "c": 1
            }
        ],
        "pattern": [
            [
                500
            ],
            [
                262
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 932,
        "n": "Emerald Chainmail",
        "level": 38,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 2
            },
            {
                "id": "254",
                "c": 2
            }
        ],
        "pattern": [
            [
                50,
                50
            ],
            [
                254,
                254
            ]
        ]
    },
    {
        "id": 934,
        "n": "Emerald Platemail",
        "level": 45,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 1
            },
            {
                "id": "254",
                "c": 4
            }
        ],
        "pattern": [
            [
                254,
                254
            ],
            [
                254,
                254
            ],
            [
                50
            ]
        ]
    },
    {
        "id": 936,
        "n": "Emerald Pants",
        "level": 40,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 4
            },
            {
                "id": "254",
                "c": 2
            }
        ],
        "pattern": [
            [
                -1,
                254,
                254,
                -1
            ],
            [
                -1,
                50,
                50,
                -1
            ],
            [
                50,
                -1,
                -1,
                50
            ]
        ]
    },
    {
        "id": 938,
        "n": "Emerald Long Sword",
        "level": 31,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 2
            },
            {
                "id": "231",
                "c": 1
            }
        ],
        "pattern": [
            [
                231
            ],
            [
                50
            ],
            [
                50
            ]
        ]
    },
    {
        "id": 940,
        "n": "Emerald Sabre",
        "level": 32,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            },
            {
                "id": "231",
                "c": 1
            }
        ],
        "pattern": [
            [
                231
            ],
            [
                50
            ],
            [
                50
            ],
            [
                50
            ]
        ]
    },
    {
        "id": 942,
        "n": "Emerald Katana",
        "level": 33,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 3
            },
            {
                "id": "231",
                "c": 1
            }
        ],
        "pattern": [
            [
                50
            ],
            [
                50
            ],
            [
                50
            ],
            [
                231
            ]
        ]
    },
    {
        "id": 944,
        "n": "Emerald Warhammer",
        "level": 44,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 2
            },
            {
                "id": "231",
                "c": 2
            }
        ],
        "pattern": [
            [
                231,
                231
            ],
            [
                50,
                50
            ]
        ]
    },
    {
        "id": 951,
        "n": "Ice Wings",
        "level": 55,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "949",
                "c": 6
            }
        ],
        "pattern": [
            [
                949,
                949,
                949
            ],
            [
                949,
                949,
                949
            ]
        ]
    },
    {
        "id": 952,
        "n": "Lightning Wings",
        "level": 70,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "950",
                "c": 6
            }
        ],
        "pattern": [
            [
                950,
                950
            ],
            [
                950,
                950
            ],
            [
                950,
                950
            ]
        ]
    },
    {
        "id": 953,
        "n": "Nephilim Wings",
        "level": 1,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "359",
                "c": 1
            },
            {
                "id": "360",
                "c": 1
            },
            {
                "id": "947",
                "c": 1
            }
        ],
        "pattern": [
            [
                359,
                947,
                360
            ]
        ]
    },
    {
        "id": 969,
        "n": "Juggernaut Pants",
        "level": 88,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "982",
                "c": 4
            }
        ],
        "pattern": [
            [
                982,
                982
            ],
            [
                982,
                982
            ]
        ]
    },
    {
        "id": 962,
        "n": "Juggernaut Platemail",
        "level": 94,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "982",
                "c": 8
            }
        ],
        "pattern": [
            [
                982,
                982
            ],
            [
                982,
                982
            ],
            [
                982,
                982
            ],
            [
                982,
                982
            ]
        ]
    },
    {
        "id": 977,
        "n": "Juggernaut Helmet",
        "level": 86,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "982",
                "c": 4
            }
        ],
        "pattern": [
            [
                982,
                -1,
                982
            ],
            [
                982,
                -1,
                982
            ]
        ]
    },
    {
        "id": 982,
        "n": "Warrior Trophy",
        "level": 85,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "983",
                "c": 4
            }
        ],
        "pattern": [
            [
                983,
                983
            ],
            [
                983,
                983
            ]
        ]
    },
    {
        "id": 974,
        "n": "Ichor Helmet",
        "level": 95,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "911",
                "c": 4
            },
            {
                "id": "981",
                "c": 6
            }
        ],
        "pattern": [
            [
                981,
                981,
                981
            ],
            [
                981,
                981,
                981
            ],
            [
                911,
                -1,
                911
            ],
            [
                911,
                -1,
                911
            ]
        ]
    },
    {
        "id": 1032,
        "n": "Ichor Pants",
        "level": 97,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "911",
                "c": 4
            },
            {
                "id": "981",
                "c": 8
            }
        ],
        "pattern": [
            [
                981,
                981,
                981,
                981
            ],
            [
                981,
                981,
                981,
                981
            ],
            [
                911,
                911,
                911,
                911
            ]
        ]
    },
    {
        "id": 972,
        "n": "Ichor Platemail",
        "level": 99,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "911",
                "c": 4
            },
            {
                "id": "981",
                "c": 10
            }
        ],
        "pattern": [
            [
                981,
                981,
                981,
                981
            ],
            [
                981,
                981,
                981,
                981
            ],
            [
                -1,
                981,
                981,
                -1
            ],
            [
                911,
                911,
                911,
                911
            ]
        ]
    },
    {
        "id": 968,
        "n": "7 Souls Jewel",
        "level": 99,
        "min_chance": 0.2,
        "max_chance": 0.2,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 2
            },
            {
                "id": "197",
                "c": 2
            },
            {
                "id": "199",
                "c": 3
            },
            {
                "id": "201",
                "c": 2
            },
            {
                "id": "386",
                "c": 1
            },
            {
                "id": "388",
                "c": 1
            },
            {
                "id": "390",
                "c": 1
            }
        ],
        "pattern": [
            [
                201,
                197,
                197,
                201
            ],
            [
                199,
                199,
                195,
                195
            ],
            [
                199,
                386,
                388,
                390
            ]
        ]
    },
    {
        "id": 966,
        "n": "7 Souls Platemail",
        "level": 99,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "35",
                "c": 1
            },
            {
                "id": "158",
                "c": 1
            },
            {
                "id": "159",
                "c": 1
            },
            {
                "id": "160",
                "c": 1
            },
            {
                "id": "934",
                "c": 1
            },
            {
                "id": "968",
                "c": 4
            }
        ],
        "pattern": [
            [
                968,
                35,
                934,
                968
            ],
            [
                968,
                159,
                160,
                968
            ],
            [
                -1,
                158,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 980,
        "n": "Shiva Hat",
        "level": 75,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 4
            },
            {
                "id": "450",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                450,
                388
            ],
            [
                388,
                -1,
                388
            ]
        ]
    },
    {
        "id": 985,
        "n": "Shiva Robe",
        "level": 84,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 6
            },
            {
                "id": "456",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                456,
                388
            ],
            [
                388,
                -1,
                388
            ],
            [
                388,
                -1,
                388
            ]
        ]
    },
    {
        "id": 987,
        "n": "Shiva Robe Bottom",
        "level": 80,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 4
            },
            {
                "id": "482",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                -1,
                388
            ],
            [
                388,
                482,
                388
            ]
        ]
    },
    {
        "id": 976,
        "n": "Bronze Full Helmet",
        "level": 16,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "34",
                "c": 6
            }
        ],
        "pattern": [
            [
                34,
                -1,
                34
            ],
            [
                34,
                34,
                34
            ],
            [
                -1,
                34,
                -1
            ]
        ]
    },
    {
        "id": 587,
        "n": "Diamond Gloves Of Accuracy",
        "level": 80,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                263
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 587,
        "n": "Diamond Gloves Of Accuracy",
        "level": 80,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                258
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 587,
        "n": "Diamond Gloves Of Accuracy",
        "level": 80,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                257
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 587,
        "n": "Diamond Gloves Of Accuracy",
        "level": 80,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                262
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 586,
        "n": "Diamond Gloves Of Defense",
        "level": 80,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                263
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 586,
        "n": "Diamond Gloves Of Defense",
        "level": 80,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                258
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 586,
        "n": "Diamond Gloves Of Defense",
        "level": 80,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                257
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 586,
        "n": "Diamond Gloves Of Defense",
        "level": 80,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                262
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 588,
        "n": "Diamond Gloves Of Magic",
        "level": 80,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                263
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 588,
        "n": "Diamond Gloves Of Magic",
        "level": 80,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                258
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 588,
        "n": "Diamond Gloves Of Magic",
        "level": 80,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                257
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 588,
        "n": "Diamond Gloves Of Magic",
        "level": 80,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "501",
                "c": 1
            }
        ],
        "pattern": [
            [
                501
            ],
            [
                262
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 986,
        "n": "Demigod Robe",
        "level": 92,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 4
            },
            {
                "id": "454",
                "c": 1
            },
            {
                "id": "867",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                867,
                388
            ],
            [
                388,
                454,
                388
            ]
        ]
    },
    {
        "id": 984,
        "n": "Demigod Hat",
        "level": 86,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 2
            },
            {
                "id": "451",
                "c": 1
            },
            {
                "id": "863",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                863,
                388
            ],
            [
                -1,
                451,
                -1
            ]
        ]
    },
    {
        "id": 979,
        "n": "Demigod Robe Bottom",
        "level": 89,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 2
            },
            {
                "id": "483",
                "c": 1
            },
            {
                "id": "859",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                859,
                388
            ],
            [
                -1,
                483,
                -1
            ]
        ]
    },
    {
        "id": 1038,
        "n": "Ichor Shield",
        "level": 98,
        "min_chance": 0.2,
        "max_chance": 0.2,
        "skill": "forging",
        "matts": [
            {
                "id": "911",
                "c": 3
            },
            {
                "id": "981",
                "c": 10
            }
        ],
        "pattern": [
            [
                981,
                981,
                981,
                -1
            ],
            [
                981,
                981,
                981,
                -1
            ],
            [
                981,
                981,
                981,
                -1
            ],
            [
                911,
                911,
                911,
                981
            ]
        ]
    },
    {
        "id": 1037,
        "n": "Kronos Shield",
        "level": 96,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "167",
                "c": 1
            },
            {
                "id": "904",
                "c": 1
            }
        ],
        "pattern": [
            [
                167,
                904
            ]
        ]
    },
    {
        "id": 175,
        "n": "Superior Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "174",
                "c": 3
            }
        ],
        "pattern": [
            [
                174,
                174,
                174
            ]
        ]
    },
    {
        "id": 179,
        "n": "Superior Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "178",
                "c": 3
            }
        ],
        "pattern": [
            [
                178,
                178,
                178
            ]
        ]
    },
    {
        "id": 1053,
        "n": "Resurrection Scepter",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "710",
                "c": 2
            },
            {
                "id": "1048",
                "c": 1
            }
        ],
        "pattern": [
            [
                710,
                1048,
                710
            ]
        ]
    },
    {
        "id": 1049,
        "n": "Misery Staff",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "710",
                "c": 2
            },
            {
                "id": "1048",
                "c": 1
            }
        ],
        "pattern": [
            [
                1048
            ],
            [
                710
            ],
            [
                710
            ]
        ]
    },
    {
        "id": 1063,
        "n": "Nephilim Protector [Legendary]",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "691",
                "c": 1
            },
            {
                "id": "710",
                "c": 3
            },
            {
                "id": "1062",
                "c": 1
            }
        ],
        "pattern": [
            [
                1062,
                710,
                691
            ],
            [
                710,
                -1,
                710
            ]
        ]
    },
    {
        "id": 1064,
        "n": "Flame Phoenix [Rare]",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "697",
                "c": 1
            },
            {
                "id": "710",
                "c": 3
            },
            {
                "id": "895",
                "c": 2
            }
        ],
        "pattern": [
            [
                895,
                697,
                895
            ],
            [
                710,
                710,
                710
            ]
        ]
    },
    {
        "id": 1078,
        "n": "Shiva Boots",
        "level": 72,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 4
            },
            {
                "id": "1074",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                1074,
                388
            ],
            [
                388,
                -1,
                388
            ]
        ]
    },
    {
        "id": 1079,
        "n": "Demigod Boots",
        "level": 84,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 2
            },
            {
                "id": "1076",
                "c": 1
            },
            {
                "id": "1077",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                1076,
                388
            ],
            [
                -1,
                1077,
                -1
            ]
        ]
    },
    {
        "id": 1080,
        "n": "Diamond Boots",
        "level": 75,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 4
            },
            {
                "id": "216",
                "c": 1
            },
            {
                "id": "224",
                "c": 1
            }
        ],
        "pattern": [
            [
                195,
                216,
                195
            ],
            [
                195,
                224,
                195
            ]
        ]
    },
    {
        "id": 1065,
        "n": "Amethyst Boots",
        "level": 79,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "224",
                "c": 2
            },
            {
                "id": "386",
                "c": 4
            }
        ],
        "pattern": [
            [
                386,
                224,
                386
            ],
            [
                386,
                224,
                386
            ]
        ]
    },
    {
        "id": 1066,
        "n": "Juggernaut boots",
        "level": 84,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "224",
                "c": 2
            },
            {
                "id": "982",
                "c": 4
            }
        ],
        "pattern": [
            [
                224,
                982,
                982,
                224
            ],
            [
                -1,
                982,
                982,
                -1
            ]
        ]
    },
    {
        "id": 1067,
        "n": "Ichor Boots",
        "level": 90,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "911",
                "c": 4
            },
            {
                "id": "981",
                "c": 4
            }
        ],
        "pattern": [
            [
                981,
                911
            ],
            [
                981,
                911
            ],
            [
                981,
                911
            ],
            [
                981,
                911
            ]
        ]
    },
    {
        "id": 1068,
        "n": "7 Souls Boots",
        "level": 98,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "340",
                "c": 1
            },
            {
                "id": "342",
                "c": 1
            },
            {
                "id": "344",
                "c": 1
            },
            {
                "id": "968",
                "c": 2
            },
            {
                "id": "1065",
                "c": 1
            },
            {
                "id": "1080",
                "c": 1
            }
        ],
        "pattern": [
            [
                968,
                968
            ],
            [
                340,
                1080
            ],
            [
                344,
                1065
            ],
            [
                342,
                -1
            ]
        ]
    },
    {
        "id": 1126,
        "n": "Medium Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "1125",
                "c": 4
            }
        ],
        "pattern": [
            [
                1125,
                1125,
                1125,
                1125
            ]
        ]
    },
    {
        "id": 1127,
        "n": "High Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "1126",
                "c": 3
            }
        ],
        "pattern": [
            [
                1126,
                1126,
                1126
            ]
        ]
    },
    {
        "id": 1128,
        "n": "Superior Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "1127",
                "c": 3
            }
        ],
        "pattern": [
            [
                1127,
                1127,
                1127
            ]
        ]
    },
    {
        "id": 1147,
        "n": "Rudolph [Legendary]",
        "level": 1,
        "min_chance": 0.1,
        "max_chance": 0.1,
        "skill": "forging",
        "matts": [
            {
                "id": "1144",
                "c": 1
            },
            {
                "id": "1145",
                "c": 1
            },
            {
                "id": "1146",
                "c": 1
            }
        ],
        "pattern": [
            [
                1146,
                1145,
                1144
            ]
        ]
    },
    {
        "id": 1148,
        "n": "Santa's Bag",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "447",
                "c": 1
            },
            {
                "id": "1147",
                "c": 2
            }
        ],
        "pattern": [
            [
                1147,
                447,
                1147
            ]
        ]
    },
    {
        "id": 766,
        "n": "Best Present",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "765",
                "c": 4
            }
        ],
        "pattern": [
            [
                765,
                765,
                765,
                765
            ]
        ]
    },
    {
        "id": 1125,
        "n": "Low Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "64",
                "c": 1
            },
            {
                "id": "176",
                "c": 1
            }
        ],
        "pattern": [
            [
                64,
                176
            ]
        ]
    },
    {
        "id": 176,
        "n": "Low Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "64",
                "c": 1
            },
            {
                "id": "1125",
                "c": 1
            }
        ],
        "pattern": [
            [
                64,
                1125
            ]
        ]
    },
    {
        "id": 64,
        "n": "Low Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "176",
                "c": 1
            },
            {
                "id": "1125",
                "c": 1
            }
        ],
        "pattern": [
            [
                176,
                1125
            ]
        ]
    },
    {
        "id": 1126,
        "n": "Medium Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "173",
                "c": 1
            },
            {
                "id": "177",
                "c": 1
            }
        ],
        "pattern": [
            [
                173,
                177
            ]
        ]
    },
    {
        "id": 177,
        "n": "Medium Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "173",
                "c": 1
            },
            {
                "id": "1126",
                "c": 1
            }
        ],
        "pattern": [
            [
                173,
                1126
            ]
        ]
    },
    {
        "id": 173,
        "n": "Medium Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "177",
                "c": 1
            },
            {
                "id": "1126",
                "c": 1
            }
        ],
        "pattern": [
            [
                177,
                1126
            ]
        ]
    },
    {
        "id": 1127,
        "n": "High Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "174",
                "c": 1
            },
            {
                "id": "178",
                "c": 1
            }
        ],
        "pattern": [
            [
                174,
                178
            ]
        ]
    },
    {
        "id": 178,
        "n": "High Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "174",
                "c": 1
            },
            {
                "id": "1127",
                "c": 1
            }
        ],
        "pattern": [
            [
                174,
                1127
            ]
        ]
    },
    {
        "id": 174,
        "n": "High Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "178",
                "c": 1
            },
            {
                "id": "1127",
                "c": 1
            }
        ],
        "pattern": [
            [
                178,
                1127
            ]
        ]
    },
    {
        "id": 1128,
        "n": "Superior Jewelry Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "175",
                "c": 1
            },
            {
                "id": "179",
                "c": 1
            }
        ],
        "pattern": [
            [
                175,
                179
            ]
        ]
    },
    {
        "id": 179,
        "n": "Superior Armor Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "175",
                "c": 1
            },
            {
                "id": "1128",
                "c": 1
            }
        ],
        "pattern": [
            [
                175,
                1128
            ]
        ]
    },
    {
        "id": 175,
        "n": "Superior Weapon Enchant Scroll",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "179",
                "c": 1
            },
            {
                "id": "1128",
                "c": 1
            }
        ],
        "pattern": [
            [
                179,
                1128
            ]
        ]
    },
    {
        "id": 1150,
        "n": "Piglet [Common]",
        "level": 1,
        "min_chance": 0.01,
        "max_chance": 0.01,
        "skill": "forging",
        "matts": [
            {
                "id": "6",
                "c": 10
            }
        ],
        "pattern": [
            [
                6,
                6,
                6,
                6
            ],
            [
                6,
                6,
                6,
                6
            ],
            [
                -1,
                6,
                6,
                -1
            ]
        ]
    },
    {
        "id": 1174,
        "n": "Leprechaun Hat",
        "level": 1,
        "min_chance": 0.9,
        "max_chance": 0.9,
        "skill": "forging",
        "matts": [
            {
                "id": "1172",
                "c": 10
            },
            {
                "id": "1173",
                "c": 2
            }
        ],
        "pattern": [
            [
                1172,
                1172,
                1172,
                1172
            ],
            [
                1173,
                1172,
                1172,
                1173
            ],
            [
                1172,
                1172,
                1172,
                1172
            ]
        ]
    },
    {
        "id": 1171,
        "n": "Leprechaun [Rare]",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "1172",
                "c": 10
            },
            {
                "id": "1173",
                "c": 4
            },
            {
                "id": "1174",
                "c": 2
            }
        ],
        "pattern": [
            [
                1172,
                1174,
                1174,
                1172
            ],
            [
                1173,
                1172,
                1172,
                1173
            ],
            [
                1172,
                1172,
                1172,
                1172
            ],
            [
                1172,
                1173,
                1173,
                1172
            ]
        ]
    },
    {
        "id": 589,
        "n": "Sapphire Gloves Of Power",
        "level": 68,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                263
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 589,
        "n": "Sapphire Gloves Of Power",
        "level": 68,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                258
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 589,
        "n": "Sapphire Gloves Of Power",
        "level": 68,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                257
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 589,
        "n": "Sapphire Gloves Of Power",
        "level": 68,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                262
            ],
            [
                197
            ]
        ]
    },
    {
        "id": 590,
        "n": "Sapphire Gloves Of Magic",
        "level": 68,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                263
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 590,
        "n": "Sapphire Gloves Of Magic",
        "level": 68,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                258
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 590,
        "n": "Sapphire Gloves Of Magic",
        "level": 68,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                257
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 590,
        "n": "Sapphire Gloves Of Magic",
        "level": 68,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "199",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                262
            ],
            [
                199
            ]
        ]
    },
    {
        "id": 591,
        "n": "Sapphire Gloves Of Accuracy",
        "level": 68,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                263
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 591,
        "n": "Sapphire Gloves Of Accuracy",
        "level": 68,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                258
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 591,
        "n": "Sapphire Gloves Of Accuracy",
        "level": 68,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                257
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 591,
        "n": "Sapphire Gloves Of Accuracy",
        "level": 68,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                262
            ],
            [
                195
            ]
        ]
    },
    {
        "id": 592,
        "n": "Sapphire Gloves Of Defense",
        "level": 68,
        "min_chance": 0.25,
        "max_chance": 0.25,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "263",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                263
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 592,
        "n": "Sapphire Gloves Of Defense",
        "level": 68,
        "min_chance": 0.45,
        "max_chance": 0.45,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "258",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                258
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 592,
        "n": "Sapphire Gloves Of Defense",
        "level": 68,
        "min_chance": 0.65,
        "max_chance": 0.65,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "257",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                257
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 592,
        "n": "Sapphire Gloves Of Defense",
        "level": 68,
        "min_chance": 0.85,
        "max_chance": 0.85,
        "skill": "forging",
        "matts": [
            {
                "id": "201",
                "c": 1
            },
            {
                "id": "262",
                "c": 1
            },
            {
                "id": "498",
                "c": 1
            }
        ],
        "pattern": [
            [
                498
            ],
            [
                262
            ],
            [
                201
            ]
        ]
    },
    {
        "id": 258,
        "n": "Bronze Egg",
        "level": 1,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "263",
                "c": 4
            }
        ],
        "pattern": [
            [
                263,
                263,
                263,
                263
            ]
        ]
    },
    {
        "id": 257,
        "n": "Golden Egg",
        "level": 1,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "258",
                "c": 3
            }
        ],
        "pattern": [
            [
                258,
                258,
                258
            ]
        ]
    },
    {
        "id": 1261,
        "n": "Saint Dragon Wings",
        "level": 98,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "951",
                "c": 1
            },
            {
                "id": "1201",
                "c": 1
            }
        ],
        "pattern": [
            [
                1201,
                951
            ]
        ]
    },
    {
        "id": 1296,
        "n": "Underworld Wings",
        "level": 90,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "890",
                "c": 1
            },
            {
                "id": "1307",
                "c": 1
            }
        ],
        "pattern": [
            [
                890,
                1307
            ]
        ]
    },
    {
        "id": 1263,
        "n": "Wings of Raguel",
        "level": 105,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "1232",
                "c": 1
            },
            {
                "id": "1308",
                "c": 2
            }
        ],
        "pattern": [
            [
                1308,
                1232,
                1308
            ]
        ]
    },
    {
        "id": 1271,
        "n": "Iron Wings",
        "level": 38,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "50",
                "c": 10
            },
            {
                "id": "195",
                "c": 3
            }
        ],
        "pattern": [
            [
                50,
                50,
                50,
                50
            ],
            [
                50,
                50,
                50,
                50
            ],
            [
                50,
                195,
                195,
                50
            ],
            [
                -1,
                -1,
                195,
                -1
            ]
        ]
    },
    {
        "id": 1298,
        "n": "Crystal Wings",
        "level": 56,
        "min_chance": 0.35,
        "max_chance": 0.35,
        "skill": "forging",
        "matts": [
            {
                "id": "195",
                "c": 6
            },
            {
                "id": "1301",
                "c": 8
            }
        ],
        "pattern": [
            [
                1301,
                1301,
                1301,
                1301
            ],
            [
                1301,
                1301,
                1301,
                1301
            ],
            [
                195,
                195,
                195,
                195
            ],
            [
                -1,
                195,
                195,
                -1
            ]
        ]
    },
    {
        "id": 1284,
        "n": "Fire Wings",
        "level": 30,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "197",
                "c": 5
            },
            {
                "id": "202",
                "c": 6
            }
        ],
        "pattern": [
            [
                197,
                202,
                202,
                197
            ],
            [
                197,
                202,
                202,
                197
            ],
            [
                -1,
                202,
                202,
                197
            ]
        ]
    },
    {
        "id": 1273,
        "n": "Sapphire Dragon Wings",
        "level": 50,
        "min_chance": 0.3,
        "max_chance": 0.3,
        "skill": "forging",
        "matts": [
            {
                "id": "216",
                "c": 6
            },
            {
                "id": "250",
                "c": 6
            }
        ],
        "pattern": [
            [
                216,
                250,
                250,
                216
            ],
            [
                216,
                250,
                250,
                216
            ],
            [
                216,
                250,
                250,
                216
            ]
        ]
    },
    {
        "id": 1288,
        "n": "Ruby Dragon Wings",
        "level": 58,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "224",
                "c": 2
            },
            {
                "id": "252",
                "c": 6
            }
        ],
        "pattern": [
            [
                252,
                224,
                252
            ],
            [
                252,
                224,
                252
            ],
            [
                252,
                -1,
                252
            ]
        ]
    },
    {
        "id": 1259,
        "n": "Balance Wings",
        "level": 105,
        "min_chance": 0.4,
        "max_chance": 0.4,
        "skill": "forging",
        "matts": [
            {
                "id": "1277",
                "c": 1
            },
            {
                "id": "1296",
                "c": 1
            }
        ],
        "pattern": [
            [
                1296,
                1277
            ]
        ]
    },
    {
        "id": 1279,
        "n": "Shadow Wings",
        "level": 100,
        "min_chance": 0.5,
        "max_chance": 0.5,
        "skill": "forging",
        "matts": [
            {
                "id": "388",
                "c": 8
            },
            {
                "id": "1212",
                "c": 1
            }
        ],
        "pattern": [
            [
                388,
                388,
                388,
                388
            ],
            [
                388,
                388,
                388,
                388
            ],
            [
                -1,
                -1,
                -1,
                1212
            ]
        ]
    },
    {
        "id": 1304,
        "n": "Medium Wings Enchant Scroll",
        "level": 1,
        "min_chance": 0.7,
        "max_chance": 0.7,
        "skill": "forging",
        "matts": [
            {
                "id": "1303",
                "c": 4
            }
        ],
        "pattern": [
            [
                1303,
                1303,
                1303,
                1303
            ]
        ]
    },
    {
        "id": 1305,
        "n": "High Wings Enchant Scroll",
        "level": 1,
        "min_chance": 0.6,
        "max_chance": 0.6,
        "skill": "forging",
        "matts": [
            {
                "id": "1304",
                "c": 3
            }
        ],
        "pattern": [
            [
                1304,
                1304,
                1304
            ]
        ]
    },
    {
        "id": 1306,
        "n": "Superior Wings Enchant Scroll",
        "level": 1,
        "min_chance": 0.8,
        "max_chance": 0.8,
        "skill": "forging",
        "matts": [
            {
                "id": "1305",
                "c": 3
            }
        ],
        "pattern": [
            [
                1305,
                1305,
                1305
            ]
        ]
    },
    {
        "id": 1309,
        "n": "War Dragon Wings +10",
        "level": 80,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "608",
                "c": 1
            },
            {
                "id": "1312",
                "c": 3
            }
        ],
        "pattern": [
            [
                608,
                1312,
                1312,
                1312
            ]
        ]
    },
    {
        "id": 1310,
        "n": "Peace Dragon Wings +10",
        "level": 80,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "608",
                "c": 1
            },
            {
                "id": "1311",
                "c": 3
            }
        ],
        "pattern": [
            [
                608,
                1311,
                1311,
                1311
            ]
        ]
    },
    {
        "id": 1339,
        "n": "Elemental pouch",
        "level": 80,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "447",
                "c": 1
            },
            {
                "id": "1340",
                "c": 1
            },
            {
                "id": "1341",
                "c": 1
            },
            {
                "id": "1342",
                "c": 1
            },
            {
                "id": "1343",
                "c": 1
            }
        ],
        "pattern": [
            [
                1340,
                1341,
                1342,
                1343
            ],
            [
                447,
                -1,
                -1,
                -1
            ]
        ]
    },
    {
        "id": 1362,
        "n": "Poison Rain Medallion",
        "level": 80,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "994",
                "c": 1
            },
            {
                "id": "1000",
                "c": 1
            },
            {
                "id": "1004",
                "c": 1
            },
            {
                "id": "1009",
                "c": 1
            }
        ],
        "pattern": [
            [
                994,
                1000,
                1004,
                1009
            ]
        ]
    },
    {
        "id": 1363,
        "n": "Blizzard Medallion",
        "level": 80,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "995",
                "c": 1
            },
            {
                "id": "999",
                "c": 1
            },
            {
                "id": "1005",
                "c": 1
            },
            {
                "id": "1010",
                "c": 1
            }
        ],
        "pattern": [
            [
                995,
                999,
                1005,
                1010
            ]
        ]
    },
    {
        "id": 765,
        "n": "Great Present",
        "level": 1,
        "min_chance": 1,
        "max_chance": 1,
        "skill": "forging",
        "matts": [
            {
                "id": "764",
                "c": 4
            }
        ],
        "pattern": [
            [
                764,
                764,
                764,
                764
            ]
        ]
    },
    {
        "id": 1397,
        "n": "Poseidon's Trident",
        "level": 1,
        "min_chance": 0.1,
        "max_chance": 0.1,
        "skill": "forging",
        "matts": [
            {
                "id": "1398",
                "c": 1
            },
            {
                "id": "1399",
                "c": 1
            }
        ],
        "pattern": [
            [
                1399,
                1398
            ]
        ]
    },
    {
        "id": 730,
        "n": "Fir Floor",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 29,
                "c": 100
            }
        ]
    },
    {
        "id": 731,
        "n": "Cactus Wood Floor",
        "level": 10,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 314,
                "c": 200
            }
        ]
    },
    {
        "id": 732,
        "n": "Oak Wood Floor",
        "level": 25,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 313,
                "c": 300
            }
        ]
    },
    {
        "id": 825,
        "n": "Willow Floor",
        "level": 35,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 296,
                "c": 400
            }
        ]
    },
    {
        "id": 830,
        "n": "Maple Floor",
        "level": 45,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 594,
                "c": 500
            }
        ]
    },
    {
        "id": 836,
        "n": "Spirit Floor",
        "level": 55,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 595,
                "c": 600
            }
        ]
    },
    {
        "id": 842,
        "n": "Blue Palm Floor",
        "level": 65,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 596,
                "c": 700
            }
        ]
    },
    {
        "id": 848,
        "n": "Magic Floor",
        "level": 80,
        "skill": "carpentry",
        "carp_type": "floors",
        "matts": [
            {
                "id": 597,
                "c": 800
            }
        ]
    },
    {
        "id": 734,
        "n": "Fir Wall",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 29,
                "c": 200
            }
        ]
    },
    {
        "id": 740,
        "n": "Cactus Wood Wall",
        "level": 13,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 314,
                "c": 300
            }
        ]
    },
    {
        "id": 746,
        "n": "Oak Wall",
        "level": 33,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 313,
                "c": 400
            },
            {
                "id": 34,
                "c": 200
            }
        ]
    },
    {
        "id": 752,
        "n": "Fence",
        "level": 45,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 50,
                "c": 10
            },
            {
                "id": 29,
                "c": 50
            }
        ]
    },
    {
        "id": 824,
        "n": "Willow Wall",
        "level": 42,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 296,
                "c": 600
            },
            {
                "id": 34,
                "c": 400
            }
        ]
    },
    {
        "id": 829,
        "n": "Maple Wall",
        "level": 52,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 594,
                "c": 500
            },
            {
                "id": 50,
                "c": 300
            }
        ]
    },
    {
        "id": 835,
        "n": "Spirit Wall",
        "level": 62,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 595,
                "c": 600
            },
            {
                "id": 50,
                "c": 400
            }
        ]
    },
    {
        "id": 841,
        "n": "Blue Palm Wall",
        "level": 74,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 596,
                "c": 600
            },
            {
                "id": 291,
                "c": 300
            }
        ]
    },
    {
        "id": 847,
        "n": "Magic Wall",
        "level": 93,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 597,
                "c": 500
            },
            {
                "id": 384,
                "c": 300
            }
        ]
    },
    {
        "id": 1357,
        "n": "Gate",
        "level": 53,
        "skill": "carpentry",
        "carp_type": "walls",
        "matts": [
            {
                "id": 29,
                "c": 300
            },
            {
                "id": 313,
                "c": 300
            },
            {
                "id": 594,
                "c": 300
            }
        ]
    },
    {
        "id": 753,
        "n": "Soil",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 287,
                "c": 35
            }
        ]
    },
    {
        "id": 753,
        "n": "Soil",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 288,
                "c": 25
            }
        ]
    },
    {
        "id": 733,
        "n": "Fir Chair",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 29,
                "c": 20
            }
        ]
    },
    {
        "id": 735,
        "n": "Fir Table",
        "level": 3,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 29,
                "c": 75
            }
        ]
    },
    {
        "id": 736,
        "n": "Fir Chest",
        "level": 10,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 29,
                "c": 30
            }
        ]
    },
    {
        "id": 737,
        "n": "Fir Cabinet",
        "level": 6,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 29,
                "c": 140
            }
        ]
    },
    {
        "id": 738,
        "n": "Fir Bed",
        "level": 8,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 29,
                "c": 150
            }
        ]
    },
    {
        "id": 739,
        "n": "Cactus Wood Chair",
        "level": 10,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 314,
                "c": 20
            }
        ]
    },
    {
        "id": 741,
        "n": "Cactus Wood Table",
        "level": 14,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 314,
                "c": 75
            }
        ]
    },
    {
        "id": 742,
        "n": "Cactus Wood Chest",
        "level": 25,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 314,
                "c": 50
            }
        ]
    },
    {
        "id": 743,
        "n": "Cactus Wood Cabinet",
        "level": 24,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 314,
                "c": 200
            }
        ]
    },
    {
        "id": 744,
        "n": "Cactus Wood Bed",
        "level": 20,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 314,
                "c": 150
            }
        ]
    },
    {
        "id": 745,
        "n": "Oak Chair",
        "level": 25,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 313,
                "c": 20
            }
        ]
    },
    {
        "id": 747,
        "n": "Oak Table",
        "level": 28,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 313,
                "c": 75
            }
        ]
    },
    {
        "id": 748,
        "n": "Oak Chest",
        "level": 35,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 313,
                "c": 60
            }
        ]
    },
    {
        "id": 749,
        "n": "Oak Cabinet",
        "level": 34,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 313,
                "c": 200
            }
        ]
    },
    {
        "id": 750,
        "n": "Oak Bed",
        "level": 30,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 313,
                "c": 150
            }
        ]
    },
    {
        "id": 768,
        "n": "Willow Chair",
        "level": 35,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 296,
                "c": 30
            }
        ]
    },
    {
        "id": 769,
        "n": "Maple Chair",
        "level": 45,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 594,
                "c": 30
            }
        ]
    },
    {
        "id": 770,
        "n": "Spirit Chair",
        "level": 55,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 595,
                "c": 30
            }
        ]
    },
    {
        "id": 771,
        "n": "Blue Palm Chair",
        "level": 65,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 596,
                "c": 40
            }
        ]
    },
    {
        "id": 772,
        "n": "Magic Oak Chair",
        "level": 80,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 597,
                "c": 50
            }
        ]
    },
    {
        "id": 826,
        "n": "Willow Table",
        "level": 37,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 296,
                "c": 75
            }
        ]
    },
    {
        "id": 853,
        "n": "Willow Bed",
        "level": 40,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 296,
                "c": 150
            }
        ]
    },
    {
        "id": 827,
        "n": "Willow Chest",
        "level": 45,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 296,
                "c": 70
            }
        ]
    },
    {
        "id": 828,
        "n": "Willow Cabinet",
        "level": 44,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 296,
                "c": 250
            }
        ]
    },
    {
        "id": 831,
        "n": "Maple Table",
        "level": 49,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 594,
                "c": 105
            }
        ]
    },
    {
        "id": 832,
        "n": "Maple Chest",
        "level": 55,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 594,
                "c": 80
            }
        ]
    },
    {
        "id": 833,
        "n": "Maple Cabinet",
        "level": 54,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 594,
                "c": 300
            }
        ]
    },
    {
        "id": 834,
        "n": "Maple Bed",
        "level": 50,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 594,
                "c": 210
            }
        ]
    },
    {
        "id": 837,
        "n": "Spirit Table",
        "level": 58,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 595,
                "c": 105
            }
        ]
    },
    {
        "id": 840,
        "n": "Spirit Bed",
        "level": 60,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 595,
                "c": 210
            }
        ]
    },
    {
        "id": 839,
        "n": "Spirit Cabinet",
        "level": 64,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 595,
                "c": 400
            }
        ]
    },
    {
        "id": 838,
        "n": "Spirit Chest",
        "level": 65,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 595,
                "c": 90
            }
        ]
    },
    {
        "id": 843,
        "n": "Blue Palm Table",
        "level": 70,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 596,
                "c": 150
            }
        ]
    },
    {
        "id": 844,
        "n": "Blue Palm Chest",
        "level": 80,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 596,
                "c": 100
            }
        ]
    },
    {
        "id": 845,
        "n": "Blue Palm Cabinet",
        "level": 78,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 596,
                "c": 500
            }
        ]
    },
    {
        "id": 846,
        "n": "Blue Palm Bed",
        "level": 70,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 596,
                "c": 300
            }
        ]
    },
    {
        "id": 849,
        "n": "Magic Table",
        "level": 83,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 597,
                "c": 180
            }
        ]
    },
    {
        "id": 850,
        "n": "Magic Chest",
        "level": 95,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 597,
                "c": 120
            }
        ]
    },
    {
        "id": 851,
        "n": "Magic Cabinet",
        "level": 98,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 597,
                "c": 800
            }
        ]
    },
    {
        "id": 852,
        "n": "Magic Bed",
        "level": 90,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 597,
                "c": 360
            }
        ]
    },
    {
        "id": 1131,
        "n": "Reaper Memorial",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 31,
                "c": 250
            },
            {
                "id": 1138,
                "c": 1
            }
        ]
    },
    {
        "id": 1165,
        "n": "Flag of Estonia",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 1014,
                "c": 10
            },
            {
                "id": 50,
                "c": 50
            }
        ]
    },
    {
        "id": 1165,
        "n": "Flag of Estonia",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 1012,
                "c": 30
            },
            {
                "id": 50,
                "c": 50
            }
        ]
    },
    {
        "id": 1243,
        "n": "Breeding Nest",
        "level": 50,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 29,
                "c": 300
            },
            {
                "id": 758,
                "c": 100
            },
            {
                "id": 760,
                "c": 100
            }
        ]
    },
    {
        "id": 1360,
        "n": "Mailbox",
        "level": 48,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 594,
                "c": 50
            },
            {
                "id": 50,
                "c": 100
            }
        ]
    },
    {
        "id": 753,
        "n": "Soil",
        "level": 1,
        "skill": "carpentry",
        "carp_type": "furniture",
        "matts": [
            {
                "id": 289,
                "c": 15
            }
        ]
    },
    {
        "id": 29,
        "n": "Fir Log",
        "skill": "woodcutting",
        "level": 0,
        "source": {
            "n": "Fir tree",
            "img": {
                "sheet": "46",
                "x": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                "y": 1
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 116,
        "n": "Raw Deep Sea Octopus",
        "skill": "fishing",
        "level": 80,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.15,
        "matts": []
    },
    {
        "id": 108,
        "n": "Raw Giant Squid",
        "skill": "fishing",
        "level": 68,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.25,
        "matts": []
    },
    {
        "id": 104,
        "n": "Raw Rock Squid",
        "skill": "fishing",
        "level": 65,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.35,
        "matts": []
    },
    {
        "id": 1370,
        "n": "Raw Eel",
        "skill": "fishing",
        "level": 47,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.35,
        "matts": []
    },
    {
        "id": 86,
        "n": "Raw Angelfish",
        "skill": "fishing",
        "level": 45,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.55,
        "matts": []
    },
    {
        "id": 16,
        "n": "Raw Bass",
        "skill": "fishing",
        "level": 40,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": []
    },
    {
        "id": 78,
        "n": "Raw Lion Fish",
        "skill": "fishing",
        "level": 35,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": []
    },
    {
        "id": 14,
        "n": "Raw Salmon",
        "skill": "fishing",
        "level": 30,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": []
    },
    {
        "id": 1396,
        "n": "Sunken Treasure",
        "skill": "fishing",
        "level": 20,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 12,
        "n": "Raw Pike",
        "skill": "fishing",
        "level": 20,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.65,
        "matts": []
    },
    {
        "id": 72,
        "n": "Raw Sardine",
        "skill": "fishing",
        "level": 15,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.65,
        "matts": []
    },
    {
        "id": 10,
        "n": "Raw Trout",
        "skill": "fishing",
        "level": 10,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.65,
        "matts": []
    },
    {
        "id": 68,
        "n": "Raw Pearl Clam",
        "skill": "fishing",
        "level": 1,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 1368,
        "n": "Raw Frog",
        "skill": "fishing",
        "level": 1,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.15,
        "max_chance": 0.15,
        "matts": []
    },
    {
        "id": 8,
        "n": "Raw Perch",
        "skill": "fishing",
        "level": 0,
        "source": {
            "n": "Fish - Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": []
    },
    {
        "id": 9,
        "n": "Perch",
        "skill": "cooking",
        "level": 0,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 8,
                "c": 1
            }
        ]
    },
    {
        "id": 69,
        "n": "Pearl Clam",
        "skill": "cooking",
        "level": 30,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 68,
                "c": 1
            }
        ]
    },
    {
        "id": 71,
        "n": "Baby Squid",
        "skill": "cooking",
        "level": 5,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 70,
                "c": 1
            }
        ]
    },
    {
        "id": 1369,
        "n": "Frog",
        "skill": "cooking",
        "level": 1,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 1368,
                "c": 1
            }
        ]
    },
    {
        "id": 11,
        "n": "Trout",
        "skill": "cooking",
        "level": 10,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 10,
                "c": 1
            }
        ]
    },
    {
        "id": 73,
        "n": "Sardine",
        "skill": "cooking",
        "level": 15,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 72,
                "c": 1
            }
        ]
    },
    {
        "id": 13,
        "n": "Pike",
        "skill": "cooking",
        "level": 20,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 12,
                "c": 1
            }
        ]
    },
    {
        "id": 75,
        "n": "Blue Marine Fish",
        "skill": "cooking",
        "level": 23,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 74,
                "c": 1
            }
        ]
    },
    {
        "id": 77,
        "n": "Jellyfish",
        "skill": "cooking",
        "level": 25,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 76,
                "c": 1
            }
        ]
    },
    {
        "id": 15,
        "n": "Salmon",
        "skill": "cooking",
        "level": 30,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 14,
                "c": 1
            }
        ]
    },
    {
        "id": 79,
        "n": "Lion Fish",
        "skill": "cooking",
        "level": 35,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 78,
                "c": 1
            }
        ]
    },
    {
        "id": 81,
        "n": "Sand Crab",
        "skill": "cooking",
        "level": 36,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 80,
                "c": 1
            }
        ]
    },
    {
        "id": 17,
        "n": "Bass",
        "skill": "cooking",
        "level": 40,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 16,
                "c": 1
            }
        ]
    },
    {
        "id": 83,
        "n": "Seahorse",
        "skill": "cooking",
        "level": 41,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 82,
                "c": 1
            }
        ]
    },
    {
        "id": 85,
        "n": "Mud Crab",
        "skill": "cooking",
        "level": 43,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 84,
                "c": 1
            }
        ]
    },
    {
        "id": 87,
        "n": "Angelfish",
        "skill": "cooking",
        "level": 45,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 86,
                "c": 1
            }
        ]
    },
    {
        "id": 1371,
        "n": "Eel",
        "skill": "cooking",
        "level": 47,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 1370,
                "c": 1
            }
        ]
    },
    {
        "id": 89,
        "n": "Common Starfish",
        "skill": "cooking",
        "level": 44,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 88,
                "c": 1
            }
        ]
    },
    {
        "id": 91,
        "n": "Red Star",
        "skill": "cooking",
        "level": 48,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 90,
                "c": 1
            }
        ]
    },
    {
        "id": 93,
        "n": "Lobster",
        "skill": "cooking",
        "level": 48,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 92,
                "c": 1
            }
        ]
    },
    {
        "id": 95,
        "n": "Swordfish",
        "skill": "cooking",
        "level": 50,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 94,
                "c": 1
            }
        ]
    },
    {
        "id": 97,
        "n": "Squalidae",
        "skill": "cooking",
        "level": 55,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 96,
                "c": 1
            }
        ]
    },
    {
        "id": 99,
        "n": "Manta Ray",
        "skill": "cooking",
        "level": 58,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 98,
                "c": 1
            }
        ]
    },
    {
        "id": 101,
        "n": "White Shark",
        "skill": "cooking",
        "level": 60,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 100,
                "c": 1
            }
        ]
    },
    {
        "id": 103,
        "n": "Dolphin",
        "skill": "cooking",
        "level": 63,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 102,
                "c": 1
            }
        ]
    },
    {
        "id": 1373,
        "n": "Cowfish",
        "skill": "cooking",
        "level": 64,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 1372,
                "c": 1
            }
        ]
    },
    {
        "id": 105,
        "n": "Rock Squid",
        "skill": "cooking",
        "level": 65,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 104,
                "c": 1
            }
        ]
    },
    {
        "id": 107,
        "n": "King Crab",
        "skill": "cooking",
        "level": 64,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 106,
                "c": 1
            }
        ]
    },
    {
        "id": 109,
        "n": "Giant Squid",
        "skill": "cooking",
        "level": 68,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 108,
                "c": 1
            }
        ]
    },
    {
        "id": 111,
        "n": "Hammer Shark",
        "skill": "cooking",
        "level": 70,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 110,
                "c": 1
            }
        ]
    },
    {
        "id": 113,
        "n": "Reef Manta Ray",
        "skill": "cooking",
        "level": 73,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 112,
                "c": 1
            }
        ]
    },
    {
        "id": 115,
        "n": "Gray Shark",
        "skill": "cooking",
        "level": 75,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 114,
                "c": 1
            }
        ]
    },
    {
        "id": 117,
        "n": "Deep Sea Octopus",
        "skill": "cooking",
        "level": 80,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 116,
                "c": 1
            }
        ]
    },
    {
        "id": 119,
        "n": "Spiny Sea Star",
        "skill": "cooking",
        "level": 82,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 118,
                "c": 1
            }
        ]
    },
    {
        "id": 121,
        "n": "King Seahorse",
        "skill": "cooking",
        "level": 85,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": [
            {
                "id": 120,
                "c": 1
            }
        ]
    },
    {
        "id": 123,
        "n": "Baby Whale",
        "skill": "cooking",
        "level": 95,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 122,
                "c": 1
            }
        ]
    },
    {
        "id": 1375,
        "n": "Giant Catfish",
        "skill": "cooking",
        "level": 95,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 1374,
                "c": 1
            }
        ]
    },
    {
        "id": 1377,
        "n": "Whale Shark",
        "skill": "cooking",
        "level": 99,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 1,
        "matts": [
            {
                "id": 1376,
                "c": 1
            }
        ]
    },
    {
        "id": 1385,
        "n": "Blue Marlin",
        "skill": "cooking",
        "level": 108,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 1,
        "matts": [
            {
                "id": 1384,
                "c": 1
            }
        ]
    },
    {
        "id": 1391,
        "n": "Sunfish",
        "skill": "cooking",
        "level": 116,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 1,
        "matts": [
            {
                "id": 1390,
                "c": 1
            }
        ]
    },
    {
        "id": 491,
        "n": "Rat Meat",
        "skill": "cooking",
        "level": 1,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 490,
                "c": 1
            }
        ]
    },
    {
        "id": 493,
        "n": "Chicken Leg",
        "skill": "cooking",
        "level": 1,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 492,
                "c": 1
            }
        ]
    },
    {
        "id": 6,
        "n": "Ham",
        "skill": "cooking",
        "level": 2,
        "source": {
            "n": "Campfire",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 494,
                "c": 1
            }
        ]
    },
    {
        "id": 32,
        "n": "Copper",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Copper",
            "img": {
                "sheet": "1",
                "x": 0,
                "y": 4
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 30,
        "n": "Clay",
        "skill": "mining",
        "level": 0,
        "source": {
            "n": "Clay",
            "img": {
                "sheet": "1",
                "x": 1,
                "y": 4
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 198,
        "n": "Uncut Emerald",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 4
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 31,
        "n": "Iron ore",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 4
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 33,
        "n": "Tin",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Tin",
            "img": {
                "sheet": "1",
                "x": 1,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 291,
        "n": "Steel Bar",
        "skill": "forging",
        "level": 40,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 31,
                "c": 1
            },
            {
                "id": 186,
                "c": 1
            }
        ]
    },
    {
        "id": 34,
        "n": "Bronze Bar",
        "skill": "forging",
        "level": 1,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.8,
        "max_chance": 1,
        "matts": [
            {
                "id": 32,
                "c": 1
            },
            {
                "id": 33,
                "c": 1
            }
        ]
    },
    {
        "id": 50,
        "n": "Iron Bar",
        "skill": "forging",
        "level": 20,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 31,
                "c": 2
            }
        ]
    },
    {
        "id": 384,
        "n": "Azurite Bar",
        "skill": "forging",
        "level": 65,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 383,
                "c": 4
            }
        ]
    },
    {
        "id": 658,
        "n": "Fire Stone Bar",
        "skill": "forging",
        "level": 80,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 657,
                "c": 6
            }
        ]
    },
    {
        "id": 203,
        "n": "Silver Bar",
        "skill": "jewelry",
        "level": 10,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 185,
                "c": 2
            }
        ]
    },
    {
        "id": 202,
        "n": "Gold Bar",
        "skill": "jewelry",
        "level": 25,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 184,
                "c": 2
            }
        ]
    },
    {
        "id": 372,
        "n": "Platinum Bar",
        "skill": "jewelry",
        "level": 60,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 373,
                "c": 4
            }
        ]
    },
    {
        "id": 485,
        "n": "White Gold Bar",
        "skill": "jewelry",
        "level": 40,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 484,
                "c": 3
            }
        ]
    },
    {
        "id": 293,
        "n": "Necklace Mould",
        "skill": "jewelry",
        "level": 5,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 30,
                "c": 1
            },
            {
                "id": 33,
                "c": 1
            }
        ]
    },
    {
        "id": 292,
        "n": "Ring Mould",
        "skill": "jewelry",
        "level": 1,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 30,
                "c": 3
            }
        ]
    },
    {
        "id": 294,
        "n": "Iron Ring",
        "skill": "jewelry",
        "level": 1,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 292,
                "c": 1
            },
            {
                "id": 50,
                "c": 1
            }
        ]
    },
    {
        "id": 295,
        "n": "Iron Amulet",
        "skill": "jewelry",
        "level": 5,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 293,
                "c": 1
            },
            {
                "id": 50,
                "c": 2
            }
        ]
    },
    {
        "id": 302,
        "n": "Silver Ring",
        "skill": "jewelry",
        "level": 10,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 292,
                "c": 1
            },
            {
                "id": 203,
                "c": 1
            }
        ]
    },
    {
        "id": 303,
        "n": "Silver Necklace",
        "skill": "jewelry",
        "level": 12,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 293,
                "c": 1
            },
            {
                "id": 203,
                "c": 2
            }
        ]
    },
    {
        "id": 24,
        "n": "Golden Ring",
        "skill": "jewelry",
        "level": 25,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 292,
                "c": 1
            },
            {
                "id": 202,
                "c": 1
            }
        ]
    },
    {
        "id": 28,
        "n": "Golden Necklace",
        "skill": "jewelry",
        "level": 27,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 293,
                "c": 1
            },
            {
                "id": 202,
                "c": 2
            }
        ]
    },
    {
        "id": 374,
        "n": "Platinum Ring",
        "skill": "jewelry",
        "level": 60,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 292,
                "c": 1
            },
            {
                "id": 372,
                "c": 1
            }
        ]
    },
    {
        "id": 379,
        "n": "Platinum Necklace",
        "skill": "jewelry",
        "level": 65,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 293,
                "c": 1
            },
            {
                "id": 372,
                "c": 2
            }
        ]
    },
    {
        "id": 487,
        "n": "White Gold Ring",
        "skill": "jewelry",
        "level": 40,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 292,
                "c": 1
            },
            {
                "id": 485,
                "c": 1
            }
        ]
    },
    {
        "id": 488,
        "n": "White Gold Necklace",
        "skill": "jewelry",
        "level": 43,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 293,
                "c": 1
            },
            {
                "id": 485,
                "c": 2
            }
        ]
    },
    {
        "id": 48,
        "n": "Silver Sapphire Ring",
        "skill": "jewelry",
        "level": 10,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 302,
                "c": 1
            },
            {
                "id": 201,
                "c": 1
            }
        ]
    },
    {
        "id": 803,
        "n": "Silver Emerald Ring",
        "skill": "jewelry",
        "level": 12,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 302,
                "c": 1
            },
            {
                "id": 199,
                "c": 1
            }
        ]
    },
    {
        "id": 804,
        "n": "Silver Ruby Ring",
        "skill": "jewelry",
        "level": 14,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 302,
                "c": 1
            },
            {
                "id": 197,
                "c": 1
            }
        ]
    },
    {
        "id": 375,
        "n": "Platinum Sapphire Ring",
        "skill": "jewelry",
        "level": 60,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 201,
                "c": 4
            }
        ]
    },
    {
        "id": 376,
        "n": "Platinum Emerald Ring",
        "skill": "jewelry",
        "level": 65,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 199,
                "c": 4
            }
        ]
    },
    {
        "id": 377,
        "n": "Platinum Ruby Ring",
        "skill": "jewelry",
        "level": 70,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 197,
                "c": 4
            }
        ]
    },
    {
        "id": 378,
        "n": "Platinum Diamond Ring",
        "skill": "jewelry",
        "level": 75,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 195,
                "c": 4
            }
        ]
    },
    {
        "id": 811,
        "n": "Platinum Amethyst Ring",
        "skill": "jewelry",
        "level": 80,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 386,
                "c": 4
            }
        ]
    },
    {
        "id": 812,
        "n": "Platinum Jadeite Ring",
        "skill": "jewelry",
        "level": 90,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 390,
                "c": 3
            }
        ]
    },
    {
        "id": 391,
        "n": "Platinum Black Opal Ring",
        "skill": "jewelry",
        "level": 85,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 374,
                "c": 1
            },
            {
                "id": 388,
                "c": 3
            }
        ]
    },
    {
        "id": 49,
        "n": "Silver Sapphire Necklace",
        "skill": "jewelry",
        "level": 11,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 303,
                "c": 1
            },
            {
                "id": 201,
                "c": 1
            }
        ]
    },
    {
        "id": 813,
        "n": "Silver Ruby Necklace",
        "skill": "jewelry",
        "level": 15,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 303,
                "c": 1
            },
            {
                "id": 197,
                "c": 1
            }
        ]
    },
    {
        "id": 814,
        "n": "Silver Diamond Necklace",
        "skill": "jewelry",
        "level": 18,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 303,
                "c": 1
            },
            {
                "id": 195,
                "c": 1
            }
        ]
    },
    {
        "id": 380,
        "n": "Platinum Sapphire Necklace",
        "skill": "jewelry",
        "level": 65,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 201,
                "c": 6
            }
        ]
    },
    {
        "id": 382,
        "n": "Platinum Emerald Necklace",
        "skill": "jewelry",
        "level": 70,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 199,
                "c": 6
            }
        ]
    },
    {
        "id": 381,
        "n": "Platinum Ruby Necklace",
        "skill": "jewelry",
        "level": 75,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 197,
                "c": 6
            }
        ]
    },
    {
        "id": 395,
        "n": "Platinum Diamond Necklace",
        "skill": "jewelry",
        "level": 80,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 195,
                "c": 6
            }
        ]
    },
    {
        "id": 392,
        "n": "Platinum Jadeite Necklace",
        "skill": "jewelry",
        "level": 95,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.2,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 390,
                "c": 4
            }
        ]
    },
    {
        "id": 822,
        "n": "Platinum Amethyst Necklace",
        "skill": "jewelry",
        "level": 85,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 386,
                "c": 6
            }
        ]
    },
    {
        "id": 823,
        "n": "Platinum Black Opal Necklace",
        "skill": "jewelry",
        "level": 90,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": [
            {
                "id": 379,
                "c": 1
            },
            {
                "id": 388,
                "c": 5
            }
        ]
    },
    {
        "id": 298,
        "n": "Golden Emerald Ring",
        "skill": "jewelry",
        "level": 28,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 24,
                "c": 1
            },
            {
                "id": 199,
                "c": 1
            }
        ]
    },
    {
        "id": 805,
        "n": "Golden Sapphire Ring",
        "skill": "jewelry",
        "level": 25,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 24,
                "c": 1
            },
            {
                "id": 201,
                "c": 1
            }
        ]
    },
    {
        "id": 806,
        "n": "Golden Diamond Ring",
        "skill": "jewelry",
        "level": 34,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 24,
                "c": 1
            },
            {
                "id": 195,
                "c": 1
            }
        ]
    },
    {
        "id": 299,
        "n": "Silver Emerald Necklace",
        "skill": "jewelry",
        "level": 13,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 303,
                "c": 1
            },
            {
                "id": 199,
                "c": 1
            }
        ]
    },
    {
        "id": 131,
        "n": "Golden Ruby Ring",
        "skill": "jewelry",
        "level": 31,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 24,
                "c": 1
            },
            {
                "id": 197,
                "c": 1
            }
        ]
    },
    {
        "id": 130,
        "n": "Golden Ruby Necklace",
        "skill": "jewelry",
        "level": 33,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 28,
                "c": 1
            },
            {
                "id": 197,
                "c": 1
            }
        ]
    },
    {
        "id": 815,
        "n": "Golden Sapphire Necklace",
        "skill": "jewelry",
        "level": 27,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 28,
                "c": 1
            },
            {
                "id": 201,
                "c": 1
            }
        ]
    },
    {
        "id": 816,
        "n": "Golden Emerald Necklace",
        "skill": "jewelry",
        "level": 30,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 28,
                "c": 1
            },
            {
                "id": 199,
                "c": 1
            }
        ]
    },
    {
        "id": 300,
        "n": "Silver Diamond Ring",
        "skill": "jewelry",
        "level": 16,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 302,
                "c": 1
            },
            {
                "id": 195,
                "c": 1
            }
        ]
    },
    {
        "id": 301,
        "n": "Golden Diamond Necklace",
        "skill": "jewelry",
        "level": 36,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 28,
                "c": 1
            },
            {
                "id": 195,
                "c": 1
            }
        ]
    },
    {
        "id": 486,
        "n": "White Gold Amethyst Ring",
        "skill": "jewelry",
        "level": 56,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 487,
                "c": 1
            },
            {
                "id": 386,
                "c": 2
            }
        ]
    },
    {
        "id": 807,
        "n": "White Gold Sapphire Ring",
        "skill": "jewelry",
        "level": 40,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 487,
                "c": 1
            },
            {
                "id": 201,
                "c": 2
            }
        ]
    },
    {
        "id": 808,
        "n": "White Gold Emerald Ring",
        "skill": "jewelry",
        "level": 44,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 487,
                "c": 1
            },
            {
                "id": 199,
                "c": 2
            }
        ]
    },
    {
        "id": 809,
        "n": "White Gold Ruby Ring",
        "skill": "jewelry",
        "level": 48,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 487,
                "c": 1
            },
            {
                "id": 197,
                "c": 2
            }
        ]
    },
    {
        "id": 810,
        "n": "White Gold Diamond Ring",
        "skill": "jewelry",
        "level": 52,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 487,
                "c": 1
            },
            {
                "id": 195,
                "c": 2
            }
        ]
    },
    {
        "id": 489,
        "n": "White Gold Amethyst Necklace",
        "skill": "jewelry",
        "level": 58,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 488,
                "c": 1
            },
            {
                "id": 386,
                "c": 3
            }
        ]
    },
    {
        "id": 818,
        "n": "White Gold Sapphire Necklace",
        "skill": "jewelry",
        "level": 42,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 488,
                "c": 1
            },
            {
                "id": 201,
                "c": 3
            }
        ]
    },
    {
        "id": 819,
        "n": "White Gold Emerald Necklace",
        "skill": "jewelry",
        "level": 46,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 488,
                "c": 1
            },
            {
                "id": 199,
                "c": 3
            }
        ]
    },
    {
        "id": 820,
        "n": "White Gold Ruby Necklace",
        "skill": "jewelry",
        "level": 50,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 488,
                "c": 1
            },
            {
                "id": 197,
                "c": 3
            }
        ]
    },
    {
        "id": 821,
        "n": "White Gold Diamond Necklace",
        "skill": "jewelry",
        "level": 54,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 488,
                "c": 1
            },
            {
                "id": 195,
                "c": 3
            }
        ]
    },
    {
        "id": 248,
        "n": "Empty Superior Vial",
        "skill": "alchemy",
        "level": 65,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.3,
        "matts": [
            {
                "id": 187,
                "c": 2
            }
        ]
    },
    {
        "id": 246,
        "n": "Empty Large Vial",
        "skill": "alchemy",
        "level": 50,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.3,
        "matts": [
            {
                "id": 187,
                "c": 2
            }
        ]
    },
    {
        "id": 247,
        "n": "Empty Medium Vial",
        "skill": "alchemy",
        "level": 30,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 187,
                "c": 2
            }
        ]
    },
    {
        "id": 249,
        "n": "Empty Small Vial",
        "skill": "alchemy",
        "level": 1,
        "source": {
            "n": "Furnace",
            "img": {
                "sheet": "15",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 187,
                "c": 2
            }
        ]
    },
    {
        "id": 196,
        "n": "Uncut Ruby",
        "skill": "mining",
        "level": 40,
        "source": {
            "n": "Coal",
            "img": {
                "sheet": "1",
                "x": 2,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 186,
        "n": "Coal",
        "skill": "mining",
        "level": 40,
        "source": {
            "n": "Coal",
            "img": {
                "sheet": "1",
                "x": 2,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 194,
        "n": "Uncut Diamond",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold",
            "img": {
                "sheet": "1",
                "x": 8,
                "y": 4
            }
        },
        "min_chance": 0.0025,
        "max_chance": 0.0025,
        "matts": []
    },
    {
        "id": 184,
        "n": "Gold Chunk",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold",
            "img": {
                "sheet": "1",
                "x": 8,
                "y": 4
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 200,
        "n": "Uncut Sapphire",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 4
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 185,
        "n": "Silver Chunk",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 4
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 1300,
        "n": "Uncut Crystal",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Sand",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 4
            }
        },
        "min_chance": 0.007,
        "max_chance": 0.007,
        "matts": []
    },
    {
        "id": 187,
        "n": "Sand",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Sand",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 4
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 296,
        "n": "Willow Log",
        "skill": "woodcutting",
        "level": 20,
        "source": {
            "n": "Willow",
            "img": {
                "sheet": "46",
                "x": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                "y": 4
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 201,
        "n": "Cut Sapphire",
        "skill": "jewelry",
        "level": 10,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.8,
        "max_chance": 0.8,
        "matts": [
            {
                "id": 200,
                "c": 1
            }
        ]
    },
    {
        "id": 199,
        "n": "Cut Emerald",
        "skill": "jewelry",
        "level": 12,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.7,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 198,
                "c": 1
            }
        ]
    },
    {
        "id": 1301,
        "n": "Cut Crystal",
        "skill": "jewelry",
        "level": 1,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 1300,
                "c": 1
            }
        ]
    },
    {
        "id": 197,
        "n": "Cut Ruby",
        "skill": "jewelry",
        "level": 14,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.6,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 196,
                "c": 1
            }
        ]
    },
    {
        "id": 195,
        "n": "Cut Diamond",
        "skill": "jewelry",
        "level": 16,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 194,
                "c": 1
            }
        ]
    },
    {
        "id": 386,
        "n": "Cut Amethyst",
        "skill": "jewelry",
        "level": 56,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.45,
        "max_chance": 0.45,
        "matts": [
            {
                "id": 385,
                "c": 1
            }
        ]
    },
    {
        "id": 388,
        "n": "Cut Black Opal",
        "skill": "jewelry",
        "level": 85,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 387,
                "c": 1
            }
        ]
    },
    {
        "id": 390,
        "n": "Cut Jadeite",
        "skill": "jewelry",
        "level": 90,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.35,
        "matts": [
            {
                "id": 389,
                "c": 1
            }
        ]
    },
    {
        "id": 304,
        "n": "Small Potion Of Accuracy",
        "skill": "alchemy",
        "level": 1,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 220,
                "c": 2
            }
        ]
    },
    {
        "id": 305,
        "n": "Small Potion Of Strength",
        "skill": "alchemy",
        "level": 2,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 204,
                "c": 2
            }
        ]
    },
    {
        "id": 306,
        "n": "Small Potion Of Fishing",
        "skill": "alchemy",
        "level": 5,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 264,
                "c": 2
            }
        ]
    },
    {
        "id": 307,
        "n": "Small Potion Of Mining",
        "skill": "alchemy",
        "level": 7,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 274,
                "c": 2
            }
        ]
    },
    {
        "id": 308,
        "n": "Small Potion Of Cooking",
        "skill": "alchemy",
        "level": 10,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 227,
                "c": 2
            }
        ]
    },
    {
        "id": 795,
        "n": "Small Potion Of Carpentry",
        "skill": "alchemy",
        "level": 13,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 283,
                "c": 2
            }
        ]
    },
    {
        "id": 309,
        "n": "Small Potion Of Defense",
        "skill": "alchemy",
        "level": 15,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 235,
                "c": 2
            }
        ]
    },
    {
        "id": 311,
        "n": "Small Potion Of Woodcutting",
        "skill": "alchemy",
        "level": 20,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 215,
                "c": 2
            }
        ]
    },
    {
        "id": 796,
        "n": "Small Potion Of Farming",
        "skill": "alchemy",
        "level": 22,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 271,
                "c": 2
            }
        ]
    },
    {
        "id": 310,
        "n": "Small Potion Of Forging",
        "skill": "alchemy",
        "level": 25,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 230,
                "c": 2
            }
        ]
    },
    {
        "id": 312,
        "n": "Small Potion Of Jewelry",
        "skill": "alchemy",
        "level": 30,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 287,
                "c": 1
            },
            {
                "id": 228,
                "c": 2
            }
        ]
    },
    {
        "id": 315,
        "n": "Medium Potion Of Cooking",
        "skill": "alchemy",
        "level": 35,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 237,
                "c": 3
            }
        ]
    },
    {
        "id": 316,
        "n": "Medium Potion Of Mining",
        "skill": "alchemy",
        "level": 37,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 236,
                "c": 3
            }
        ]
    },
    {
        "id": 317,
        "n": "Medium Potion Of Fishing",
        "skill": "alchemy",
        "level": 39,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 205,
                "c": 3
            }
        ]
    },
    {
        "id": 318,
        "n": "Medium Potion Of Woodcutting",
        "skill": "alchemy",
        "level": 41,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 238,
                "c": 3
            }
        ]
    },
    {
        "id": 319,
        "n": "Medium Potion Of Defense",
        "skill": "alchemy",
        "level": 42,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 207,
                "c": 3
            }
        ]
    },
    {
        "id": 320,
        "n": "Medium Potion Of Strength",
        "skill": "alchemy",
        "level": 44,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 212,
                "c": 3
            }
        ]
    },
    {
        "id": 321,
        "n": "Medium Potion Of Accuracy",
        "skill": "alchemy",
        "level": 45,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 259,
                "c": 3
            }
        ]
    },
    {
        "id": 401,
        "n": "Medium Potion Of Paladin",
        "skill": "alchemy",
        "level": 48,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 276,
                "c": 5
            }
        ]
    },
    {
        "id": 322,
        "n": "Medium Potion Of Berserker",
        "skill": "alchemy",
        "level": 50,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 288,
                "c": 1
            },
            {
                "id": 369,
                "c": 2
            }
        ]
    },
    {
        "id": 323,
        "n": "Large Potion Of Cooking",
        "skill": "alchemy",
        "level": 50,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 260,
                "c": 4
            }
        ]
    },
    {
        "id": 324,
        "n": "Large Potion Of Mining",
        "skill": "alchemy",
        "level": 52,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 206,
                "c": 4
            }
        ]
    },
    {
        "id": 325,
        "n": "Large Potion Of Fishing",
        "skill": "alchemy",
        "level": 54,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 233,
                "c": 4
            }
        ]
    },
    {
        "id": 326,
        "n": "Large Potion Of Woodcutting",
        "skill": "alchemy",
        "level": 56,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 261,
                "c": 4
            }
        ]
    },
    {
        "id": 327,
        "n": "Large Potion Of Defense",
        "skill": "alchemy",
        "level": 58,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 269,
                "c": 4
            }
        ]
    },
    {
        "id": 329,
        "n": "Large Potion Of Accuracy",
        "skill": "alchemy",
        "level": 61,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 239,
                "c": 4
            }
        ]
    },
    {
        "id": 328,
        "n": "Large Potion Of Strength",
        "skill": "alchemy",
        "level": 63,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 289,
                "c": 1
            },
            {
                "id": 275,
                "c": 4
            }
        ]
    },
    {
        "id": 330,
        "n": "Superior Potion Of Cooking",
        "skill": "alchemy",
        "level": 65,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 285,
                "c": 5
            }
        ]
    },
    {
        "id": 331,
        "n": "Superior Potion Of Mining",
        "skill": "alchemy",
        "level": 67,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 221,
                "c": 5
            }
        ]
    },
    {
        "id": 332,
        "n": "Superior Potion Of Fishing",
        "skill": "alchemy",
        "level": 69,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 284,
                "c": 5
            }
        ]
    },
    {
        "id": 333,
        "n": "Superior Potion Of Woodcutting",
        "skill": "alchemy",
        "level": 71,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 241,
                "c": 5
            }
        ]
    },
    {
        "id": 334,
        "n": "Superior Potion Of Defense",
        "skill": "alchemy",
        "level": 74,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 243,
                "c": 5
            }
        ]
    },
    {
        "id": 335,
        "n": "Superior Potion Of Strength",
        "skill": "alchemy",
        "level": 78,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 222,
                "c": 5
            }
        ]
    },
    {
        "id": 336,
        "n": "Superior Potion Of Accuracy",
        "skill": "alchemy",
        "level": 80,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 245,
                "c": 5
            }
        ]
    },
    {
        "id": 337,
        "n": "Superior God Potion",
        "skill": "alchemy",
        "level": 82,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 267,
                "c": 10
            }
        ]
    },
    {
        "id": 338,
        "n": "Superior Satan Potion",
        "skill": "alchemy",
        "level": 84,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 229,
                "c": 5
            }
        ]
    },
    {
        "id": 855,
        "n": "Potion Of Preservation",
        "skill": "alchemy",
        "level": 88,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.8,
        "max_chance": 0.8,
        "matts": [
            {
                "id": 290,
                "c": 1
            },
            {
                "id": 225,
                "c": 4
            }
        ]
    },
    {
        "id": 448,
        "n": "Wizard Hat",
        "skill": "magic",
        "level": 3,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 265,
                "c": 4
            }
        ]
    },
    {
        "id": 449,
        "n": "Witch Hat",
        "skill": "magic",
        "level": 20,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 266,
                "c": 4
            }
        ]
    },
    {
        "id": 457,
        "n": "Battlemage Hat",
        "skill": "magic",
        "level": 37,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 1012,
                "c": 4
            },
            {
                "id": 254,
                "c": 2
            }
        ]
    },
    {
        "id": 450,
        "n": "Merlin Hat",
        "skill": "magic",
        "level": 65,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 1013,
                "c": 4
            },
            {
                "id": 252,
                "c": 3
            }
        ]
    },
    {
        "id": 451,
        "n": "Gandalf Hat",
        "skill": "magic",
        "level": 85,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 1014,
                "c": 4
            },
            {
                "id": 255,
                "c": 4
            }
        ]
    },
    {
        "id": 1069,
        "n": "Wizard Boots",
        "skill": "magic",
        "level": 2,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.7,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 265,
                "c": 4
            }
        ]
    },
    {
        "id": 1070,
        "n": "Witch Boots",
        "skill": "magic",
        "level": 17,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.7,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 266,
                "c": 4
            }
        ]
    },
    {
        "id": 1072,
        "n": "Battlemage Boots",
        "skill": "magic",
        "level": 35,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.7,
        "max_chance": 0.7,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 1012,
                "c": 4
            },
            {
                "id": 254,
                "c": 2
            }
        ]
    },
    {
        "id": 1074,
        "n": "Merlin Boots",
        "skill": "magic",
        "level": 61,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.6,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 1013,
                "c": 4
            },
            {
                "id": 252,
                "c": 3
            }
        ]
    },
    {
        "id": 1076,
        "n": "Gandalf Boots",
        "skill": "magic",
        "level": 80,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 1
            },
            {
                "id": 1014,
                "c": 4
            },
            {
                "id": 255,
                "c": 4
            }
        ]
    },
    {
        "id": 479,
        "n": "Wizard Robe Bottom",
        "skill": "magic",
        "level": 5,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 2
            },
            {
                "id": 265,
                "c": 6
            }
        ]
    },
    {
        "id": 480,
        "n": "Witch Robe Bottom",
        "skill": "magic",
        "level": 25,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 2
            },
            {
                "id": 266,
                "c": 6
            }
        ]
    },
    {
        "id": 481,
        "n": "Battlemage robe Bottom",
        "skill": "magic",
        "level": 42,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 2
            },
            {
                "id": 1012,
                "c": 6
            },
            {
                "id": 254,
                "c": 2
            }
        ]
    },
    {
        "id": 482,
        "n": "Merlin Robe Bottom",
        "skill": "magic",
        "level": 70,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 2
            },
            {
                "id": 1013,
                "c": 6
            },
            {
                "id": 252,
                "c": 3
            }
        ]
    },
    {
        "id": 483,
        "n": "Gandalf Robe Bottom",
        "skill": "magic",
        "level": 90,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 990,
                "c": 2
            },
            {
                "id": 1014,
                "c": 6
            },
            {
                "id": 255,
                "c": 4
            }
        ]
    },
    {
        "id": 452,
        "n": "Wizard Robe",
        "skill": "magic",
        "level": 9,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 3
            },
            {
                "id": 265,
                "c": 8
            }
        ]
    },
    {
        "id": 453,
        "n": "Witch Robe",
        "skill": "magic",
        "level": 30,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 3
            },
            {
                "id": 266,
                "c": 8
            }
        ]
    },
    {
        "id": 455,
        "n": "Battlemage Robe",
        "skill": "magic",
        "level": 47,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 3
            },
            {
                "id": 1012,
                "c": 8
            },
            {
                "id": 254,
                "c": 2
            }
        ]
    },
    {
        "id": 456,
        "n": "Merlin Robe",
        "skill": "magic",
        "level": 75,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.5,
        "matts": [
            {
                "id": 990,
                "c": 3
            },
            {
                "id": 1013,
                "c": 8
            },
            {
                "id": 252,
                "c": 3
            }
        ]
    },
    {
        "id": 454,
        "n": "Gandalf Robe",
        "skill": "magic",
        "level": 95,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.4,
        "matts": [
            {
                "id": 990,
                "c": 3
            },
            {
                "id": 1014,
                "c": 8
            },
            {
                "id": 255,
                "c": 4
            }
        ]
    },
    {
        "id": 233,
        "n": "Dust",
        "skill": "alchemy",
        "level": 15,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.55,
        "max_chance": 1,
        "matts": [
            {
                "id": 270,
                "c": 4
            }
        ]
    },
    {
        "id": 233,
        "n": "Dust",
        "skill": "alchemy",
        "level": 22,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 271,
                "c": 4
            }
        ]
    },
    {
        "id": 233,
        "n": "Dust",
        "skill": "alchemy",
        "level": 5,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.8,
        "max_chance": 1,
        "matts": [
            {
                "id": 272,
                "c": 8
            }
        ]
    },
    {
        "id": 233,
        "n": "Dust",
        "skill": "alchemy",
        "level": 35,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 273,
                "c": 6
            }
        ]
    },
    {
        "id": 233,
        "n": "Dust",
        "skill": "alchemy",
        "level": 7,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 274,
                "c": 6
            }
        ]
    },
    {
        "id": 1153,
        "n": "Rose Pouch",
        "skill": "jewelry",
        "level": 1,
        "source": {
            "n": "Inventory",
            "img": {
                "sheet": "1",
                "x": -1,
                "y": -1
            }
        },
        "min_chance": 0.25,
        "max_chance": 0.25,
        "matts": [
            {
                "id": 1157,
                "c": 10
            }
        ]
    },
    {
        "id": 313,
        "n": "Oak Log",
        "skill": "woodcutting",
        "level": 10,
        "source": {
            "n": "Oak",
            "img": {
                "sheet": "46",
                "x": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                "y": 2
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 314,
        "n": "Cactus Wood",
        "skill": "woodcutting",
        "level": 5,
        "source": {
            "n": "Cactus",
            "img": {
                "sheet": "1",
                "x": 11,
                "y": 3
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 29,
        "n": "Fir Log",
        "skill": "woodcutting",
        "level": 0,
        "source": {
            "n": "Fir tree",
            "img": {
                "sheet": "46",
                "x": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                "y": 0
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 287,
        "n": "Small Vial Of Water",
        "skill": "alchemy",
        "level": 1,
        "source": {
            "n": "Water Well",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 14
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": [
            {
                "id": 249,
                "c": 1
            }
        ]
    },
    {
        "id": 288,
        "n": "Medium Vial Of Water",
        "skill": "alchemy",
        "level": 1,
        "source": {
            "n": "Water Well",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 14
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": [
            {
                "id": 247,
                "c": 1
            }
        ]
    },
    {
        "id": 289,
        "n": "Large Vial Of Water",
        "skill": "alchemy",
        "level": 1,
        "source": {
            "n": "Water Well",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 14
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": [
            {
                "id": 246,
                "c": 1
            }
        ]
    },
    {
        "id": 290,
        "n": "Superior Vial Of Water",
        "skill": "alchemy",
        "level": 1,
        "source": {
            "n": "Water Well",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 14
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": [
            {
                "id": 248,
                "c": 1
            }
        ]
    },
    {
        "id": 389,
        "n": "Uncut Jadeite",
        "skill": "mining",
        "level": 75,
        "source": {
            "n": "Platinum",
            "img": {
                "sheet": "1",
                "x": 4,
                "y": 4
            }
        },
        "min_chance": 0.0015,
        "max_chance": 0.0015,
        "matts": []
    },
    {
        "id": 373,
        "n": "Platinum Chunk",
        "skill": "mining",
        "level": 75,
        "source": {
            "n": "Platinum",
            "img": {
                "sheet": "1",
                "x": 4,
                "y": 4
            }
        },
        "min_chance": 0.2,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 387,
        "n": "Uncut Black Opal",
        "skill": "mining",
        "level": 60,
        "source": {
            "n": "Azurite",
            "img": {
                "sheet": "1",
                "x": 10,
                "y": 4
            }
        },
        "min_chance": 0.0015,
        "max_chance": 0.0015,
        "matts": []
    },
    {
        "id": 383,
        "n": "Azure ore",
        "skill": "mining",
        "level": 60,
        "source": {
            "n": "Azurite",
            "img": {
                "sheet": "1",
                "x": 10,
                "y": 4
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 385,
        "n": "Uncut Amethyst",
        "skill": "mining",
        "level": 55,
        "source": {
            "n": "White Gold",
            "img": {
                "sheet": "42",
                "x": 0,
                "y": 5
            }
        },
        "min_chance": 0.0015,
        "max_chance": 0.0015,
        "matts": []
    },
    {
        "id": 484,
        "n": "White Gold Chunk",
        "skill": "mining",
        "level": 55,
        "source": {
            "n": "White Gold",
            "img": {
                "sheet": "42",
                "x": 0,
                "y": 5
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 594,
        "n": "Maple Log",
        "skill": "woodcutting",
        "level": 35,
        "source": {
            "n": "Maple",
            "img": {
                "sheet": "42",
                "x": 0,
                "y": 6
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 595,
        "n": "Spirit Log",
        "skill": "woodcutting",
        "level": 45,
        "source": {
            "n": "Spirit Tree",
            "img": {
                "sheet": "42",
                "x": 0,
                "y": 3
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 596,
        "n": "Blue Palm Log",
        "skill": "woodcutting",
        "level": 55,
        "source": {
            "n": "Blue Palm",
            "img": {
                "sheet": "1",
                "x": 9,
                "y": 3
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 597,
        "n": "Magic Oak Log",
        "skill": "woodcutting",
        "level": 65,
        "source": {
            "n": "Magic Oak",
            "img": {
                "sheet": "46",
                "x": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                "y": 3
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 387,
        "n": "Uncut Black Opal",
        "skill": "mining",
        "level": 80,
        "source": {
            "n": "Fire Stone",
            "img": {
                "sheet": "1",
                "x": 5,
                "y": 4
            }
        },
        "min_chance": 0.002,
        "max_chance": 0.002,
        "matts": []
    },
    {
        "id": 657,
        "n": "Fire Stone Chunk",
        "skill": "mining",
        "level": 80,
        "source": {
            "n": "Fire Stone",
            "img": {
                "sheet": "1",
                "x": 5,
                "y": 4
            }
        },
        "min_chance": 0.15,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 220,
        "n": "Green Leaf",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Green Leaf Bush",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 9
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 204,
        "n": "Yellow Leaf",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Yellow Leaf Bush",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 8
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 757,
        "n": "Grass",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Grass",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 13
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 758,
        "n": "Hay",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Hay",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 14
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 760,
        "n": "Wheat",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Wheat",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 15
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 762,
        "n": "Apple",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Apple Tree",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 11
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 212,
        "n": "Blue Leaf",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Blue Leaf Bush",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 7
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 285,
        "n": "Aconitum",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Aconitum Leafs",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 4
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 221,
        "n": "Blood Herb",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Blood Herbs",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 0
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 222,
        "n": "Beast Herb",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Beast Herbs",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 1
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 284,
        "n": "Oregano Leaf",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Oregano Leafs",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 3
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 283,
        "n": "Yarrow",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Yarrow Leafs",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 5
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 3,
        "n": "Tomato",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Tomatoes",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 21
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 780,
        "n": "Potato",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Potato Plant",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 17
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 781,
        "n": "Onion",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Onion Plant",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 16
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 782,
        "n": "Banana",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Banana Tree",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 10
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 783,
        "n": "Pineapple",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Pineapple",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 12
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 784,
        "n": "Carrot",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Carrot",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 18
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 785,
        "n": "Corn",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Corn",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 19
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 786,
        "n": "Strawberry",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Strawberries",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 20
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 228,
        "n": "Old Leaf",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Old Leaves Bush",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 6
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 100,
        "n": "Raw White Shark",
        "skill": "fishing",
        "level": 60,
        "source": {
            "n": "Fish - Wooden Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.45,
        "matts": []
    },
    {
        "id": 98,
        "n": "Raw Manta Ray",
        "skill": "fishing",
        "level": 58,
        "source": {
            "n": "Fish - Wooden Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.45,
        "matts": []
    },
    {
        "id": 96,
        "n": "Raw Squalidae",
        "skill": "fishing",
        "level": 55,
        "source": {
            "n": "Fish - Wooden Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.45,
        "matts": []
    },
    {
        "id": 1396,
        "n": "Sunken Treasure",
        "skill": "fishing",
        "level": 50,
        "source": {
            "n": "Fish - Wooden Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 94,
        "n": "Raw Swordfish",
        "skill": "fishing",
        "level": 50,
        "source": {
            "n": "Fish - Wooden Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.5,
        "matts": []
    },
    {
        "id": 1368,
        "n": "Raw Frog",
        "skill": "fishing",
        "level": 50,
        "source": {
            "n": "Fish - Wooden Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.15,
        "max_chance": 0.15,
        "matts": []
    },
    {
        "id": 214,
        "n": "Dulse Seaweed",
        "skill": "fishing",
        "level": 85,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.05,
        "matts": []
    },
    {
        "id": 1399,
        "n": "Poseidon's' Piece 2",
        "skill": "fishing",
        "level": 85,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.0005,
        "max_chance": 0.0005,
        "matts": []
    },
    {
        "id": 1398,
        "n": "Poseidon's' Piece 1",
        "skill": "fishing",
        "level": 85,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.0005,
        "max_chance": 0.0005,
        "matts": []
    },
    {
        "id": 120,
        "n": "Raw King Seahorse",
        "skill": "fishing",
        "level": 85,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.1,
        "matts": []
    },
    {
        "id": 118,
        "n": "Raw Spiny Sea Star",
        "skill": "fishing",
        "level": 82,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.15,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 206,
        "n": "Nori Seaweed",
        "skill": "fishing",
        "level": 70,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.05,
        "matts": []
    },
    {
        "id": 90,
        "n": "Raw Red Star",
        "skill": "fishing",
        "level": 43,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.25,
        "matts": []
    },
    {
        "id": 88,
        "n": "Raw Common Starfish",
        "skill": "fishing",
        "level": 43,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.45,
        "matts": []
    },
    {
        "id": 1396,
        "n": "Sunken Treasure",
        "skill": "fishing",
        "level": 50,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 82,
        "n": "Raw Seahorse",
        "skill": "fishing",
        "level": 40,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.5,
        "matts": []
    },
    {
        "id": 76,
        "n": "Raw Jellyfish",
        "skill": "fishing",
        "level": 25,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": []
    },
    {
        "id": 74,
        "n": "Raw Blue Marine Fish",
        "skill": "fishing",
        "level": 23,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": []
    },
    {
        "id": 213,
        "n": "Kombu Seaweed",
        "skill": "fishing",
        "level": 5,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.05,
        "matts": []
    },
    {
        "id": 70,
        "n": "Raw Baby Squid",
        "skill": "fishing",
        "level": 5,
        "source": {
            "n": "Fish - Fishing Net",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 0.6,
        "matts": []
    },
    {
        "id": 122,
        "n": "Raw Baby Whale",
        "skill": "fishing",
        "level": 95,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.3,
        "matts": []
    },
    {
        "id": 1399,
        "n": "Poseidon's' Piece 2",
        "skill": "fishing",
        "level": 85,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.0005,
        "max_chance": 0.0005,
        "matts": []
    },
    {
        "id": 1398,
        "n": "Poseidon's' Piece 1",
        "skill": "fishing",
        "level": 85,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.0005,
        "max_chance": 0.0005,
        "matts": []
    },
    {
        "id": 114,
        "n": "Raw Gray Shark",
        "skill": "fishing",
        "level": 75,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.4,
        "matts": []
    },
    {
        "id": 112,
        "n": "Raw Reef Manta Ray",
        "skill": "fishing",
        "level": 73,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.45,
        "matts": []
    },
    {
        "id": 1396,
        "n": "Sunken Treasure",
        "skill": "fishing",
        "level": 70,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 110,
        "n": "Raw Hammer Shark",
        "skill": "fishing",
        "level": 70,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.5,
        "matts": []
    },
    {
        "id": 1372,
        "n": "Raw Cowfish",
        "skill": "fishing",
        "level": 63,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.4,
        "matts": []
    },
    {
        "id": 102,
        "n": "Raw Dolphin",
        "skill": "fishing",
        "level": 63,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.4,
        "matts": []
    },
    {
        "id": 1368,
        "n": "Raw Frog",
        "skill": "fishing",
        "level": 63,
        "source": {
            "n": "Fish - Steel Harpoon",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.15,
        "max_chance": 0.15,
        "matts": []
    },
    {
        "id": 106,
        "n": "Raw King Crab",
        "skill": "fishing",
        "level": 65,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.15,
        "max_chance": 0.3,
        "matts": []
    },
    {
        "id": 247,
        "n": "Empty Medium Vial",
        "skill": "fishing",
        "level": 48,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 92,
        "n": "Raw Lobster",
        "skill": "fishing",
        "level": 48,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.4,
        "matts": []
    },
    {
        "id": 1396,
        "n": "Sunken Treasure",
        "skill": "fishing",
        "level": 43,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 84,
        "n": "Raw Mud Crab",
        "skill": "fishing",
        "level": 43,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.5,
        "matts": []
    },
    {
        "id": 249,
        "n": "Empty Small Vial",
        "skill": "fishing",
        "level": 35,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 80,
        "n": "Raw Sand Crab",
        "skill": "fishing",
        "level": 35,
        "source": {
            "n": "Fish - Cage",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 0.65,
        "matts": []
    },
    {
        "id": 32,
        "n": "Copper",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Copper Vein",
            "img": {
                "sheet": "46",
                "x": 3,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 32,
        "n": "Copper",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Copper Vein",
            "img": {
                "sheet": "46",
                "x": 4,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 32,
        "n": "Copper",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Copper Vein",
            "img": {
                "sheet": "46",
                "x": 5,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 198,
        "n": "Uncut Emerald",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron Vein",
            "img": {
                "sheet": "46",
                "x": 6,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 31,
        "n": "Iron ore",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron Vein",
            "img": {
                "sheet": "46",
                "x": 6,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 198,
        "n": "Uncut Emerald",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron Vein",
            "img": {
                "sheet": "46",
                "x": 7,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 31,
        "n": "Iron ore",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron Vein",
            "img": {
                "sheet": "46",
                "x": 7,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 198,
        "n": "Uncut Emerald",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron Vein",
            "img": {
                "sheet": "46",
                "x": 8,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 31,
        "n": "Iron ore",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Iron Vein",
            "img": {
                "sheet": "46",
                "x": 8,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 200,
        "n": "Uncut Sapphire",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Ore",
            "img": {
                "sheet": "46",
                "x": 9,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 185,
        "n": "Silver Chunk",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Ore",
            "img": {
                "sheet": "46",
                "x": 9,
                "y": 12
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 200,
        "n": "Uncut Sapphire",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Vein",
            "img": {
                "sheet": "46",
                "x": 10,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 185,
        "n": "Silver Chunk",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Vein",
            "img": {
                "sheet": "46",
                "x": 10,
                "y": 12
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 200,
        "n": "Uncut Sapphire",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Vein",
            "img": {
                "sheet": "46",
                "x": 11,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 185,
        "n": "Silver Chunk",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Vein",
            "img": {
                "sheet": "46",
                "x": 11,
                "y": 12
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 200,
        "n": "Uncut Sapphire",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Vein",
            "img": {
                "sheet": "46",
                "x": 12,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 185,
        "n": "Silver Chunk",
        "skill": "mining",
        "level": 25,
        "source": {
            "n": "Silver Vein",
            "img": {
                "sheet": "46",
                "x": 12,
                "y": 12
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 194,
        "n": "Uncut Diamond",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold Vein",
            "img": {
                "sheet": "46",
                "x": 13,
                "y": 12
            }
        },
        "min_chance": 0.0025,
        "max_chance": 0.0025,
        "matts": []
    },
    {
        "id": 184,
        "n": "Gold Chunk",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold Vein",
            "img": {
                "sheet": "46",
                "x": 13,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 194,
        "n": "Uncut Diamond",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold Vein",
            "img": {
                "sheet": "46",
                "x": 14,
                "y": 12
            }
        },
        "min_chance": 0.0025,
        "max_chance": 0.0025,
        "matts": []
    },
    {
        "id": 184,
        "n": "Gold Chunk",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold Vein",
            "img": {
                "sheet": "46",
                "x": 14,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 194,
        "n": "Uncut Diamond",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold Vein",
            "img": {
                "sheet": "46",
                "x": 15,
                "y": 12
            }
        },
        "min_chance": 0.0025,
        "max_chance": 0.0025,
        "matts": []
    },
    {
        "id": 184,
        "n": "Gold Chunk",
        "skill": "mining",
        "level": 45,
        "source": {
            "n": "Gold Vein",
            "img": {
                "sheet": "46",
                "x": 15,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 33,
        "n": "Tin",
        "skill": "mining",
        "level": 1,
        "source": {
            "n": "Tin Vein",
            "img": {
                "sheet": "46",
                "x": 16,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 196,
        "n": "Uncut Ruby",
        "skill": "mining",
        "level": 40,
        "source": {
            "n": "Coal Vein",
            "img": {
                "sheet": "46",
                "x": 17,
                "y": 12
            }
        },
        "min_chance": 0.005,
        "max_chance": 0.005,
        "matts": []
    },
    {
        "id": 186,
        "n": "Coal",
        "skill": "mining",
        "level": 40,
        "source": {
            "n": "Coal Vein",
            "img": {
                "sheet": "46",
                "x": 17,
                "y": 12
            }
        },
        "min_chance": 0.3,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 389,
        "n": "Uncut Jadeite",
        "skill": "mining",
        "level": 75,
        "source": {
            "n": "Platinum Vein",
            "img": {
                "sheet": "46",
                "x": 18,
                "y": 12
            }
        },
        "min_chance": 0.0015,
        "max_chance": 0.0015,
        "matts": []
    },
    {
        "id": 373,
        "n": "Platinum Chunk",
        "skill": "mining",
        "level": 75,
        "source": {
            "n": "Platinum Vein",
            "img": {
                "sheet": "46",
                "x": 18,
                "y": 12
            }
        },
        "min_chance": 0.2,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 387,
        "n": "Uncut Black Opal",
        "skill": "mining",
        "level": 60,
        "source": {
            "n": "Azure Vein",
            "img": {
                "sheet": "46",
                "x": 19,
                "y": 12
            }
        },
        "min_chance": 0.0015,
        "max_chance": 0.0015,
        "matts": []
    },
    {
        "id": 383,
        "n": "Azure ore",
        "skill": "mining",
        "level": 60,
        "source": {
            "n": "Azure Vein",
            "img": {
                "sheet": "46",
                "x": 19,
                "y": 12
            }
        },
        "min_chance": 0.25,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 403,
        "n": "Air Bolt",
        "skill": "magic",
        "level": 13,
        "source": {
            "n": "Air Altar",
            "img": {
                "sheet": "15",
                "x": 5,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 265,
                "c": 1
            }
        ]
    },
    {
        "id": 408,
        "n": "Air Missile",
        "skill": "magic",
        "level": 23,
        "source": {
            "n": "Air Altar",
            "img": {
                "sheet": "15",
                "x": 5,
                "y": 0
            }
        },
        "min_chance": 0.6,
        "max_chance": 1,
        "matts": [
            {
                "id": 266,
                "c": 1
            }
        ]
    },
    {
        "id": 413,
        "n": "Air Wave",
        "skill": "magic",
        "level": 38,
        "source": {
            "n": "Air Altar",
            "img": {
                "sheet": "15",
                "x": 5,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1012,
                "c": 1
            }
        ]
    },
    {
        "id": 418,
        "n": "Air Blast",
        "skill": "magic",
        "level": 60,
        "source": {
            "n": "Air Altar",
            "img": {
                "sheet": "15",
                "x": 5,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1013,
                "c": 1
            }
        ]
    },
    {
        "id": 402,
        "n": "Flash Bolt",
        "skill": "magic",
        "level": 10,
        "source": {
            "n": "Flash Altar",
            "img": {
                "sheet": "15",
                "x": 3,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 265,
                "c": 1
            }
        ]
    },
    {
        "id": 407,
        "n": "Flash Missile",
        "skill": "magic",
        "level": 20,
        "source": {
            "n": "Flash Altar",
            "img": {
                "sheet": "15",
                "x": 3,
                "y": 0
            }
        },
        "min_chance": 0.6,
        "max_chance": 1,
        "matts": [
            {
                "id": 266,
                "c": 1
            }
        ]
    },
    {
        "id": 412,
        "n": "Flash Wave",
        "skill": "magic",
        "level": 34,
        "source": {
            "n": "Flash Altar",
            "img": {
                "sheet": "15",
                "x": 3,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1012,
                "c": 1
            }
        ]
    },
    {
        "id": 417,
        "n": "Flash Blast",
        "skill": "magic",
        "level": 55,
        "source": {
            "n": "Flash Altar",
            "img": {
                "sheet": "15",
                "x": 3,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1013,
                "c": 1
            }
        ]
    },
    {
        "id": 404,
        "n": "Earth Bolt",
        "skill": "magic",
        "level": 15,
        "source": {
            "n": "Earth Altar",
            "img": {
                "sheet": "15",
                "x": 2,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 265,
                "c": 1
            }
        ]
    },
    {
        "id": 410,
        "n": "Earth Missile",
        "skill": "magic",
        "level": 28,
        "source": {
            "n": "Earth Altar",
            "img": {
                "sheet": "15",
                "x": 2,
                "y": 0
            }
        },
        "min_chance": 0.6,
        "max_chance": 1,
        "matts": [
            {
                "id": 266,
                "c": 1
            }
        ]
    },
    {
        "id": 414,
        "n": "Earth Wave",
        "skill": "magic",
        "level": 42,
        "source": {
            "n": "Earth Altar",
            "img": {
                "sheet": "15",
                "x": 2,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1012,
                "c": 1
            }
        ]
    },
    {
        "id": 419,
        "n": "Earth Blast",
        "skill": "magic",
        "level": 65,
        "source": {
            "n": "Earth Altar",
            "img": {
                "sheet": "15",
                "x": 2,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1013,
                "c": 1
            }
        ]
    },
    {
        "id": 405,
        "n": "Water Bolt",
        "skill": "magic",
        "level": 17,
        "source": {
            "n": "Water Altar",
            "img": {
                "sheet": "15",
                "x": 4,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 265,
                "c": 1
            }
        ]
    },
    {
        "id": 409,
        "n": "Water Missile",
        "skill": "magic",
        "level": 26,
        "source": {
            "n": "Water Altar",
            "img": {
                "sheet": "15",
                "x": 4,
                "y": 0
            }
        },
        "min_chance": 0.6,
        "max_chance": 1,
        "matts": [
            {
                "id": 266,
                "c": 1
            }
        ]
    },
    {
        "id": 415,
        "n": "Water Wave",
        "skill": "magic",
        "level": 46,
        "source": {
            "n": "Water Altar",
            "img": {
                "sheet": "15",
                "x": 4,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1012,
                "c": 1
            }
        ]
    },
    {
        "id": 420,
        "n": "Water Blast",
        "skill": "magic",
        "level": 70,
        "source": {
            "n": "Water Altar",
            "img": {
                "sheet": "15",
                "x": 4,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1013,
                "c": 1
            }
        ]
    },
    {
        "id": 406,
        "n": "Fire Bolt",
        "skill": "magic",
        "level": 19,
        "source": {
            "n": "Fire Altar",
            "img": {
                "sheet": "15",
                "x": 1,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 265,
                "c": 1
            }
        ]
    },
    {
        "id": 411,
        "n": "Fire Missile",
        "skill": "magic",
        "level": 30,
        "source": {
            "n": "Fire Altar",
            "img": {
                "sheet": "15",
                "x": 1,
                "y": 0
            }
        },
        "min_chance": 0.6,
        "max_chance": 1,
        "matts": [
            {
                "id": 266,
                "c": 1
            }
        ]
    },
    {
        "id": 416,
        "n": "Fire Wave",
        "skill": "magic",
        "level": 50,
        "source": {
            "n": "Fire Altar",
            "img": {
                "sheet": "15",
                "x": 1,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1012,
                "c": 1
            }
        ]
    },
    {
        "id": 421,
        "n": "Fire Blast",
        "skill": "magic",
        "level": 72,
        "source": {
            "n": "Fire Altar",
            "img": {
                "sheet": "15",
                "x": 1,
                "y": 0
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 1013,
                "c": 1
            }
        ]
    },
    {
        "id": 229,
        "n": "Dragon Herb",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Dragon Bush",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 2
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 1017,
        "n": "Trout With Potatoes",
        "skill": "cooking",
        "level": 12,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 10,
                "c": 1
            },
            {
                "id": 780,
                "c": 2
            }
        ]
    },
    {
        "id": 1018,
        "n": "Lion Fish Soup",
        "skill": "cooking",
        "level": 36,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.45,
        "max_chance": 1,
        "matts": [
            {
                "id": 78,
                "c": 1
            },
            {
                "id": 783,
                "c": 1
            },
            {
                "id": 781,
                "c": 1
            }
        ]
    },
    {
        "id": 1023,
        "n": "Pineapple Juice",
        "skill": "cooking",
        "level": 37,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 783,
                "c": 2
            },
            {
                "id": 247,
                "c": 1
            }
        ]
    },
    {
        "id": 1024,
        "n": "Root Beer",
        "skill": "cooking",
        "level": 7,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 205,
                "c": 1
            },
            {
                "id": 760,
                "c": 2
            }
        ]
    },
    {
        "id": 1025,
        "n": "Rock Squid Soup",
        "skill": "cooking",
        "level": 67,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 104,
                "c": 1
            },
            {
                "id": 780,
                "c": 2
            },
            {
                "id": 784,
                "c": 1
            },
            {
                "id": 781,
                "c": 1
            }
        ]
    },
    {
        "id": 1026,
        "n": "Lobster Curry",
        "skill": "cooking",
        "level": 49,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 92,
                "c": 1
            },
            {
                "id": 784,
                "c": 2
            },
            {
                "id": 781,
                "c": 2
            }
        ]
    },
    {
        "id": 1027,
        "n": "Salmon Soup",
        "skill": "cooking",
        "level": 30,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.5,
        "max_chance": 1,
        "matts": [
            {
                "id": 14,
                "c": 1
            },
            {
                "id": 781,
                "c": 2
            }
        ]
    },
    {
        "id": 1028,
        "n": "Hammer Shark Dish",
        "skill": "cooking",
        "level": 71,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 110,
                "c": 1
            },
            {
                "id": 781,
                "c": 3
            },
            {
                "id": 780,
                "c": 3
            }
        ]
    },
    {
        "id": 1029,
        "n": "Manta Ray Steak",
        "skill": "cooking",
        "level": 74,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 1,
        "matts": [
            {
                "id": 112,
                "c": 1
            },
            {
                "id": 784,
                "c": 3
            },
            {
                "id": 783,
                "c": 2
            }
        ]
    },
    {
        "id": 1030,
        "n": "Dolphin Sushi",
        "skill": "cooking",
        "level": 63,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.4,
        "max_chance": 1,
        "matts": [
            {
                "id": 102,
                "c": 2
            },
            {
                "id": 213,
                "c": 1
            }
        ]
    },
    {
        "id": 1139,
        "n": "Angry Witch [Legendary]",
        "skill": "cooking",
        "level": 1,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.3,
        "max_chance": 0.3,
        "matts": [
            {
                "id": 1142,
                "c": 1
            },
            {
                "id": 1140,
                "c": 1
            },
            {
                "id": 1141,
                "c": 1
            }
        ]
    },
    {
        "id": 1379,
        "n": "Coelacanth Kombu-sushi",
        "skill": "cooking",
        "level": 103,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1378,
                "c": 1
            },
            {
                "id": 213,
                "c": 3
            }
        ]
    },
    {
        "id": 1380,
        "n": "Coelacanth Nori-sushi",
        "skill": "cooking",
        "level": 105,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1378,
                "c": 1
            },
            {
                "id": 206,
                "c": 3
            }
        ]
    },
    {
        "id": 1382,
        "n": "Sturgeon Kombu-sushi",
        "skill": "cooking",
        "level": 107,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1381,
                "c": 1
            },
            {
                "id": 213,
                "c": 4
            }
        ]
    },
    {
        "id": 1387,
        "n": "Stonefish Kombu-sushi",
        "skill": "cooking",
        "level": 112,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1386,
                "c": 1
            },
            {
                "id": 213,
                "c": 5
            }
        ]
    },
    {
        "id": 1388,
        "n": "Stonefish Nori-sushi",
        "skill": "cooking",
        "level": 114,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1386,
                "c": 1
            },
            {
                "id": 206,
                "c": 5
            }
        ]
    },
    {
        "id": 1389,
        "n": "Stonefish Dulse-sushi",
        "skill": "cooking",
        "level": 116,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1386,
                "c": 1
            },
            {
                "id": 214,
                "c": 5
            }
        ]
    },
    {
        "id": 1393,
        "n": "Oarfish Kombu-sushi",
        "skill": "cooking",
        "level": 120,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1392,
                "c": 1
            },
            {
                "id": 213,
                "c": 6
            }
        ]
    },
    {
        "id": 1394,
        "n": "Oarfish Nori-sushi",
        "skill": "cooking",
        "level": 120,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1392,
                "c": 1
            },
            {
                "id": 206,
                "c": 6
            }
        ]
    },
    {
        "id": 1395,
        "n": "Oarfish Dulse-sushi",
        "skill": "cooking",
        "level": 120,
        "source": {
            "n": "Kettle",
            "img": {
                "sheet": "42",
                "x": 6,
                "y": 14
            }
        },
        "min_chance": 0.35,
        "max_chance": 0.6,
        "matts": [
            {
                "id": 1392,
                "c": 1
            },
            {
                "id": 214,
                "c": 6
            }
        ]
    },
    {
        "id": 265,
        "n": "Cotton Fabric",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Cotton",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 23
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 266,
        "n": "Bamboo Fabric",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Bamboo",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 22
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 116,
        "n": "Raw Deep Sea Octopus",
        "skill": "fishing",
        "level": 80,
        "source": {
            "n": "Fish - Iron Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.15,
        "matts": []
    },
    {
        "id": 108,
        "n": "Raw Giant Squid",
        "skill": "fishing",
        "level": 68,
        "source": {
            "n": "Fish - Iron Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.25,
        "matts": []
    },
    {
        "id": 104,
        "n": "Raw Rock Squid",
        "skill": "fishing",
        "level": 65,
        "source": {
            "n": "Fish - Iron Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.35,
        "matts": []
    },
    {
        "id": 68,
        "n": "Raw Pearl Clam",
        "skill": "fishing",
        "level": 1,
        "source": {
            "n": "Fish - Iron Fishing Rod",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 103,
        "n": "Dolphin",
        "skill": "health",
        "level": 100,
        "source": {
            "n": "Food Chest",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 99,
        "n": "Manta Ray",
        "skill": "health",
        "level": 80,
        "source": {
            "n": "Food Chest",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 93,
        "n": "Lobster",
        "skill": "health",
        "level": 50,
        "source": {
            "n": "Food Chest",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 79,
        "n": "Lion Fish",
        "skill": "health",
        "level": 2,
        "source": {
            "n": "Food Chest",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 14
            }
        },
        "min_chance": 0.2,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 123,
        "n": "Baby Whale",
        "skill": "health",
        "level": 1,
        "source": {
            "n": "Food Chest",
            "img": {
                "sheet": "1",
                "x": 3,
                "y": 14
            }
        },
        "min_chance": 0.01,
        "max_chance": 0.01,
        "matts": []
    },
    {
        "id": 1157,
        "n": "Rose",
        "skill": "farming",
        "level": 0,
        "source": {
            "n": "Rose Bush",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 24
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 1013,
        "n": "Jute Fabric",
        "skill": "farming",
        "level": 85,
        "source": {
            "n": "Tossa jute",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 25
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 1014,
        "n": "Silk Fabric",
        "skill": "farming",
        "level": 95,
        "source": {
            "n": "Tree of Silk Worms",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 26
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 458,
        "n": "Poison Rain",
        "skill": "magic",
        "level": 75,
        "source": {
            "n": "Poisoned Altar",
            "img": {
                "sheet": "15",
                "x": 7,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 1014,
                "c": 1
            }
        ]
    },
    {
        "id": 459,
        "n": "Blizzard",
        "skill": "magic",
        "level": 79,
        "source": {
            "n": "Blizzard Altar",
            "img": {
                "sheet": "15",
                "x": 6,
                "y": 0
            }
        },
        "min_chance": 0.7,
        "max_chance": 1,
        "matts": [
            {
                "id": 1014,
                "c": 1
            }
        ]
    },
    {
        "id": 1012,
        "n": "Flannel Fabric",
        "skill": "farming",
        "level": 66,
        "source": {
            "n": "Flannel Tree",
            "img": {
                "sheet": "50",
                "x": 0,
                "y": 27
            }
        },
        "min_chance": 1,
        "max_chance": 1,
        "matts": []
    },
    {
        "id": 1392,
        "n": "Raw Oarfish",
        "skill": "fishing",
        "level": 120,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.15,
        "matts": []
    },
    {
        "id": 1390,
        "n": "Raw Sunfish",
        "skill": "fishing",
        "level": 116,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1386,
        "n": "Raw Stonefish",
        "skill": "fishing",
        "level": 112,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1384,
        "n": "Raw Blue Marlin",
        "skill": "fishing",
        "level": 108,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.08,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1381,
        "n": "Raw sturgeon",
        "skill": "fishing",
        "level": 106,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1378,
        "n": "Raw Coelacanth",
        "skill": "fishing",
        "level": 103,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1376,
        "n": "Raw Whale Shark",
        "skill": "fishing",
        "level": 99,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1374,
        "n": "Raw Giant Catfish",
        "skill": "fishing",
        "level": 95,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.2,
        "matts": []
    },
    {
        "id": 1400,
        "n": "Poseidon's Permission",
        "skill": "fishing",
        "level": 95,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.001,
        "max_chance": 0.001,
        "matts": []
    },
    {
        "id": 1368,
        "n": "Raw Frog",
        "skill": "fishing",
        "level": 95,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.05,
        "max_chance": 0.05,
        "matts": []
    },
    {
        "id": 1392,
        "n": "Raw Oarfish",
        "skill": "fishing",
        "level": 120,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.3,
        "matts": []
    },
    {
        "id": 1390,
        "n": "Raw Sunfish",
        "skill": "fishing",
        "level": 116,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.3,
        "matts": []
    },
    {
        "id": 1386,
        "n": "Raw Stonefish",
        "skill": "fishing",
        "level": 112,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.3,
        "matts": []
    },
    {
        "id": 1384,
        "n": "Raw Blue Marlin",
        "skill": "fishing",
        "level": 108,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.1,
        "max_chance": 0.3,
        "matts": []
    },
    {
        "id": 1381,
        "n": "Raw sturgeon",
        "skill": "fishing",
        "level": 106,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.12,
        "max_chance": 0.22,
        "matts": []
    },
    {
        "id": 1378,
        "n": "Raw Coelacanth",
        "skill": "fishing",
        "level": 103,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.12,
        "max_chance": 0.22,
        "matts": []
    },
    {
        "id": 1376,
        "n": "Raw Whale Shark",
        "skill": "fishing",
        "level": 99,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.12,
        "max_chance": 0.22,
        "matts": []
    },
    {
        "id": 1374,
        "n": "Raw Giant Catfish",
        "skill": "fishing",
        "level": 95,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.15,
        "max_chance": 0.25,
        "matts": []
    },
    {
        "id": 1368,
        "n": "Raw Frog",
        "skill": "fishing",
        "level": 95,
        "source": {
            "n": "Fish - Poseidon' Trident",
            "img": {
                "sheet": "1",
                "x": 17,
                "y": 14
            }
        },
        "min_chance": 0.01,
        "max_chance": 0.01,
        "matts": []
    }
]
},{}],330:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , ItemStore = require('./ItemStore.js')
  , _crafts = require('./CraftDB.js')
  , _store = []
  , _filters = {show:false}
  , _lastTerm = ''
;

var _findByItemId = function(itemId) {
  var ret = {
    asMatt:[],
    formulas: []
  };

  var id = parseInt(itemId);
  _crafts.map(function(craft, idx){
    var found = false
      , i = 0;
    if (parseInt(craft.id) == id) {
      ret.formulas.push(craft);
    } else { // jewelry/alch/carp
      var maxI = craft.matts.length;
      while (i < maxI) {
        if (parseInt(craft.matts[i].id) == id) {
          var o = craft;
          var it = ItemStore.getItem(craft.id);
          o.img = it.img;
          ret.asMatt.push(o);
          i=maxI;
        }
        i++;
      }
    }
  });
  if (!ret.formulas.length) ret.formulas = null;
  return ret;

}

var _search = function(term) {
  var re = new RegExp(term.toLowerCase(), 'i');
  _store = [];
  // var min = parseInt(_filters.minPrice);
  // var max = parseInt(_filters.maxPrice);

  _crafts.map(function(item, idx){
    if (
      item && item.n && item.n.toLowerCase().match(re)
      // && (_filters.cat1==-1 || parseInt(item.t) == _filters.cat1)
      // && (_filters.minPrice=='' || min <= ip)
      // && (_filters.maxPrice=='' || max >= ip)
    ) {
      _store.push(item);
    }
  });
  CraftStore.emitChange()
};

var CraftStore = assign({}, EventEmitter.prototype, {
  getResults: function() {
    return _store;
  },
  getFilters: function() {
    return _filters
  },
  findByItemId: function(itemId) {
    return _findByItemId(itemId);
  },
  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },
  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },


  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;

    switch(action.actionType) {
      case AppConstants.ActionTypes.SEARCH_CRAFTS:
        q = action.q.trim();
        _lastTerm = q;
        _search(q);
        break;
    }


    return true; // No errors. Needed by promise in Dispatcher.
  })
});

module.exports = CraftStore;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"./CraftDB.js":329,"./ItemStore.js":333,"events":4,"object-assign":8}],331:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , util = require('../util.js')
  , _data = {}
  , _dataLoaded = false
  , _store = []
  , _lastTerm = ''
  , _=require('lodash')
  , HS_URL = '/hs.json'
  , HS_INTERVAL = 5 // minutes
  , _interval = false
  , _filters = {
    stat:'total',
    q: '',
  }
;

window.HS = {_data:function() { return _data},_store: function(){return _store }};


var _search = function() {
  if (!_dataLoaded) return;

  var re = new RegExp(_filters.q.toLowerCase(), 'i');
  _store = [];

  _data[_filters.stat].map(function(s,i){
    if (
      s && s.u && s.u.toLowerCase().match(re)
    ) {
      _store.push(s);
    }
  });
  HSStore.emitChange()
};


/**
 * Called when HS are successfully loaded via AJAX.
 *
 * @param {String} content Response from the server
 * @param {XMLHttpRequest} xhr
 */
var _loadComplete = function (content, xhr) {
  _data = JSON.parse(content);
  _dataLoaded = true;
  _search();

}

/**
 * Does an AJAX load of the specified URL.
 *
 * @param {String} url        URL to load
 * @param {Object} rawData    Object containing data to send in request. If
 *                            specified, a post is done. Otherwise, a get is
 *                            done.
 * @param {Function} callback Function to call once request returns
 */
var _load = function (url, rawData, callback) {
  if (_dataLoaded) {
    // for any indicators that HS are being (re)loaded
    _dataLoaded = false;
    HSStore.emitChange();
  }

  var xhr = new XMLHttpRequest();
  var data;
  if (rawData) {
    // Assume anything with data is a POST request
    xhr.open('post', url, true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

    data = Object.keys(rawData)
      .map(function(key) {
        return encodeURIComponent(key) + '=' + encodeURIComponent(rawData[key]);
      })
      .join('&');
  } else {
    // No data, use a GET request
    xhr.open('get', url + '?cachebust=' + Date.now(), true);
  }

  xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
      callback(xhr.responseText, xhr);
    }
  }
  xhr.send(data);
  return xhr;
}

var HSStore = assign({}, EventEmitter.prototype, {
  init: function() {
    _load(HS_URL, null, _loadComplete);
    _interval = window.setInterval(function(){
      _load(HS_URL, null, _loadComplete);
    }, HS_INTERVAL*60*1000);

  },
  
  getResults: function() {
    return _store;
  },
  
  getFilters: function() {
    return _filters
  },
  
  getStatList: function() {
    if (!_dataLoaded) {
      return [];
    }
    return Object.keys(_data);
  },

  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },
  
  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },


  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;

    switch(action.actionType) {
      case AppConstants.ActionTypes.SEARCH_HS:
        q = action.q.trim();
        _lastTerm = q;
        _search(q);
      break;
    }

    return true; // No errors. Needed by promise in Dispatcher.
  })
});

module.exports = HSStore;


},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"../util.js":341,"events":4,"lodash":6,"object-assign":8}],332:[function(require,module,exports){
module.exports = [
    {
        "id": 0,
        "n": "Bronze Dagger",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 1
            },
            "slot": 4,
            "aim": 4,
            "power": 5,
            "min_accuracy": 1,
            "price": 132,
            "enchant_id": 505,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1,
        "n": "Bronze Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 6
            },
            "slot": 3,
            "armor": 10,
            "min_defense": 1,
            "price": 262,
            "enchant_id": 571
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 2,
        "n": "Iron Chainmail",
        "t": 0,
        "img": {
            "sheet": "4",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 10
            },
            "slot": 2,
            "armor": 21,
            "min_defense": 20,
            "price": 5444,
            "enchant_id": 556
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 3,
        "n": "Tomato",
        "t": 1,
        "img": {
            "sheet": "4",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": false,
            "price": 3,
            "heal": 2,
            "sc": 0
        }
    },
    {
        "id": 4,
        "n": "Blunt Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 34
            },
            "slot": 4,
            "aim": 6,
            "power": 12,
            "min_accuracy": 1,
            "price": 168,
            "enchant_id": 506,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 5,
        "n": "Leather Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 4
            },
            "slot": 0,
            "armor": 7,
            "min_defense": 1,
            "price": 172
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 6,
        "n": "Ham",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": false,
            "price": 15,
            "heal": 3,
            "sc": 0
        }
    },
    {
        "id": 7,
        "n": "Fishing Rod",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 80
            },
            "slot": 4,
            "min_fishing": 1,
            "price": 40,
            "sc": 0
        }
    },
    {
        "id": 8,
        "n": "Raw Perch",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 1,
            "price": 10,
            "sc": 17
        }
    },
    {
        "id": 9,
        "n": "Perch",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": false,
            "heal": 3,
            "price": 15,
            "sc": 0
        }
    },
    {
        "id": 10,
        "n": "Raw Trout",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 10,
            "price": 30,
            "sc": 17
        }
    },
    {
        "id": 11,
        "n": "Trout",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": false,
            "heal": 4,
            "price": 45,
            "sc": 0
        }
    },
    {
        "id": 12,
        "n": "Raw Pike",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 20,
            "price": 50,
            "sc": 17
        }
    },
    {
        "id": 13,
        "n": "Pike",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": false,
            "heal": 6,
            "price": 75,
            "sc": 0
        }
    },
    {
        "id": 14,
        "n": "Raw Salmon",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 30,
            "price": 70,
            "sc": 17
        }
    },
    {
        "id": 15,
        "n": "Salmon",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": false,
            "heal": 8,
            "price": 105,
            "sc": 0
        }
    },
    {
        "id": 16,
        "n": "Raw Bass",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 40,
            "price": 100,
            "sc": 17
        }
    },
    {
        "id": 17,
        "n": "Bass",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": false,
            "heal": 10,
            "price": 150,
            "sc": 0
        }
    },
    {
        "id": 18,
        "n": "Iron Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 19
            },
            "slot": 4,
            "aim": 40,
            "power": 40,
            "min_accuracy": 20,
            "price": 5644,
            "enchant_id": 507,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 19,
        "n": "Red Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 1
            },
            "slot": 1,
            "armor": 5,
            "min_defense": 1,
            "price": 320
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 20,
        "n": "Leather Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 1
            },
            "slot": 6,
            "armor": 7,
            "min_defense": 1,
            "speed": 5,
            "price": 75
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 21,
        "n": "Leather Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 1
            },
            "slot": 5,
            "armor": 6,
            "min_defense": 1,
            "price": 65
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 22,
        "n": "Woodcutter's Axe",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 35
            },
            "slot": 4,
            "min_woodcutting": 1,
            "price": 120,
            "sc": 0
        }
    },
    {
        "id": 23,
        "n": "Iron Pickaxe",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 45
            },
            "slot": 4,
            "min_mining": 1,
            "price": 200,
            "sc": 0
        }
    },
    {
        "id": 24,
        "n": "Golden Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "price": 1800,
            "armor": 4,
            "aim": 4
        }
    },
    {
        "id": 25,
        "n": "Iron Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 3
            },
            "slot": 0,
            "armor": 14,
            "min_defense": 20,
            "price": 4148
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 26,
        "n": "Steel Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 38
            },
            "slot": 4,
            "aim": 20,
            "power": 20,
            "min_accuracy": 40,
            "price": 5180,
            "enchant_id": 508,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 27,
        "n": "Bronze Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 1
            },
            "slot": 6,
            "armor": 14,
            "speed": 5,
            "min_defense": 1,
            "price": 260
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 28,
        "n": "Golden Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 3800,
            "armor": 4,
            "aim": 4
        }
    },
    {
        "id": 29,
        "n": "Fir Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpenty": 1,
            "price": 10,
            "sc": 23
        }
    },
    {
        "id": 30,
        "n": "Clay",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 12,
            "sc": 2
        }
    },
    {
        "id": 31,
        "n": "Iron ore",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 20,
            "price": 180,
            "sc": 2
        }
    },
    {
        "id": 32,
        "n": "Copper",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 1,
            "price": 35,
            "sc": 2
        }
    },
    {
        "id": 33,
        "n": "Tin",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 1,
            "price": 35,
            "sc": 2
        }
    },
    {
        "id": 34,
        "n": "Bronze Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 4,
            "price": 65,
            "sc": 0
        }
    },
    {
        "id": 35,
        "n": "Sapphire Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 14
            },
            "slot": 2,
            "armor": 65,
            "min_defense": 50,
            "price": 68850,
            "enchant_id": 132
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 36,
        "n": "Forging Hammer",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 142
            },
            "slot": 4,
            "min_forging": 1,
            "price": 404,
            "sc": 0
        }
    },
    {
        "id": 37,
        "n": "Bronze Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 4
            },
            "slot": 0,
            "armor": 10,
            "min_defense": 1,
            "price": 260
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 38,
        "n": "Bronze Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 36
            },
            "slot": 4,
            "aim": 7,
            "power": 8,
            "min_accuracy": 1,
            "price": 198,
            "enchant_id": 509,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 39,
        "n": "Bronze Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 1
            },
            "slot": 5,
            "armor": 9,
            "min_defense": 1,
            "price": 130
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 40,
        "n": "Bronze Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 21
            },
            "slot": 2,
            "armor": 8,
            "min_defense": 1,
            "price": 390,
            "enchant_id": 555
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 41,
        "n": "Bronze Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 7
            },
            "slot": 4,
            "aim": 13,
            "power": 13,
            "min_accuracy": 1,
            "price": 394,
            "enchant_id": 510,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 42,
        "n": "Bronze Large Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 1
            },
            "slot": 3,
            "armor": 14,
            "min_defense": 1,
            "price": 358,
            "enchant_id": 572
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 43,
        "n": "Bronze Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 27
            },
            "slot": 2,
            "armor": 17,
            "min_defense": 1,
            "price": 644,
            "enchant_id": 560
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 44,
        "n": "Iron Rapier",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 3
            },
            "slot": 4,
            "aim": 25,
            "power": 15,
            "min_accuracy": 20,
            "price": 3142,
            "enchant_id": 511,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 45,
        "n": "Iron Berserked Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 24
            },
            "slot": 2,
            "armor": 20,
            "power": 10,
            "min_defense": 20,
            "price": 11492,
            "enchant_id": 559
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 46,
        "n": "Agility Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 3
            },
            "slot": 6,
            "armor": 5,
            "aim": 10,
            "speed": 30,
            "min_defense": 5,
            "price": 3800
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 47,
        "n": "Blue Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 2
            },
            "slot": 1,
            "armor": 5,
            "min_defense": 1,
            "price": 320
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 48,
        "n": "Silver Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 10,
            "price": 4500,
            "armor": 9,
            "enchant_id": 1085
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 49,
        "n": "Silver Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 10,
            "price": 5500,
            "armor": 10,
            "enchant_id": 1105
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 50,
        "n": "Iron Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 20,
            "price": 540,
            "sc": 0
        }
    },
    {
        "id": 51,
        "n": "Iron Short Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 4
            },
            "slot": 4,
            "aim": 6,
            "power": 9,
            "min_accuracy": 20,
            "price": 1916,
            "enchant_id": 512,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 52,
        "n": "Iron Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 4
            },
            "slot": 6,
            "armor": 17,
            "min_defense": 20,
            "speed": 10,
            "price": 4148
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 53,
        "n": "Iron Small Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 19
            },
            "slot": 3,
            "armor": 15,
            "min_defense": 20,
            "price": 4262,
            "enchant_id": 573
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 54,
        "n": "Iron Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 8
            },
            "slot": 4,
            "aim": 12,
            "power": 9,
            "min_accuracy": 20,
            "price": 3024,
            "enchant_id": 513,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 55,
        "n": "Iron Mace",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 9
            },
            "slot": 4,
            "aim": 15,
            "power": 10,
            "min_accuracy": 20,
            "price": 3830,
            "enchant_id": 514,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 56,
        "n": "Iron Scimitar",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 2
            },
            "slot": 4,
            "aim": 18,
            "power": 15,
            "min_accuracy": 20,
            "price": 3024,
            "enchant_id": 515,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 57,
        "n": "Iron Broad Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 5
            },
            "slot": 4,
            "aim": 15,
            "power": 18,
            "min_accuracy": 20,
            "price": 3830,
            "enchant_id": 537,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 58,
        "n": "Iron Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 2
            },
            "slot": 5,
            "armor": 14,
            "min_defense": 20,
            "price": 2722
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 59,
        "n": "Iron Flail",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 10
            },
            "slot": 4,
            "aim": 28,
            "power": 20,
            "min_accuracy": 20,
            "price": 3226,
            "enchant_id": 516,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 60,
        "n": "Iron Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 11
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 35,
            "power": 45,
            "min_accuracy": 20,
            "price": 3528,
            "enchant_id": 63,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 61,
        "n": "Iron Full Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 1
            },
            "slot": 0,
            "armor": 22,
            "min_defense": 20,
            "price": 4536
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 62,
        "n": "Iron Battle Hammer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 12
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 70,
            "power": 60,
            "min_accuracy": 20,
            "price": 7460,
            "enchant_id": 517,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 63,
        "n": "Enchanted Iron Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 20
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 55,
            "power": 65,
            "min_accuracy": 20,
            "price": 6526,
            "enchants_from": 60,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 64,
        "n": "Low Weapon Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3000,
            "sc": 5
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 65,
        "n": "Iron Large Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 7
            },
            "slot": 3,
            "armor": 20,
            "min_defense": 20,
            "price": 7660,
            "enchant_id": 574
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 66,
        "n": "Iron Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 12
            },
            "slot": 2,
            "armor": 35,
            "min_defense": 20,
            "price": 9850,
            "enchant_id": 561
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 67,
        "n": "Iron Excalibur",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 13
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 80,
            "power": 100,
            "min_accuracy": 20,
            "price": 15322,
            "enchant_id": 518,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 68,
        "n": "Raw Pearl Clam",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 30,
            "price": 4000,
            "sc": 17
        }
    },
    {
        "id": 69,
        "n": "Pearl Clam",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": false,
            "heal": 10,
            "price": 8000,
            "sc": 0
        }
    },
    {
        "id": 70,
        "n": "Raw Baby Squid",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 5,
            "price": 20,
            "sc": 17
        }
    },
    {
        "id": 71,
        "n": "Baby Squid",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 4,
            "price": 32,
            "sc": 0
        }
    },
    {
        "id": 72,
        "n": "Raw Sardine",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 15,
            "price": 40,
            "sc": 17
        }
    },
    {
        "id": 73,
        "n": "Sardine",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 5,
            "price": 58,
            "sc": 0
        }
    },
    {
        "id": 74,
        "n": "Raw Blue Marine Fish",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 23,
            "price": 54,
            "sc": 17
        }
    },
    {
        "id": 75,
        "n": "Blue Marine Fish",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 7,
            "price": 82,
            "sc": 0
        }
    },
    {
        "id": 76,
        "n": "Raw Jellyfish",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 25,
            "price": 62,
            "sc": 17
        }
    },
    {
        "id": 77,
        "n": "Jellyfish",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 5,
            "price": 92,
            "sc": 0
        }
    },
    {
        "id": 78,
        "n": "Raw Lion Fish",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 35,
            "price": 82,
            "sc": 17
        }
    },
    {
        "id": 79,
        "n": "Lion Fish",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": false,
            "heal": 9,
            "price": 124,
            "sc": 0
        }
    },
    {
        "id": 80,
        "n": "Raw Sand Crab",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 36,
            "price": 92,
            "sc": 17
        }
    },
    {
        "id": 81,
        "n": "Sand Crab",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 8,
            "price": 136,
            "sc": 0
        }
    },
    {
        "id": 82,
        "n": "Raw Seahorse",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 41,
            "price": 110,
            "sc": 17
        }
    },
    {
        "id": 83,
        "n": "Seahorse",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": false,
            "heal": 10,
            "price": 164,
            "sc": 0
        }
    },
    {
        "id": 84,
        "n": "Raw Mud Crab",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 43,
            "price": 120,
            "sc": 17
        }
    },
    {
        "id": 85,
        "n": "Mud Crab",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 9,
            "price": 178,
            "sc": 0
        }
    },
    {
        "id": 86,
        "n": "Raw Angelfish",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 45,
            "price": 126,
            "sc": 17
        }
    },
    {
        "id": 87,
        "n": "Angelfish",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": false,
            "heal": 11,
            "price": 186,
            "sc": 0
        }
    },
    {
        "id": 88,
        "n": "Raw Common Starfish",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 44,
            "price": 132,
            "sc": 17
        }
    },
    {
        "id": 89,
        "n": "Common Starfish",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": false,
            "heal": 11,
            "price": 200,
            "sc": 0
        }
    },
    {
        "id": 90,
        "n": "Raw Red Star",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 48,
            "price": 138,
            "sc": 17
        }
    },
    {
        "id": 91,
        "n": "Red Star",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": false,
            "heal": 12,
            "price": 206,
            "sc": 0
        }
    },
    {
        "id": 92,
        "n": "Raw Lobster",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 48,
            "price": 158,
            "sc": 17
        }
    },
    {
        "id": 93,
        "n": "Lobster",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": false,
            "heal": 12,
            "price": 238,
            "sc": 0
        }
    },
    {
        "id": 94,
        "n": "Raw Swordfish",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 50,
            "price": 170,
            "sc": 17
        }
    },
    {
        "id": 95,
        "n": "Swordfish",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 3
        },
        "params": {
            "wearable": false,
            "heal": 13,
            "price": 256,
            "sc": 0
        }
    },
    {
        "id": 96,
        "n": "Raw Squalidae",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 55,
            "price": 192,
            "sc": 17
        }
    },
    {
        "id": 97,
        "n": "Squalidae",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 14,
            "price": 286,
            "sc": 0
        }
    },
    {
        "id": 98,
        "n": "Raw Manta Ray",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 58,
            "price": 198,
            "sc": 17
        }
    },
    {
        "id": 99,
        "n": "Manta Ray",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 15,
            "price": 298,
            "sc": 0
        }
    },
    {
        "id": 100,
        "n": "Raw White Shark",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 60,
            "price": 210,
            "sc": 17
        }
    },
    {
        "id": 101,
        "n": "White Shark",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 3
        },
        "params": {
            "wearable": false,
            "heal": 16,
            "price": 316,
            "sc": 0
        }
    },
    {
        "id": 102,
        "n": "Raw Dolphin",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 63,
            "price": 220,
            "sc": 17
        }
    },
    {
        "id": 103,
        "n": "Dolphin",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": false,
            "heal": 15,
            "price": 328,
            "sc": 0
        }
    },
    {
        "id": 104,
        "n": "Raw Rock Squid",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 65,
            "price": 226,
            "sc": 17
        }
    },
    {
        "id": 105,
        "n": "Rock Squid",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 14,
            "price": 338,
            "sc": 0
        }
    },
    {
        "id": 106,
        "n": "Raw King Crab",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 64,
            "price": 326,
            "sc": 17
        }
    },
    {
        "id": 107,
        "n": "King Crab",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 16,
            "price": 488,
            "sc": 0
        }
    },
    {
        "id": 108,
        "n": "Raw Giant Squid",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 68,
            "price": 234,
            "sc": 17
        }
    },
    {
        "id": 109,
        "n": "Giant Squid",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 16,
            "price": 352,
            "sc": 0
        }
    },
    {
        "id": 110,
        "n": "Raw Hammer Shark",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 70,
            "price": 240,
            "sc": 17
        }
    },
    {
        "id": 111,
        "n": "Hammer Shark",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 17,
            "price": 360,
            "sc": 0
        }
    },
    {
        "id": 112,
        "n": "Raw Reef Manta Ray",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 73,
            "price": 250,
            "sc": 17
        }
    },
    {
        "id": 113,
        "n": "Reef Manta Ray",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 18,
            "price": 374,
            "sc": 0
        }
    },
    {
        "id": 114,
        "n": "Raw Gray Shark",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 75,
            "price": 256,
            "sc": 17
        }
    },
    {
        "id": 115,
        "n": "Gray Shark",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 2,
            "y": 3
        },
        "params": {
            "wearable": false,
            "heal": 19,
            "price": 382,
            "sc": 0
        }
    },
    {
        "id": 116,
        "n": "Raw Deep Sea Octopus",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 80,
            "price": 280,
            "sc": 17
        }
    },
    {
        "id": 117,
        "n": "Deep Sea Octopus",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 19,
            "price": 420,
            "sc": 0
        }
    },
    {
        "id": 118,
        "n": "Raw Spiny Sea Star",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 82,
            "price": 322,
            "sc": 17
        }
    },
    {
        "id": 119,
        "n": "Spiny Sea Star",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": false,
            "heal": 20,
            "price": 484,
            "sc": 0
        }
    },
    {
        "id": 120,
        "n": "Raw King Seahorse",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 85,
            "price": 386,
            "sc": 17
        }
    },
    {
        "id": 121,
        "n": "King Seahorse",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": false,
            "heal": 22,
            "price": 578,
            "sc": 0
        }
    },
    {
        "id": 122,
        "n": "Raw Baby Whale",
        "t": 3,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 95,
            "price": 456,
            "sc": 17
        }
    },
    {
        "id": 123,
        "n": "Baby Whale",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 4,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 24,
            "price": 682,
            "sc": 0
        }
    },
    {
        "id": 124,
        "n": "Fishing Net",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_fishing": 5,
            "price": 100,
            "sc": 0
        }
    },
    {
        "id": 125,
        "n": "Wooden Harpoon",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 81
            },
            "slot": 4,
            "min_fishing": 50,
            "price": 1800,
            "sc": 0
        }
    },
    {
        "id": 126,
        "n": "Steel Harpoon",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 82
            },
            "slot": 4,
            "min_fishing": 63,
            "price": 100000,
            "sc": 0
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 127,
        "n": "Cage",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_fishing": 35,
            "price": 160,
            "sc": 0
        }
    },
    {
        "id": 128,
        "n": "Viking Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 5
            },
            "slot": 0,
            "armor": 34,
            "min_defense": 50,
            "price": 15428
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 129,
        "n": "Flamberge",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 21
            },
            "slot": 4,
            "aim": 80,
            "power": 90,
            "min_accuracy": 60,
            "price": 38828,
            "enchant_id": 519,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 130,
        "n": "Golden Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 24,
            "price": 17600,
            "aim": 14,
            "power": 14,
            "enchant_id": 1111
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 131,
        "n": "Golden Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 24,
            "price": 13600,
            "aim": 13,
            "power": 13,
            "enchant_id": 1091
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 132,
        "n": "Enchanted Sapphire Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 15
            },
            "slot": 2,
            "armor": 92,
            "min_defense": 50,
            "price": 127372,
            "enchants_from": 35
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 133,
        "n": "Paladin Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 6
            },
            "slot": 0,
            "armor": 40,
            "min_defense": 50,
            "price": 23810
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 134,
        "n": "Short Dracula Slayer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 14
            },
            "slot": 4,
            "aim": 85,
            "power": 50,
            "min_accuracy": 45,
            "price": 27918,
            "enchant_id": 520,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 135,
        "n": "Behemoth Slayer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 22
            },
            "slot": 4,
            "aim": 70,
            "power": 90,
            "min_accuracy": 50,
            "price": 57828,
            "enchant_id": 521,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 136,
        "n": "Enchanted Steel Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 37
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 65,
            "power": 75,
            "min_accuracy": 40,
            "price": 13286,
            "enchants_from": 144,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 137,
        "n": "Enchanted Steel War Pike",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 17
            },
            "slot": 4,
            "aim": 29,
            "power": 43,
            "min_accuracy": 40,
            "price": 11748,
            "enchants_from": 146,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 138,
        "n": "Sapphire Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 15
            },
            "slot": 4,
            "aim": 70,
            "power": 70,
            "min_accuracy": 50,
            "price": 43200,
            "enchant_id": 538,
            "sc": 0
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 139,
        "n": "Steel Battle Hammer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 23
            },
            "slot": 4,
            "aim": 58,
            "power": 60,
            "min_accuracy": 40,
            "price": 14062,
            "enchant_id": 522,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 140,
        "n": "Steel Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 24
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 68,
            "power": 70,
            "min_accuracy": 40,
            "price": 10584,
            "enchant_id": 523,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 141,
        "n": "Steel Broad Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 25
            },
            "slot": 4,
            "aim": 28,
            "power": 30,
            "min_accuracy": 40,
            "price": 7938,
            "enchant_id": 524,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 142,
        "n": "Steel Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 26
            },
            "slot": 4,
            "aim": 25,
            "power": 28,
            "min_accuracy": 40,
            "price": 6124,
            "enchant_id": 525,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 143,
        "n": "Steel Scimitar",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 27
            },
            "slot": 4,
            "aim": 28,
            "power": 25,
            "min_accuracy": 40,
            "price": 11794,
            "enchant_id": 526,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 144,
        "n": "Steel Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 28
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 55,
            "power": 65,
            "min_accuracy": 40,
            "price": 7182,
            "enchant_id": 136,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 145,
        "n": "Steel Lance",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 29
            },
            "slot": 4,
            "aim": 70,
            "power": 80,
            "min_accuracy": 40,
            "price": 20428,
            "enchant_id": 527,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 146,
        "n": "Steel War Pike",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 16
            },
            "slot": 4,
            "aim": 20,
            "power": 35,
            "min_accuracy": 40,
            "price": 6350,
            "enchant_id": 137,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 147,
        "n": "Steel Saw Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 30
            },
            "slot": 4,
            "aim": 45,
            "power": 25,
            "min_accuracy": 40,
            "price": 6700,
            "enchant_id": 528,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 148,
        "n": "Steel Halberd",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 18
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 55,
            "power": 85,
            "min_accuracy": 40,
            "price": 13306,
            "enchant_id": 529,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 149,
        "n": "Steel Giant Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 31
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 55,
            "power": 98,
            "min_accuracy": 40,
            "price": 21772,
            "enchant_id": 530,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 150,
        "n": "Blood Giant Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 32
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 55,
            "power": 98,
            "min_accuracy": 40,
            "price": 23382,
            "enchant_id": 531,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 151,
        "n": "Overlord Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 33
            },
            "slot": 4,
            "aim": 90,
            "power": 120,
            "min_accuracy": 60,
            "price": 68720,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 152,
        "n": "Steel Woodcutter's Axe",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 47
            },
            "slot": 4,
            "min_woodcutting": 40,
            "price": 10822,
            "sc": 0
        }
    },
    {
        "id": 153,
        "n": "Gilded Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 25
            },
            "slot": 2,
            "armor": 68,
            "min_defense": 55,
            "price": 73820
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 154,
        "n": "Gilded Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 22
            },
            "slot": 2,
            "armor": 48,
            "min_defense": 55,
            "price": 32882,
            "enchant_id": 558
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 155,
        "n": "Gilded Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 5
            },
            "slot": 6,
            "armor": 30,
            "min_defense": 55,
            "speed": 20,
            "aim": 20,
            "price": 126324
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 156,
        "n": "Gilded Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 4
            },
            "slot": 5,
            "armor": 32,
            "aim": 25,
            "min_defense": 55,
            "price": 88000
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 157,
        "n": "Flame Phoenix Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 16
            },
            "slot": 2,
            "armor": 85,
            "min_defense": 60,
            "price": 132920,
            "enchant_id": 644
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 158,
        "n": "Diamond Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 20
            },
            "slot": 2,
            "armor": 117,
            "min_defense": 80,
            "price": 382712,
            "enchant_id": 646
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 159,
        "n": "Fire Dragon Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 18
            },
            "slot": 2,
            "armor": 95,
            "min_defense": 70,
            "price": 150796,
            "enchant_id": 647
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 160,
        "n": "Amethyst Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 19
            },
            "slot": 2,
            "armor": 110,
            "min_defense": 80,
            "price": 236828,
            "enchant_id": 645
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 161,
        "n": "Viking Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 8
            },
            "slot": 3,
            "armor": 45,
            "min_defense": 50,
            "price": 41820,
            "enchant_id": 162
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 162,
        "n": "Enchanted Viking Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 9
            },
            "slot": 3,
            "armor": 65,
            "min_defense": 50,
            "price": 77368,
            "enchants_from": 161
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 163,
        "n": "Paladin Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 10
            },
            "slot": 3,
            "armor": 55,
            "min_defense": 60,
            "price": 62810,
            "enchant_id": 164
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 164,
        "n": "Enchanted Paladin Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 11
            },
            "slot": 3,
            "armor": 80,
            "min_defense": 60,
            "price": 116198,
            "enchants_from": 163
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 165,
        "n": "Gilded Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 12
            },
            "slot": 3,
            "armor": 72,
            "min_defense": 55,
            "price": 104926
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 166,
        "n": "Steel Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 2
            },
            "slot": 3,
            "armor": 35,
            "min_defense": 40,
            "price": 14200
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 167,
        "n": "Royal Defender",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 13
            },
            "slot": 3,
            "armor": 85,
            "min_defense": 70,
            "price": 127302,
            "enchant_id": 168
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 168,
        "n": "Enchanted Royal Defender",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 5
            },
            "slot": 3,
            "armor": 110,
            "min_defense": 70,
            "price": 235508,
            "enchants_from": 167
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 169,
        "n": "Anti Dragon Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 14
            },
            "slot": 3,
            "armor": 100,
            "min_defense": 80,
            "price": 382016,
            "enchant_id": 170
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 170,
        "n": "Enchanted Anti Dragon Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 15
            },
            "slot": 3,
            "armor": 140,
            "min_defense": 80,
            "price": 706730,
            "enchants_from": 169
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 171,
        "n": "Dragon Soul Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 16
            },
            "slot": 3,
            "armor": 120,
            "min_defense": 90,
            "price": 493826,
            "enchant_id": 172
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 172,
        "n": "Enchanted Dragon Soul Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 17
            },
            "slot": 3,
            "armor": 170,
            "min_defense": 90,
            "price": 913578,
            "enchants_from": 171
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 173,
        "n": "Medium Weapon Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 50000,
            "sc": 5
        },
        "sources": [
            "Easy Dungeon Reward",
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 174,
        "n": "High Weapon Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 150000,
            "sc": 5
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 175,
        "n": "Superior Weapon Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 300000,
            "sc": 5
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 176,
        "n": "Low Armor Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3000,
            "sc": 5
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 177,
        "n": "Medium Armor Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 50000,
            "sc": 5
        },
        "sources": [
            "Easy Dungeon Reward",
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 178,
        "n": "High Armor Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 150000,
            "sc": 5
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 179,
        "n": "Superior Armor Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 300000,
            "sc": 5
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 180,
        "n": "Silver Crown",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 7
            },
            "slot": 0,
            "armor": 50,
            "min_defense": 60,
            "price": 94028
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 181,
        "n": "Golden Crown",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 8
            },
            "slot": 0,
            "armor": 72,
            "min_defense": 70,
            "price": 189629
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 182,
        "n": "King's Crown",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 9
            },
            "slot": 0,
            "armor": 98,
            "min_defense": 80,
            "price": 382930
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 183,
        "n": "Landlord Crown",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 10
            },
            "slot": 0,
            "armor": 110,
            "min_defense": 90,
            "price": 482038
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 184,
        "n": "Gold Chunk",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 25,
            "price": 650,
            "sc": 2
        }
    },
    {
        "id": 185,
        "n": "Silver Chunk",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 10,
            "price": 350,
            "sc": 2
        }
    },
    {
        "id": 186,
        "n": "Coal",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 40,
            "price": 500,
            "sc": 2
        }
    },
    {
        "id": 187,
        "n": "Sand",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 1,
            "price": 30,
            "sc": 2
        }
    },
    {
        "id": 188,
        "n": "Steel Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 11
            },
            "slot": 0,
            "armor": 26,
            "min_defense": 40,
            "price": 6988
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 189,
        "n": "Steel Full Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 12
            },
            "slot": 0,
            "armor": 37,
            "min_defense": 40,
            "price": 15052
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 190,
        "n": "Steel Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 26
            },
            "slot": 2,
            "armor": 52,
            "min_defense": 40,
            "price": 20564,
            "enchant_id": 192
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 191,
        "n": "Steel Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 23
            },
            "slot": 2,
            "armor": 38,
            "min_defense": 40,
            "price": 13170,
            "enchant_id": 557
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 192,
        "n": "Enchanted Steel Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 17
            },
            "slot": 2,
            "armor": 65,
            "min_defense": 40,
            "price": 38042,
            "enchants_from": 190
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 193,
        "n": "Large Steel Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 18
            },
            "slot": 3,
            "armor": 35,
            "min_defense": 40,
            "price": 16666,
            "enchant_id": 575
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 194,
        "n": "Uncut Diamond",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 16,
            "price": 10000,
            "sc": 10
        }
    },
    {
        "id": 195,
        "n": "Cut Diamond",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 16,
            "price": 8500,
            "sc": 10
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 196,
        "n": "Uncut Ruby",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 14,
            "price": 7000,
            "sc": 10
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 197,
        "n": "Cut Ruby",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 14,
            "price": 5000,
            "sc": 10
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 198,
        "n": "Uncut Emerald",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 12,
            "price": 4000,
            "sc": 10
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 199,
        "n": "Cut Emerald",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 12,
            "price": 3000,
            "sc": 10
        }
    },
    {
        "id": 200,
        "n": "Uncut Sapphire",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 10,
            "price": 2700,
            "sc": 10
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 201,
        "n": "Cut Sapphire",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 10,
            "price": 1800,
            "sc": 10
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 202,
        "n": "Gold Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 25,
            "price": 1000,
            "sc": 0
        }
    },
    {
        "id": 203,
        "n": "Silver Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 10,
            "price": 700,
            "sc": 0
        }
    },
    {
        "id": 204,
        "n": "Yellow Leaf",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 2,
            "price": 20,
            "sc": 13
        }
    },
    {
        "id": 205,
        "n": "Liquorice",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 7,
            "price": 50,
            "sc": 17
        }
    },
    {
        "id": 206,
        "n": "Nori Seaweed",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 52,
            "price": 450,
            "sc": 17
        }
    },
    {
        "id": 207,
        "n": "Beast Fang",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 42,
            "price": 350,
            "sc": 8
        }
    },
    {
        "id": 208,
        "n": "Bronze Horn",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 25,
            "price": 4000,
            "sc": 11
        }
    },
    {
        "id": 209,
        "n": "Blueberry",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 48,
            "sc": 13
        }
    },
    {
        "id": 210,
        "n": "Green Dust",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 200,
            "sc": 3
        }
    },
    {
        "id": 211,
        "n": "Ice Beak",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 10,
            "sc": 8
        }
    },
    {
        "id": 212,
        "n": "Blue Leaf",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 44,
            "price": 400,
            "sc": 13
        }
    },
    {
        "id": 213,
        "n": "Kombu Seaweed",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 80,
            "sc": 17
        }
    },
    {
        "id": 214,
        "n": "Dulse Seaweed",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 40,
            "price": 600,
            "sc": 17
        }
    },
    {
        "id": 215,
        "n": "Vampire Fang",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 10,
            "price": 150,
            "sc": 8
        }
    },
    {
        "id": 216,
        "n": "Sapphire Horn",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 30,
            "price": 5000,
            "sc": 11
        }
    },
    {
        "id": 217,
        "n": "Blue Dust",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 20,
            "price": 2500,
            "sc": 3
        }
    },
    {
        "id": 218,
        "n": "Purple Dust",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 45,
            "price": 7000,
            "sc": 3
        }
    },
    {
        "id": 219,
        "n": "Golden Beak",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 30,
            "price": 10000,
            "sc": 8
        }
    },
    {
        "id": 220,
        "n": "Green Leaf",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 10,
            "sc": 13
        }
    },
    {
        "id": 221,
        "n": "Blood Herb",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 30,
            "price": 800,
            "sc": 13
        }
    },
    {
        "id": 222,
        "n": "Beast Herb",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 2000,
            "sc": 13
        }
    },
    {
        "id": 223,
        "n": "Golden Horn",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 40,
            "price": 8800,
            "sc": 11
        }
    },
    {
        "id": 224,
        "n": "Ruby Horn",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 60,
            "price": 15000,
            "sc": 11
        }
    },
    {
        "id": 225,
        "n": "Yellow Dust",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 40,
            "price": 4000,
            "sc": 3
        }
    },
    {
        "id": 226,
        "n": "Red Dust",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 2000,
            "sc": 3
        }
    },
    {
        "id": 227,
        "n": "Russula",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 10,
            "price": 80,
            "sc": 20
        }
    },
    {
        "id": 228,
        "n": "Old Leaf",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 20,
            "price": 130,
            "sc": 13
        }
    },
    {
        "id": 229,
        "n": "Dragon Herb",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 84,
            "price": 4000,
            "sc": 13
        }
    },
    {
        "id": 230,
        "n": "Orc Fang",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 20,
            "price": 300,
            "sc": 8
        }
    },
    {
        "id": 231,
        "n": "Emerald Horn",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 30,
            "price": 3800,
            "sc": 11
        }
    },
    {
        "id": 232,
        "n": "Red Berries",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 25,
            "price": 150,
            "sc": 13
        }
    },
    {
        "id": 233,
        "n": "Dust",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 54,
            "price": 500,
            "sc": 3
        }
    },
    {
        "id": 234,
        "n": "Sharp Beak",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 60,
            "sc": 8
        }
    },
    {
        "id": 235,
        "n": "Black Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 40,
            "sc": 20
        }
    },
    {
        "id": 236,
        "n": "Magic Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 20,
            "price": 200,
            "sc": 20
        }
    },
    {
        "id": 237,
        "n": "Brown Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 25,
            "price": 220,
            "sc": 20
        }
    },
    {
        "id": 238,
        "n": "Golden Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 35,
            "price": 300,
            "sc": 20
        }
    },
    {
        "id": 239,
        "n": "Silver Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 30,
            "price": 450,
            "sc": 20
        }
    },
    {
        "id": 240,
        "n": "Moldy Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 40,
            "price": 350,
            "sc": 20
        }
    },
    {
        "id": 241,
        "n": "Glowing Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 45,
            "price": 500,
            "sc": 20
        }
    },
    {
        "id": 242,
        "n": "Orange Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 750,
            "sc": 20
        }
    },
    {
        "id": 243,
        "n": "Poisoned Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 55,
            "price": 1000,
            "sc": 20
        }
    },
    {
        "id": 244,
        "n": "Large Fire Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 65,
            "price": 2000,
            "sc": 20
        }
    },
    {
        "id": 245,
        "n": "Fire Shroom",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 60,
            "price": 1400,
            "sc": 20
        }
    },
    {
        "id": 246,
        "n": "Empty Large Vial",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 400,
            "sc": 22
        }
    },
    {
        "id": 247,
        "n": "Empty Medium Vial",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 30,
            "price": 200,
            "sc": 22
        }
    },
    {
        "id": 248,
        "n": "Empty Superior Vial",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 65,
            "price": 750,
            "sc": 22
        }
    },
    {
        "id": 249,
        "n": "Empty Small Vial",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 50,
            "sc": 22
        }
    },
    {
        "id": 250,
        "n": "Sapphire Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 20,
            "price": 600,
            "sc": 18
        }
    },
    {
        "id": 251,
        "n": "Silver Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 30,
            "price": 900,
            "sc": 18
        }
    },
    {
        "id": 252,
        "n": "Ruby Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 40,
            "price": 4200,
            "sc": 18
        }
    },
    {
        "id": 253,
        "n": "Golden Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 2500,
            "sc": 18
        }
    },
    {
        "id": 254,
        "n": "Emerald Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 60,
            "price": 2200,
            "sc": 18
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 255,
        "n": "Elemental Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 70,
            "price": 8200,
            "sc": 18
        }
    },
    {
        "id": 256,
        "n": "King Elemental Dragon Scale",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 85,
            "price": 9500,
            "sc": 18
        }
    },
    {
        "id": 257,
        "n": "Golden Egg",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 90000,
            "sc": 4
        }
    },
    {
        "id": 258,
        "n": "Bronze Egg",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 20,
            "price": 12000,
            "sc": 4
        }
    },
    {
        "id": 259,
        "n": "Beast Leather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 45,
            "price": 450,
            "sc": 12
        }
    },
    {
        "id": 260,
        "n": "Animal Leather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 50,
            "price": 400,
            "sc": 12
        }
    },
    {
        "id": 261,
        "n": "Frozen Leather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 450,
            "sc": 12
        }
    },
    {
        "id": 262,
        "n": "Elemental Egg",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 70,
            "price": 130000,
            "sc": 4
        }
    },
    {
        "id": 263,
        "n": "Dragon Egg",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 5,
            "price": 7000,
            "sc": 4
        }
    },
    {
        "id": 264,
        "n": "Orc Leather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 5,
            "price": 40,
            "sc": 12
        }
    },
    {
        "id": 265,
        "n": "Cotton Fabric",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_magic": 1,
            "price": 300,
            "sc": 7
        }
    },
    {
        "id": 266,
        "n": "Bamboo Fabric",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_magic": 20,
            "price": 896,
            "sc": 7
        }
    },
    {
        "id": 267,
        "n": "Dragon Eye",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 82,
            "price": 1500,
            "sc": 6
        }
    },
    {
        "id": 268,
        "n": "Beast Eye",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 45,
            "price": 400,
            "sc": 6
        }
    },
    {
        "id": 269,
        "n": "Undead Eye",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 58,
            "price": 550,
            "sc": 6
        }
    },
    {
        "id": 270,
        "n": "Bones",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 40,
            "sc": 1
        }
    },
    {
        "id": 271,
        "n": "Human Bones",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 22,
            "price": 80,
            "sc": 1
        }
    },
    {
        "id": 272,
        "n": "Beast Bones",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 5,
            "price": 20,
            "sc": 1
        }
    },
    {
        "id": 273,
        "n": "Dwarf Bones",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 35,
            "price": 60,
            "sc": 1
        }
    },
    {
        "id": 274,
        "n": "A Skull",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 7,
            "price": 50,
            "sc": 1
        }
    },
    {
        "id": 275,
        "n": "Reptile Eye",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 55,
            "price": 700,
            "sc": 6
        }
    },
    {
        "id": 276,
        "n": "Behemoth Eye",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 70,
            "price": 900,
            "sc": 6
        }
    },
    {
        "id": 277,
        "n": "Fir Seed",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 5,
            "price": 20,
            "sc": 19
        }
    },
    {
        "id": 278,
        "n": "Willow Seed",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 80,
            "sc": 19
        }
    },
    {
        "id": 279,
        "n": "Oak Chestnut",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 45,
            "price": 160,
            "sc": 99
        }
    },
    {
        "id": 280,
        "n": "Palm Seed",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 55,
            "price": 280,
            "sc": 19
        }
    },
    {
        "id": 281,
        "n": "Grain",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 20,
            "sc": 99
        }
    },
    {
        "id": 282,
        "n": "Grass",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 1,
            "price": 10,
            "sc": 13
        }
    },
    {
        "id": 283,
        "n": "Yarrow",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 15,
            "price": 200,
            "sc": 13
        }
    },
    {
        "id": 284,
        "n": "Oregano Leaf",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 25,
            "price": 300,
            "sc": 13
        }
    },
    {
        "id": 285,
        "n": "Aconitum",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_alchemy": 45,
            "price": 580,
            "sc": 13
        }
    },
    {
        "id": 286,
        "n": "Spade",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 160
            },
            "slot": 4,
            "min_mining": 1,
            "price": 140,
            "sc": 0
        }
    },
    {
        "id": 287,
        "n": "Small Vial Of Water",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_alchemy": 1,
            "price": 56,
            "sc": 22
        }
    },
    {
        "id": 288,
        "n": "Medium Vial Of Water",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_alchemy": 30,
            "price": 210,
            "sc": 22
        }
    },
    {
        "id": 289,
        "n": "Large Vial Of Water",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_alchemy": 50,
            "price": 420,
            "sc": 22
        }
    },
    {
        "id": 290,
        "n": "Superior Vial Of Water",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_alchemy": 65,
            "price": 780,
            "sc": 22
        }
    },
    {
        "id": 291,
        "n": "Steel Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 40,
            "price": 960,
            "sc": 0
        }
    },
    {
        "id": 292,
        "n": "Ring Mould",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 1,
            "price": 54,
            "sc": 0
        }
    },
    {
        "id": 293,
        "n": "Necklace Mould",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 8,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 5,
            "price": 70,
            "sc": 0
        }
    },
    {
        "id": 294,
        "n": "Iron Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "price": 150,
            "armor": 2
        }
    },
    {
        "id": 295,
        "n": "Iron Amulet",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 450,
            "armor": 3
        }
    },
    {
        "id": 296,
        "n": "Willow Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 30,
            "price": 120,
            "sc": 23
        }
    },
    {
        "id": 297,
        "n": "Chisel",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 1,
            "price": 300,
            "sc": 0
        }
    },
    {
        "id": 298,
        "n": "Golden Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 22,
            "price": 9600,
            "magic": 12,
            "enchant_id": 1090
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 299,
        "n": "Silver Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 12,
            "price": 7900,
            "magic": 10,
            "enchant_id": 1106
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 300,
        "n": "Silver Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 16,
            "price": 17900,
            "magic": 12,
            "armor": 12,
            "aim": 12,
            "power": 12,
            "enchant_id": 1088
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 301,
        "n": "Golden Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 26,
            "price": 24600,
            "magic": 16,
            "armor": 16,
            "aim": 16,
            "power": 16,
            "enchant_id": 1112
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 302,
        "n": "Silver Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "price": 450,
            "armor": 2,
            "aim": 4
        }
    },
    {
        "id": 303,
        "n": "Silver Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 950,
            "aim": 3,
            "power": 3
        }
    },
    {
        "id": 304,
        "n": "Small Potion Of Accuracy",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": false,
            "boost_accuracy": 0.05,
            "price": 234,
            "sc": 2
        }
    },
    {
        "id": 305,
        "n": "Small Potion Of Strength",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 8
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.05,
            "price": 274,
            "sc": 2
        }
    },
    {
        "id": 306,
        "n": "Small Potion Of Fishing",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 8
        },
        "params": {
            "wearable": false,
            "boost_fishing": 0.05,
            "price": 352,
            "sc": 2
        }
    },
    {
        "id": 307,
        "n": "Small Potion Of Mining",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 8
        },
        "params": {
            "wearable": false,
            "boost_mining": 0.05,
            "price": 390,
            "sc": 2
        }
    },
    {
        "id": 308,
        "n": "Small Potion Of Cooking",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": false,
            "boost_cooking": 0.05,
            "price": 508,
            "sc": 2
        }
    },
    {
        "id": 309,
        "n": "Small Potion Of Defense",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.05,
            "price": 352,
            "sc": 2
        }
    },
    {
        "id": 310,
        "n": "Small Potion Of Forging",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": false,
            "boost_forging": 0.05,
            "price": 1366,
            "sc": 2
        }
    },
    {
        "id": 311,
        "n": "Small Potion Of Woodcutting",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": false,
            "boost_woodcutting": 0.05,
            "price": 1032,
            "sc": 2
        }
    },
    {
        "id": 312,
        "n": "Small Potion Of Jewelry",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": false,
            "boost_jewelry": 0.05,
            "price": 748,
            "sc": 2
        }
    },
    {
        "id": 313,
        "n": "Oak Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 15,
            "price": 60,
            "sc": 23
        }
    },
    {
        "id": 314,
        "n": "Cactus Wood",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 5,
            "price": 30,
            "sc": 23
        }
    },
    {
        "id": 315,
        "n": "Medium Potion Of Cooking",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 6
        },
        "params": {
            "wearable": false,
            "boost_cooking": 0.1,
            "price": 2374,
            "sc": 2
        }
    },
    {
        "id": 316,
        "n": "Medium Potion Of Mining",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": false,
            "boost_mining": 0.1,
            "price": 2240,
            "sc": 2
        }
    },
    {
        "id": 317,
        "n": "Medium Potion Of Fishing",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": false,
            "boost_fishing": 0.1,
            "price": 2576,
            "sc": 2
        }
    },
    {
        "id": 318,
        "n": "Medium Potion Of Woodcutting",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 2
        },
        "params": {
            "wearable": false,
            "boost_woodcutting": 0.1,
            "price": 2912,
            "sc": 2
        }
    },
    {
        "id": 319,
        "n": "Medium Potion Of Defense",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 3
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.1,
            "price": 3248,
            "sc": 2
        }
    },
    {
        "id": 320,
        "n": "Medium Potion Of Strength",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 4
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.1,
            "price": 3808,
            "sc": 2
        }
    },
    {
        "id": 321,
        "n": "Medium Potion Of Accuracy",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_accuracy": 0.1,
            "price": 3920,
            "sc": 2
        }
    },
    {
        "id": 322,
        "n": "Medium Potion Of Berserker",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 5
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.1,
            "boost_accuracy": 0.1,
            "price": 14280,
            "sc": 2
        }
    },
    {
        "id": 323,
        "n": "Large Potion Of Cooking",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_cooking": 0.15,
            "price": 6120,
            "sc": 2
        }
    },
    {
        "id": 324,
        "n": "Large Potion Of Mining",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_mining": 0.15,
            "price": 6630,
            "sc": 2
        }
    },
    {
        "id": 325,
        "n": "Large Potion Of Fishing",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_fishing": 0.15,
            "price": 7140,
            "sc": 2
        }
    },
    {
        "id": 326,
        "n": "Large Potion Of Woodcutting",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_woodcutting": 0.15,
            "price": 6630,
            "sc": 2
        }
    },
    {
        "id": 327,
        "n": "Large Potion Of Defense",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 6
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.15,
            "price": 7650,
            "sc": 2
        }
    },
    {
        "id": 328,
        "n": "Large Potion Of Strength",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 6
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.15,
            "price": 9180,
            "sc": 2
        }
    },
    {
        "id": 329,
        "n": "Large Potion Of Accuracy",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_accuracy": 0.15,
            "price": 6630,
            "sc": 2
        }
    },
    {
        "id": 330,
        "n": "Superior Potion Of Cooking",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_cooking": 0.2,
            "price": 11968,
            "sc": 2
        }
    },
    {
        "id": 331,
        "n": "Superior Potion Of Mining",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_mining": 0.2,
            "price": 14960,
            "sc": 2
        }
    },
    {
        "id": 332,
        "n": "Superior Potion Of Fishing",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_fishing": 0.2,
            "price": 8160,
            "sc": 2
        }
    },
    {
        "id": 333,
        "n": "Superior Potion Of Woodcutting",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_woodcutting": 0.2,
            "price": 10880,
            "sc": 2
        }
    },
    {
        "id": 334,
        "n": "Superior Potion Of Defense",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 8
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.2,
            "price": 17680,
            "sc": 2
        }
    },
    {
        "id": 335,
        "n": "Superior Potion Of Strength",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 9
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.2,
            "price": 31280,
            "sc": 2
        }
    },
    {
        "id": 336,
        "n": "Superior Potion Of Accuracy",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": false,
            "boost_accuracy": 0.2,
            "price": 23120,
            "sc": 2
        }
    },
    {
        "id": 337,
        "n": "Superior God Potion",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 9
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.2,
            "boost_accuracy": 0.2,
            "price": 44880,
            "sc": 2
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 338,
        "n": "Superior Satan Potion",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 10
        },
        "params": {
            "wearable": false,
            "boost_accuracy": 0.2,
            "boost_strength": 0.2,
            "price": 58480,
            "sc": 2
        }
    },
    {
        "id": 339,
        "n": "Steel Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 25,
            "speed": 12,
            "min_defense": 40,
            "price": 13708
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 340,
        "n": "Sapphire Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 9
            },
            "slot": 6,
            "armor": 32,
            "speed": 15,
            "min_defense": 50,
            "price": 30196,
            "enchant_id": 341
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 341,
        "n": "Enchanted Sapphire Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 10
            },
            "slot": 6,
            "armor": 40,
            "aim": 10,
            "speed": 17,
            "min_defense": 50,
            "price": 55860,
            "enchants_from": 340
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 342,
        "n": "Emerald Dragon Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 7
            },
            "slot": 6,
            "armor": 35,
            "speed": 18,
            "min_defense": 60,
            "price": 84864,
            "enchant_id": 343
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 343,
        "n": "Enchanted Emerald Dragon Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 8
            },
            "slot": 6,
            "armor": 50,
            "aim": 15,
            "speed": 22,
            "min_defense": 60,
            "price": 156998,
            "enchants_from": 342
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 344,
        "n": "Ruby Dragon Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 11
            },
            "slot": 6,
            "armor": 50,
            "speed": 24,
            "min_defense": 70,
            "price": 139876,
            "enchant_id": 345
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 345,
        "n": "Enchanted Ruby Dragon Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 12
            },
            "slot": 6,
            "armor": 65,
            "aim": 20,
            "speed": 30,
            "min_defense": 70,
            "price": 258770,
            "enchants_from": 344
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 346,
        "n": "Devil Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 3
            },
            "slot": 1,
            "armor": 25,
            "power": 10,
            "aim": 10,
            "min_defense": 10,
            "enchant_id": 1283,
            "price": 39200
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 347,
        "n": "Dark Knight Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 13
            },
            "slot": 0,
            "armor": 60,
            "min_defense": 65,
            "price": 318270
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 348,
        "n": "Dorpat Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 1000,
            "to_map": 0,
            "to_i": 20,
            "to_j": 20,
            "sc": 21
        }
    },
    {
        "id": 349,
        "n": "Reval Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 2
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 2000,
            "to_map": 4,
            "to_i": 16,
            "to_j": 24,
            "sc": 21
        }
    },
    {
        "id": 350,
        "n": "Whiland Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 2
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 3000,
            "to_map": 3,
            "to_i": 28,
            "to_j": 93,
            "sc": 21
        }
    },
    {
        "id": 351,
        "n": "Rakblood Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 4000,
            "to_map": 5,
            "to_i": 34,
            "to_j": 68,
            "sc": 21
        }
    },
    {
        "id": 352,
        "n": "Narwa Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 5000,
            "to_map": 2,
            "to_i": 68,
            "to_j": 37,
            "sc": 21
        }
    },
    {
        "id": 353,
        "n": "Donator Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 20
            },
            "slot": 3,
            "armor": 55,
            "min_defense": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 626
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 354,
        "n": "Donator Keyblade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 39
            },
            "slot": 4,
            "aim": 50,
            "power": 70,
            "min_accuracy": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 539,
            "sc": 0
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 355,
        "n": "Donator Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 13
            },
            "slot": 6,
            "armor": 32,
            "speed": 30,
            "min_defense": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 576
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 356,
        "n": "Donator Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 15
            },
            "slot": 0,
            "armor": 20,
            "min_defense": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 721
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 357,
        "n": "Donator Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 4
            },
            "slot": 1,
            "armor": 25,
            "min_defense": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 600
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 358,
        "n": "Admin Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 16
            },
            "slot": 1,
            "armor": 500,
            "min_defense": 10,
            "price": 1,
            "no_present": true
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 359,
        "n": "Archangel Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 6
            },
            "slot": 1,
            "armor": 130,
            "magic": 20,
            "min_defense": 75,
            "enchant_id": 1275,
            "price": 184094
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 360,
        "n": "Archdevil Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 5
            },
            "slot": 1,
            "armor": 120,
            "power": 20,
            "aim": 30,
            "min_strength": 80,
            "enchant_id": 1265,
            "price": 184094
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 361,
        "n": "Royal Knight Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 14
            },
            "slot": 0,
            "armor": 60,
            "min_defense": 65,
            "price": 318270
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 362,
        "n": "Sapphire Dragon Head",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 16
            },
            "slot": 0,
            "armor": 48,
            "min_defense": 50,
            "price": 102812
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 363,
        "n": "Freezing Rapier",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 40
            },
            "slot": 4,
            "aim": 70,
            "power": 100,
            "min_accuracy": 60,
            "price": 39292,
            "enchant_id": 532,
            "sc": 0
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 364,
        "n": "Moss Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 41
            },
            "slot": 4,
            "aim": 90,
            "power": 140,
            "min_accuracy": 70,
            "price": 139230,
            "enchant_id": 533,
            "sc": 0
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 365,
        "n": "Dragon Slayer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 42
            },
            "slot": 4,
            "aim": 130,
            "power": 190,
            "min_accuracy": 80,
            "price": 379220,
            "enchant_id": 534,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 366,
        "n": "Bone Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 18
            },
            "slot": 0,
            "armor": 16,
            "min_defense": 10,
            "price": 572
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 367,
        "n": "Angel Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 7
            },
            "slot": 1,
            "armor": 35,
            "magic": 10,
            "min_defense": 5,
            "enchant_id": 1268,
            "price": 39200
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 368,
        "n": "Bone Armor",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 28
            },
            "slot": 2,
            "armor": 30,
            "min_defense": 10,
            "price": 1020
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 369,
        "n": "Angel Feather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 1,
            "price": 2800,
            "sc": 9
        }
    },
    {
        "id": 370,
        "n": "Devil Feather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 1,
            "price": 2800,
            "sc": 9
        }
    },
    {
        "id": 371,
        "n": "Phoenix Feather",
        "t": 3,
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 50,
            "price": 25000,
            "sc": 9
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 372,
        "n": "Platinum Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 60,
            "price": 1800,
            "sc": 0
        }
    },
    {
        "id": 373,
        "n": "Platinum Chunk",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 60,
            "price": 1000,
            "sc": 2
        }
    },
    {
        "id": 374,
        "n": "Platinum Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "price": 2800,
            "armor": 6,
            "aim": 6
        }
    },
    {
        "id": 375,
        "n": "Platinum Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 50,
            "price": 25600,
            "armor": 30,
            "enchant_id": 1098
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 376,
        "n": "Platinum Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 55,
            "price": 35200,
            "magic": 30,
            "enchant_id": 1099
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 377,
        "n": "Platinum Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 60,
            "price": 51200,
            "aim": 34,
            "power": 34,
            "enchant_id": 1100
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 378,
        "n": "Platinum Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 65,
            "price": 79200,
            "magic": 30,
            "armor": 42,
            "aim": 42,
            "power": 42,
            "enchant_id": 1101
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 379,
        "n": "Platinum Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 5800,
            "armor": 6,
            "aim": 6
        }
    },
    {
        "id": 380,
        "n": "Platinum Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 50,
            "price": 44800,
            "armor": 40,
            "enchant_id": 1118
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 381,
        "n": "Platinum Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 60,
            "price": 83200,
            "aim": 46,
            "power": 46,
            "enchant_id": 1120
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 382,
        "n": "Platinum Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 55,
            "price": 59200,
            "magic": 40,
            "enchant_id": 1119
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 383,
        "n": "Azure ore",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 65,
            "price": 600,
            "sc": 2
        }
    },
    {
        "id": 384,
        "n": "Azurite Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 65,
            "price": 3600,
            "sc": 0
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 385,
        "n": "Uncut Amethyst",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 56,
            "price": 16000,
            "sc": 10
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 386,
        "n": "Cut Amethyst",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 56,
            "price": 12000,
            "sc": 10
        }
    },
    {
        "id": 387,
        "n": "Uncut Black Opal",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 85,
            "price": 20000,
            "sc": 10
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 388,
        "n": "Cut Black Opal",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 85,
            "price": 17000,
            "sc": 10
        }
    },
    {
        "id": 389,
        "n": "Uncut Jadeite",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_jewelry": 85,
            "price": 25000,
            "sc": 10
        }
    },
    {
        "id": 390,
        "n": "Cut Jadeite",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 90,
            "price": 22000,
            "sc": 10
        }
    },
    {
        "id": 391,
        "n": "Platinum Black Opal Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 75,
            "price": 212800,
            "magic": 35,
            "armor": 50,
            "aim": 50,
            "power": 50,
            "enchant_id": 1103
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 392,
        "n": "Platinum Jadeite Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 585000,
            "min_health": 80,
            "magic": 58,
            "armor": 78,
            "aim": 78,
            "power": 78,
            "enchant_id": 1124
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 393,
        "n": "Sapphire Halberd",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 43
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 110,
            "power": 110,
            "min_accuracy": 50,
            "price": 77010,
            "enchant_id": 535,
            "sc": 1
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 394,
        "n": "Sapphire Barbarian Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 44
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 120,
            "power": 150,
            "min_accuracy": 50,
            "price": 67830,
            "enchant_id": 536,
            "sc": 1
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 395,
        "n": "Platinum Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 65,
            "price": 125200,
            "magic": 45,
            "armor": 58,
            "aim": 58,
            "power": 58,
            "enchant_id": 1121
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 396,
        "n": "Broken Slayer Sword Piece 1",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 250000,
            "sc": 99
        }
    },
    {
        "id": 397,
        "n": "Broken Slayer Sword Piece 2",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 250000,
            "sc": 99
        }
    },
    {
        "id": 398,
        "n": "Broken Slayer Sword Piece 3",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 250000,
            "sc": 99
        }
    },
    {
        "id": 399,
        "n": "Broken Slayer Sword Piece 4",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 250000,
            "sc": 99
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 400,
        "n": "Steel Pickaxe",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 46
            },
            "slot": 4,
            "min_mining": 35,
            "price": 11820,
            "sc": 0
        }
    },
    {
        "id": 401,
        "n": "Medium Potion Of Paladin",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 6
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.1,
            "boost_accuracy": 0.1,
            "price": 11662,
            "sc": 2
        }
    },
    {
        "id": 402,
        "n": "Flash Bolt",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 1,
            "magic": 2,
            "price": 375
        }
    },
    {
        "id": 403,
        "n": "Air Bolt",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 3,
            "magic": 3,
            "price": 585
        }
    },
    {
        "id": 404,
        "n": "Earth Bolt",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 5,
            "magic": 4,
            "price": 675
        }
    },
    {
        "id": 405,
        "n": "Water Bolt",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 7,
            "magic": 5,
            "price": 765
        }
    },
    {
        "id": 406,
        "n": "Fire Bolt",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 9,
            "magic": 6,
            "price": 855
        }
    },
    {
        "id": 407,
        "n": "Flash Missile",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 10,
            "magic": 7,
            "price": 1120
        }
    },
    {
        "id": 408,
        "n": "Air Missile",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 13,
            "magic": 8,
            "price": 1932
        }
    },
    {
        "id": 409,
        "n": "Water Missile",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 16,
            "magic": 9,
            "price": 2184
        }
    },
    {
        "id": 410,
        "n": "Earth Missile",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 16,
            "magic": 10,
            "price": 2912
        }
    },
    {
        "id": 411,
        "n": "Fire Missile",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 20,
            "magic": 11,
            "price": 3570
        }
    },
    {
        "id": 412,
        "n": "Flash Wave",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 24,
            "magic": 12,
            "price": 3757
        }
    },
    {
        "id": 413,
        "n": "Air Wave",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 28,
            "magic": 13,
            "price": 4446
        }
    },
    {
        "id": 414,
        "n": "Earth Wave",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 32,
            "magic": 14,
            "price": 4914
        }
    },
    {
        "id": 415,
        "n": "Water Wave",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 36,
            "magic": 15,
            "price": 5980
        }
    },
    {
        "id": 416,
        "n": "Fire Wave",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 40,
            "magic": 16,
            "price": 6500
        }
    },
    {
        "id": 417,
        "n": "Flash Blast",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 45,
            "magic": 17,
            "price": 5940
        }
    },
    {
        "id": 418,
        "n": "Air Blast",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 50,
            "magic": 18,
            "price": 6840
        }
    },
    {
        "id": 419,
        "n": "Earth Blast",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 55,
            "magic": 19,
            "price": 7800
        }
    },
    {
        "id": 420,
        "n": "Water Blast",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 60,
            "magic": 20,
            "price": 8400
        }
    },
    {
        "id": 421,
        "n": "Fire Blast",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 62,
            "magic": 21,
            "price": 9072
        }
    },
    {
        "id": 422,
        "n": "Bronze Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 54
            },
            "slot": 4,
            "aim": 4,
            "power": 2,
            "magic": 8,
            "min_magic": 1,
            "price": 130,
            "sc": 2
        }
    },
    {
        "id": 423,
        "n": "Iron Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 55
            },
            "slot": 4,
            "aim": 7,
            "power": 4,
            "magic": 12,
            "min_magic": 10,
            "price": 1080,
            "sc": 2
        }
    },
    {
        "id": 424,
        "n": "Sapphire Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 52
            },
            "slot": 4,
            "aim": 12,
            "power": 8,
            "magic": 20,
            "min_magic": 15,
            "min_accuracy": 1,
            "price": 2072,
            "enchant_id": 425,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 425,
        "n": "Enchanted Sapphire Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 53
            },
            "slot": 4,
            "aim": 16,
            "power": 14,
            "magic": 25,
            "min_magic": 15,
            "min_accuracy": 1,
            "price": 3834,
            "enchants_from": 424,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 426,
        "n": "Emerald Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 50
            },
            "slot": 4,
            "aim": 16,
            "power": 12,
            "magic": 25,
            "min_magic": 20,
            "min_accuracy": 1,
            "price": 4580,
            "enchant_id": 427,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 427,
        "n": "Enchanted Emerald Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 51
            },
            "slot": 4,
            "aim": 20,
            "power": 15,
            "magic": 35,
            "min_magic": 20,
            "min_accuracy": 1,
            "price": 8472,
            "enchants_from": 426,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 428,
        "n": "Ruby Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 48
            },
            "slot": 4,
            "aim": 19,
            "power": 18,
            "magic": 30,
            "min_magic": 30,
            "min_accuracy": 1,
            "price": 10452,
            "enchant_id": 429,
            "sc": 2
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 429,
        "n": "Enchanted Ruby Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 49
            },
            "slot": 4,
            "aim": 22,
            "power": 20,
            "magic": 40,
            "min_magic": 30,
            "min_accuracy": 1,
            "price": 19336,
            "enchants_from": 428,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 430,
        "n": "Cleric Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 56
            },
            "slot": 4,
            "aim": 24,
            "power": 25,
            "magic": 50,
            "min_magic": 40,
            "min_accuracy": 1,
            "price": 24838,
            "enchant_id": 431,
            "sc": 2
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 431,
        "n": "Enchanted Cleric Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 57
            },
            "slot": 4,
            "aim": 30,
            "power": 35,
            "magic": 55,
            "min_magic": 40,
            "min_accuracy": 1,
            "price": 45950,
            "enchants_from": 430,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 432,
        "n": "Warlord Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 58
            },
            "slot": 4,
            "aim": 35,
            "power": 55,
            "magic": 70,
            "min_magic": 55,
            "min_accuracy": 1,
            "price": 58292,
            "enchant_id": 433,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 433,
        "n": "Enchanted Warlord Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 59
            },
            "slot": 4,
            "aim": 45,
            "power": 60,
            "magic": 80,
            "min_magic": 55,
            "min_accuracy": 1,
            "price": 107840,
            "enchants_from": 432,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 434,
        "n": "Wooden Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 60
            },
            "slot": 4,
            "aim": 3,
            "power": 3,
            "magic": 6,
            "cooldown": 0.05,
            "min_magic": 1,
            "price": 12,
            "sc": 2
        }
    },
    {
        "id": 435,
        "n": "Iron Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 61
            },
            "slot": 4,
            "aim": 5,
            "power": 5,
            "magic": 10,
            "cooldown": 0.08,
            "min_magic": 5,
            "price": 1620,
            "sc": 2
        }
    },
    {
        "id": 436,
        "n": "Sapphire Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 62
            },
            "slot": 4,
            "aim": 7,
            "power": 10,
            "magic": 18,
            "cooldown": 0.1,
            "min_magic": 15,
            "min_accuracy": 1,
            "price": 5816,
            "enchant_id": 437,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 437,
        "n": "Enchanted Sapphire Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 66
            },
            "slot": 4,
            "aim": 16,
            "power": 18,
            "magic": 20,
            "cooldown": 0.15,
            "min_magic": 15,
            "min_accuracy": 1,
            "price": 10758,
            "enchants_from": 436,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 438,
        "n": "Emerald Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 63
            },
            "slot": 4,
            "aim": 12,
            "power": 14,
            "magic": 27,
            "cooldown": 0.12,
            "min_magic": 25,
            "min_accuracy": 1,
            "price": 12600,
            "enchant_id": 439,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 439,
        "n": "Enchanted Emerald Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 67
            },
            "slot": 4,
            "aim": 19,
            "power": 20,
            "magic": 32,
            "cooldown": 0.18,
            "min_magic": 25,
            "min_accuracy": 1,
            "price": 23310,
            "enchants_from": 438,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 440,
        "n": "Ruby Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 64
            },
            "slot": 4,
            "aim": 22,
            "power": 26,
            "magic": 30,
            "cooldown": 0.14,
            "min_magic": 35,
            "min_accuracy": 1,
            "price": 23932,
            "enchant_id": 441,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 441,
        "n": "Enchanted Ruby Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 68
            },
            "slot": 4,
            "aim": 34,
            "power": 40,
            "magic": 35,
            "cooldown": 0.2,
            "min_magic": 35,
            "min_accuracy": 1,
            "price": 44276,
            "enchants_from": 440,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 442,
        "n": "Amethyst Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 65
            },
            "slot": 4,
            "aim": 40,
            "power": 50,
            "magic": 45,
            "cooldown": 0.16,
            "min_magic": 55,
            "min_accuracy": 1,
            "price": 64728,
            "enchant_id": 443,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 443,
        "n": "Enchanted Amethyst Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 69
            },
            "slot": 4,
            "aim": 45,
            "power": 60,
            "magic": 60,
            "cooldown": 0.25,
            "min_magic": 55,
            "min_accuracy": 1,
            "price": 119746,
            "enchants_from": 442,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 444,
        "n": "Small Magic Pouch",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 10,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 49
            },
            "slot": 3,
            "magic_slots": 1,
            "min_magic": 1,
            "price": 3000,
            "sc": 1
        }
    },
    {
        "id": 445,
        "n": "Medium Magic Pouch",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 10,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 50
            },
            "slot": 3,
            "magic_slots": 2,
            "min_magic": 30,
            "price": 30000,
            "sc": 1
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 446,
        "n": "Large Magic Pouch",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 10,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 51
            },
            "slot": 3,
            "magic_slots": 3,
            "min_magic": 60,
            "price": 90000,
            "sc": 1
        }
    },
    {
        "id": 447,
        "n": "Superior Magic Pouch",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 10,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 52
            },
            "slot": 3,
            "magic_slots": 4,
            "min_magic": 75,
            "price": 400000,
            "sc": 1
        }
    },
    {
        "id": 448,
        "n": "Wizard Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 20
            },
            "slot": 0,
            "armor": 4,
            "magic": 6,
            "min_magic": 1,
            "price": 1800
        }
    },
    {
        "id": 449,
        "n": "Witch Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 21
            },
            "slot": 0,
            "armor": 14,
            "magic": 12,
            "min_magic": 15,
            "price": 6182
        }
    },
    {
        "id": 450,
        "n": "Merlin Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 22
            },
            "slot": 0,
            "armor": 30,
            "magic": 30,
            "min_magic": 55,
            "price": 73488
        }
    },
    {
        "id": 451,
        "n": "Gandalf Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 23
            },
            "slot": 0,
            "armor": 54,
            "magic": 43,
            "min_magic": 75,
            "price": 169120
        }
    },
    {
        "id": 452,
        "n": "Wizard Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 32
            },
            "slot": 2,
            "armor": 6,
            "magic": 8,
            "min_magic": 1,
            "price": 3600,
            "enchant_id": 877
        }
    },
    {
        "id": 453,
        "n": "Witch Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 30
            },
            "slot": 2,
            "armor": 17,
            "magic": 15,
            "min_magic": 15,
            "price": 12364,
            "enchant_id": 878
        }
    },
    {
        "id": 454,
        "n": "Gandalf Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 11
            },
            "slot": 2,
            "armor": 85,
            "magic": 52,
            "min_magic": 75,
            "price": 260480,
            "enchant_id": 884
        }
    },
    {
        "id": 455,
        "n": "Battlemage Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 29
            },
            "slot": 2,
            "armor": 26,
            "magic": 22,
            "min_magic": 35,
            "price": 57600,
            "enchant_id": 880
        }
    },
    {
        "id": 456,
        "n": "Merlin Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 31
            },
            "slot": 2,
            "armor": 50,
            "magic": 36,
            "min_magic": 55,
            "price": 117682,
            "enchant_id": 882
        }
    },
    {
        "id": 457,
        "n": "Battlemage Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 19
            },
            "slot": 0,
            "armor": 25,
            "magic": 18,
            "min_magic": 35,
            "price": 33255
        }
    },
    {
        "id": 458,
        "n": "Poison Rain",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 65,
            "magic": 22,
            "price": 8625
        }
    },
    {
        "id": 459,
        "n": "Blizzard",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 69,
            "magic": 23,
            "price": 9875
        }
    },
    {
        "id": 460,
        "n": "Zeus Rage",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 74,
            "magic": 24,
            "price": 12180
        }
    },
    {
        "id": 461,
        "n": "Meteor Storm",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 80,
            "magic": 25,
            "price": 15750
        }
    },
    {
        "id": 462,
        "n": "Cursed Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 70
            },
            "slot": 4,
            "aim": 40,
            "power": 55,
            "magic": 80,
            "min_magic": 65,
            "price": 113842,
            "sc": 2
        }
    },
    {
        "id": 463,
        "n": "Zeus Scepter",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 71
            },
            "slot": 4,
            "aim": 50,
            "power": 60,
            "magic": 90,
            "min_magic": 70,
            "min_accuracy": 1,
            "price": 162930,
            "enchant_id": 464,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 464,
        "n": "Enchanted Zeus Scepter",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 72
            },
            "slot": 4,
            "aim": 50,
            "power": 70,
            "magic": 105,
            "min_magic": 70,
            "min_accuracy": 1,
            "price": 301420,
            "enchants_from": 463,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 465,
        "n": "Ancients Scepter",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 73
            },
            "slot": 4,
            "aim": 60,
            "power": 70,
            "magic": 100,
            "min_magic": 80,
            "min_accuracy": 1,
            "price": 271820,
            "enchant_id": 466,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 466,
        "n": "Enchanted Ancients Scepter",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 74
            },
            "slot": 4,
            "aim": 70,
            "power": 90,
            "magic": 120,
            "min_magic": 80,
            "min_accuracy": 1,
            "price": 502867,
            "enchants_from": 465,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 467,
        "n": "Flaming Sapphire Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 75
            },
            "slot": 4,
            "aim": 60,
            "power": 60,
            "magic": 50,
            "cooldown": 0.25,
            "min_magic": 65,
            "price": 127318,
            "sc": 2
        }
    },
    {
        "id": 468,
        "n": "Flaming Emerald Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 76
            },
            "slot": 4,
            "aim": 62,
            "power": 62,
            "magic": 60,
            "cooldown": 0.35,
            "min_magic": 70,
            "price": 168292,
            "sc": 2
        }
    },
    {
        "id": 469,
        "n": "Flaming Ruby Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 77
            },
            "slot": 4,
            "aim": 69,
            "power": 69,
            "magic": 66,
            "cooldown": 0.4,
            "min_magic": 75,
            "price": 283100,
            "sc": 2
        }
    },
    {
        "id": 470,
        "n": "Flaming Amethyst Staff",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 78
            },
            "slot": 4,
            "aim": 75,
            "power": 75,
            "magic": 76,
            "cooldown": 0.45,
            "min_magic": 80,
            "price": 382910,
            "sc": 2
        }
    },
    {
        "id": 471,
        "n": "Reaper Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 79
            },
            "slot": 4,
            "aim": 20,
            "power": 25,
            "min_accuracy": 1,
            "price": 1,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 472,
        "n": "Gilded Gryffin Armor",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 25
            },
            "slot": 2,
            "armor": 112,
            "min_defense": 60,
            "price": 136568
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 473,
        "n": "Bronze Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 10
            },
            "slot": 11,
            "armor": 12,
            "min_defense": 1,
            "price": 390,
            "enchant_id": 562
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 474,
        "n": "Iron Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 11
            },
            "slot": 11,
            "armor": 24,
            "min_defense": 20,
            "price": 5444,
            "enchant_id": 563
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 475,
        "n": "Steel Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 12
            },
            "slot": 11,
            "armor": 38,
            "min_defense": 40,
            "price": 13306,
            "enchant_id": 564
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 476,
        "n": "Sapphire Dragon Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 16
            },
            "slot": 11,
            "armor": 50,
            "min_defense": 50,
            "price": 37440,
            "enchant_id": 565
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 477,
        "n": "Flame Phoenix Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 17
            },
            "slot": 11,
            "armor": 65,
            "min_defense": 60,
            "price": 154650,
            "enchant_id": 566
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 478,
        "n": "Amethyst Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 18
            },
            "slot": 11,
            "armor": 90,
            "min_defense": 70,
            "price": 205306,
            "enchant_id": 567
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 479,
        "n": "Wizard Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 13
            },
            "slot": 11,
            "armor": 5,
            "magic": 7,
            "min_magic": 1,
            "price": 2700,
            "enchant_id": 868
        }
    },
    {
        "id": 480,
        "n": "Witch Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 15
            },
            "slot": 11,
            "armor": 16,
            "magic": 14,
            "min_magic": 15,
            "price": 8064,
            "enchant_id": 869
        }
    },
    {
        "id": 481,
        "n": "Battlemage robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 14
            },
            "slot": 11,
            "armor": 25,
            "magic": 20,
            "min_magic": 35,
            "price": 33645,
            "enchant_id": 871
        }
    },
    {
        "id": 482,
        "n": "Merlin Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 19
            },
            "slot": 11,
            "armor": 40,
            "magic": 32,
            "min_magic": 55,
            "price": 61668,
            "enchant_id": 873
        }
    },
    {
        "id": 483,
        "n": "Gandalf Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 10
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 20
            },
            "slot": 11,
            "armor": 70,
            "magic": 46,
            "min_magic": 75,
            "price": 207760,
            "enchant_id": 875
        }
    },
    {
        "id": 484,
        "n": "White Gold Chunk",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 40,
            "price": 850,
            "sc": 2
        }
    },
    {
        "id": 485,
        "n": "White Gold Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 40,
            "price": 1400,
            "sc": 0
        }
    },
    {
        "id": 486,
        "n": "White Gold Amethyst Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 45,
            "price": 56800,
            "armor": 28,
            "magic": 28,
            "enchant_id": 1097
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 487,
        "n": "White Gold Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "price": 2200,
            "armor": 6,
            "aim": 3
        }
    },
    {
        "id": 488,
        "n": "White Gold Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 4400,
            "armor": 6,
            "aim": 3
        }
    },
    {
        "id": 489,
        "n": "White Gold Amethyst Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 45,
            "price": 89600,
            "armor": 38,
            "magic": 38,
            "enchant_id": 1117
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 490,
        "n": "Raw Rat Meat",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 1,
            "price": 2,
            "sc": 17
        }
    },
    {
        "id": 491,
        "n": "Rat Meat",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": false,
            "heal": 2,
            "price": 4,
            "sc": 0
        }
    },
    {
        "id": 492,
        "n": "Raw Chicken Leg",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 1,
            "price": 3,
            "sc": 17
        }
    },
    {
        "id": 493,
        "n": "Chicken Leg",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 2
        },
        "params": {
            "wearable": false,
            "heal": 2,
            "price": 6,
            "sc": 0
        }
    },
    {
        "id": 494,
        "n": "Raw Ham",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 2,
            "price": 7,
            "sc": 17
        }
    },
    {
        "id": 495,
        "n": "Donator Warrior Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 21
            },
            "slot": 11,
            "armor": 38,
            "min_defense": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 712
        },
        "sources": [
            "Normal Dungeon Reward",
            "Hell Dungeon Reward"
        ],
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 496,
        "n": "Donator Warrior Armor",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 52,
            "min_defense": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 635
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 497,
        "n": "Steel Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 3
            },
            "slot": 5,
            "armor": 18,
            "aim": 15,
            "min_defense": 40,
            "price": 6450
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 498,
        "n": "Sapphire Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 5
            },
            "slot": 5,
            "armor": 25,
            "aim": 22,
            "min_defense": 50,
            "price": 10800
        },
        "sources": [
            "Normal Dungeon Reward",
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 499,
        "n": "Ruby Dragon Gloves Of Power",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 6
            },
            "slot": 5,
            "armor": 46,
            "aim": 33,
            "power": 10,
            "min_defense": 60,
            "price": 73280
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 500,
        "n": "Ruby Dragon Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 6
            },
            "slot": 5,
            "armor": 40,
            "aim": 30,
            "min_defense": 60,
            "price": 28800
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 501,
        "n": "Diamond Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 7
            },
            "slot": 5,
            "armor": 60,
            "aim": 40,
            "min_defense": 80,
            "price": 71550
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 502,
        "n": "Diamond Gloves Of Power",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 7
            },
            "slot": 5,
            "armor": 60,
            "aim": 40,
            "power": 20,
            "min_defense": 80,
            "price": 152368
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 503,
        "n": "Donator Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 35
            },
            "slot": 2,
            "armor": 30,
            "magic": 35,
            "min_magic": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 914
        }
    },
    {
        "id": 504,
        "n": "Donator robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 22
            },
            "slot": 11,
            "armor": 20,
            "magic": 25,
            "min_magic": 10,
            "price": 10000,
            "enchant_bonus": 0.3,
            "enchant_id": 923
        }
    },
    {
        "id": 505,
        "n": "Enchanted Bronze Dagger",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 83
            },
            "slot": 4,
            "aim": 6,
            "power": 7,
            "min_accuracy": 1,
            "price": 244,
            "enchants_from": 0,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 506,
        "n": "Enchanted Blunt Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 89
            },
            "slot": 4,
            "aim": 9,
            "power": 15,
            "min_accuracy": 1,
            "price": 310,
            "enchants_from": 4,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 507,
        "n": "Enchanted Iron Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 85
            },
            "slot": 4,
            "aim": 45,
            "power": 50,
            "min_accuracy": 20,
            "price": 10442,
            "enchants_from": 18,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 508,
        "n": "Enchanted Steel Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 86
            },
            "slot": 4,
            "aim": 25,
            "power": 25,
            "min_accuracy": 40,
            "price": 9583,
            "enchants_from": 26,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 509,
        "n": "Enchanted Bronze Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 84
            },
            "slot": 4,
            "aim": 9,
            "power": 11,
            "min_accuracy": 1,
            "price": 364,
            "enchants_from": 38,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 510,
        "n": "Enchanted Bronze Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 87
            },
            "slot": 4,
            "aim": 17,
            "power": 17,
            "min_accuracy": 1,
            "price": 728,
            "enchants_from": 41,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 511,
        "n": "Enchanted Iron Rapier",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 88
            },
            "slot": 4,
            "aim": 25,
            "power": 15,
            "min_accuracy": 20,
            "price": 5812,
            "enchants_from": 44,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 512,
        "n": "Enchanted Iron Short Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 84
            },
            "slot": 4,
            "aim": 8,
            "power": 12,
            "min_accuracy": 20,
            "price": 3542,
            "enchants_from": 51,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 513,
        "n": "Enchanted Iron Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 90
            },
            "slot": 4,
            "aim": 16,
            "power": 12,
            "min_accuracy": 20,
            "price": 5594,
            "enchants_from": 54,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 514,
        "n": "Enchanted Iron Mace",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 91
            },
            "slot": 4,
            "aim": 20,
            "power": 13,
            "min_accuracy": 20,
            "price": 7086,
            "enchants_from": 55,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 515,
        "n": "Enchanted Iron Scimitar",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 92
            },
            "slot": 4,
            "aim": 22,
            "power": 19,
            "min_accuracy": 20,
            "price": 5594,
            "enchants_from": 56,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 516,
        "n": "Enchanted Iron Flail",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 93
            },
            "slot": 4,
            "aim": 35,
            "power": 25,
            "min_accuracy": 20,
            "price": 5968,
            "enchants_from": 59,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 517,
        "n": "Enchanted Iron Battle Hammer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 94
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 85,
            "power": 80,
            "min_accuracy": 20,
            "price": 13800,
            "enchants_from": 62,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 518,
        "n": "Enchanted Iron Excalibur",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 95
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 100,
            "power": 110,
            "min_accuracy": 20,
            "price": 28344,
            "enchants_from": 67,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 519,
        "n": "Enchanted Flamberge",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 96
            },
            "slot": 4,
            "aim": 95,
            "power": 115,
            "min_accuracy": 60,
            "price": 71832,
            "enchants_from": 129,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 520,
        "n": "Enchanted Short Dracula Slayer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 97
            },
            "slot": 4,
            "aim": 100,
            "power": 58,
            "min_accuracy": 45,
            "price": 51648,
            "enchants_from": 134,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 521,
        "n": "Enchanted Behemoth Slayer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 98
            },
            "slot": 4,
            "aim": 85,
            "power": 115,
            "min_accuracy": 50,
            "price": 106982,
            "enchants_from": 135,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 522,
        "n": "Enchanted Steel Battle Hammer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 99
            },
            "slot": 4,
            "aim": 68,
            "power": 70,
            "min_accuracy": 40,
            "price": 26014,
            "enchants_from": 139,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 523,
        "n": "Enchanted Steel Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 24
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 90,
            "power": 95,
            "min_accuracy": 40,
            "price": 19580,
            "enchants_from": 140,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 524,
        "n": "Enchanted Steel Broad Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 9
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 101
            },
            "slot": 4,
            "aim": 35,
            "power": 39,
            "min_accuracy": 40,
            "price": 14686,
            "enchants_from": 141,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 525,
        "n": "Enchanted Steel Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 102
            },
            "slot": 4,
            "aim": 30,
            "power": 32,
            "min_accuracy": 40,
            "price": 11328,
            "enchants_from": 142,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 526,
        "n": "Enchanted Steel Scimitar",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 103
            },
            "slot": 4,
            "aim": 33,
            "power": 30,
            "min_accuracy": 40,
            "price": 21218,
            "enchants_from": 143,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 527,
        "n": "Enchanted Steel Lance",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 104
            },
            "slot": 4,
            "aim": 85,
            "power": 90,
            "min_accuracy": 40,
            "price": 37794,
            "enchants_from": 145,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 528,
        "n": "Enchanted Steel Saw Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 105
            },
            "slot": 4,
            "aim": 55,
            "power": 30,
            "min_accuracy": 40,
            "price": 12394,
            "enchants_from": 147,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 529,
        "n": "Enchanted Steel Halberd",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 106
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 100,
            "power": 105,
            "min_accuracy": 40,
            "price": 24616,
            "enchants_from": 148,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 530,
        "n": "Enchanted Steel Giant Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 107
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 80,
            "power": 110,
            "min_accuracy": 40,
            "price": 40280,
            "enchants_from": 149,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 531,
        "n": "Enchanted Blood Giant Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 109
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 60,
            "power": 110,
            "min_accuracy": 40,
            "price": 43256,
            "enchants_from": 150,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 532,
        "n": "Enchanted Freezing Rapier",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 108
            },
            "slot": 4,
            "aim": 85,
            "power": 120,
            "min_accuracy": 60,
            "price": 72690,
            "enchants_from": 363,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 533,
        "n": "Enchanted Moss Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 110
            },
            "slot": 4,
            "aim": 120,
            "power": 165,
            "min_accuracy": 70,
            "price": 257576,
            "enchants_from": 364,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 534,
        "n": "Enchanted Dragon Slayer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 111
            },
            "slot": 4,
            "aim": 160,
            "power": 240,
            "min_accuracy": 80,
            "price": 701558,
            "enchants_from": 365,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 535,
        "n": "Enchanted Sapphire Halberd",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 112
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 130,
            "power": 130,
            "min_accuracy": 50,
            "price": 142468,
            "enchants_from": 393,
            "sc": 1
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 536,
        "n": "Enchanted Sapphire Barbarian Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 113
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 150,
            "power": 180,
            "min_accuracy": 50,
            "price": 125486,
            "enchants_from": 394,
            "sc": 1
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 537,
        "n": "Enchanted Iron Broad Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 3,
                "weapon": 114
            },
            "slot": 4,
            "aim": 19,
            "power": 24,
            "min_accuracy": 20,
            "price": 7086,
            "enchants_from": 57,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 538,
        "n": "Enchanted Sapphire Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 115
            },
            "slot": 4,
            "aim": 85,
            "power": 85,
            "min_accuracy": 50,
            "price": 79920,
            "enchants_from": 138,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 539,
        "n": "Donator Keyblade +1",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 39
            },
            "slot": 4,
            "aim": 60,
            "power": 80,
            "min_accuracy": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 540,
            "enchants_from": 354,
            "sc": 0
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 540,
        "n": "Donator Keyblade +2",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 39
            },
            "slot": 4,
            "aim": 70,
            "power": 90,
            "min_accuracy": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 541,
            "enchants_from": 539,
            "sc": 0
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 541,
        "n": "Donator Keyblade +3",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 116
            },
            "slot": 4,
            "aim": 85,
            "power": 105,
            "min_accuracy": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 568,
            "enchants_from": 540,
            "sc": 0
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 542,
        "n": "Blood Reaper Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 117
            },
            "slot": 4,
            "aim": 50,
            "power": 35,
            "min_accuracy": 1,
            "price": 1,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 543,
        "n": "Death Reaper Scythe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 118
            },
            "slot": 4,
            "aim": 35,
            "power": 50,
            "min_accuracy": 1,
            "price": 1,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 544,
        "n": "Skeleton Mask",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 26
            },
            "slot": 0,
            "armor": 40,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 545,
        "n": "Pumpkin Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 27
            },
            "slot": 0,
            "armor": 45,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 546,
        "n": "Reaper Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 36
            },
            "slot": 2,
            "armor": 38,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 547,
        "n": "Reaper Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 23
            },
            "slot": 11,
            "armor": 27,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 548,
        "n": "Link Armor",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 37
            },
            "slot": 2,
            "armor": 50,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 549,
        "n": "Vampire Armor",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 34
            },
            "slot": 2,
            "armor": 26,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 550,
        "n": "Vampire Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 12
            },
            "slot": 1,
            "armor": 25,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 551,
        "n": "Link Leggings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 24
            },
            "slot": 11,
            "armor": 33,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 552,
        "n": "Alien Mask",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 24
            },
            "slot": 0,
            "armor": 50,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 553,
        "n": "Vampire Mask",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 25
            },
            "slot": 0,
            "armor": 20,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 554,
        "n": "Reaper Hood",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 28
            },
            "slot": 0,
            "armor": 25,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 555,
        "n": "Enchanted Bronze Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 38
            },
            "slot": 2,
            "armor": 14,
            "min_defense": 1,
            "price": 722,
            "enchants_from": 40
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 556,
        "n": "Enchanted Iron Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 39
            },
            "slot": 2,
            "armor": 30,
            "min_defense": 20,
            "price": 10070,
            "enchants_from": 2
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 557,
        "n": "Enchanted Steel Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 40
            },
            "slot": 2,
            "armor": 50,
            "min_defense": 40,
            "price": 24366,
            "enchants_from": 191
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 558,
        "n": "Enchanted Gilded Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 41
            },
            "slot": 2,
            "armor": 60,
            "min_defense": 60,
            "price": 60832,
            "enchants_from": 154
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 559,
        "n": "Enchanted Iron Berserked Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 42
            },
            "slot": 2,
            "armor": 25,
            "power": 25,
            "min_defense": 20,
            "price": 21260,
            "enchants_from": 45
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 560,
        "n": "Enchanted Bronze Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 43
            },
            "slot": 2,
            "armor": 26,
            "min_defense": 1,
            "price": 1190,
            "enchants_from": 43
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 561,
        "n": "Enchanted Iron Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 44
            },
            "slot": 2,
            "armor": 50,
            "min_defense": 20,
            "price": 18222,
            "enchants_from": 66
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 562,
        "n": "Enchanted Bronze Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 25
            },
            "slot": 11,
            "armor": 20,
            "min_defense": 1,
            "price": 722,
            "enchants_from": 473
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 563,
        "n": "Enchanted Iron Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 26
            },
            "slot": 11,
            "armor": 32,
            "min_defense": 20,
            "price": 10070,
            "enchants_from": 474
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 564,
        "n": "Enchanted Steel Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 27
            },
            "slot": 11,
            "armor": 48,
            "min_defense": 40,
            "price": 24616,
            "enchants_from": 475
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 565,
        "n": "Enchanted Sapphire Dragon Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 28
            },
            "slot": 11,
            "armor": 85,
            "min_defense": 50,
            "price": 69264,
            "enchants_from": 476
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 566,
        "n": "Enchanted Flame Phoenix Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 29
            },
            "slot": 11,
            "armor": 105,
            "min_defense": 60,
            "price": 285936,
            "enchants_from": 477
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 567,
        "n": "Enchanted Amethyst Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 12
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 30
            },
            "slot": 11,
            "armor": 145,
            "min_defense": 70,
            "price": 379816,
            "enchants_from": 478
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 568,
        "n": "Donator Keyblade +4",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 116
            },
            "slot": 4,
            "aim": 95,
            "power": 125,
            "min_accuracy": 35,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 569,
            "enchants_from": 541,
            "sc": 0
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 569,
        "n": "Donator Keyblade +5",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 119
            },
            "slot": 4,
            "aim": 115,
            "power": 150,
            "min_accuracy": 45,
            "price": 70000,
            "enchant_bonus": 0.3,
            "enchant_id": 570,
            "enchants_from": 568,
            "sc": 0
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 570,
        "n": "Donator Keyblade +6",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 119
            },
            "slot": 4,
            "aim": 140,
            "power": 170,
            "min_accuracy": 50,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 609,
            "enchants_from": 569,
            "sc": 0
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 571,
        "n": "Enchanted Bronze Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 24
            },
            "slot": 3,
            "armor": 14,
            "min_defense": 1,
            "price": 484,
            "enchants_from": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 572,
        "n": "Enchanted Bronze Large Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 23
            },
            "slot": 3,
            "armor": 18,
            "min_defense": 1,
            "price": 662,
            "enchants_from": 42
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 573,
        "n": "Enchanted Iron Small Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 22
            },
            "slot": 3,
            "armor": 19,
            "min_defense": 20,
            "price": 7886,
            "enchants_from": 53
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 574,
        "n": "Enchanted Iron Large Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 21
            },
            "slot": 3,
            "armor": 30,
            "min_defense": 20,
            "price": 14172,
            "enchants_from": 65
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 575,
        "n": "Enchanted Large Steel Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 25
            },
            "slot": 3,
            "armor": 45,
            "min_defense": 40,
            "price": 30832,
            "enchants_from": 193
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 576,
        "n": "Donator Boots +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 13
            },
            "slot": 6,
            "armor": 37,
            "speed": 32,
            "min_defense": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 577,
            "enchants_from": 355
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 577,
        "n": "Donator Boots+2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 13
            },
            "slot": 6,
            "armor": 43,
            "speed": 34,
            "min_defense": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 578,
            "enchants_from": 576
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 578,
        "n": "Donator Boots+3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 14
            },
            "slot": 6,
            "armor": 48,
            "speed": 36,
            "min_defense": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 579,
            "enchants_from": 577
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 579,
        "n": "Donator Boots+4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 14
            },
            "slot": 6,
            "armor": 58,
            "speed": 38,
            "min_defense": 45,
            "price": 80000,
            "enchant_bonus": 0.3,
            "enchant_id": 580,
            "enchants_from": 578
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 580,
        "n": "Donator Boots+5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 14
            },
            "slot": 6,
            "armor": 65,
            "speed": 40,
            "min_defense": 55,
            "price": 160000,
            "enchant_bonus": 0.3,
            "enchant_id": 1082,
            "enchants_from": 579
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 581,
        "n": "Mining Guild Permission",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_mining": 65,
            "price": 98000,
            "sc": 3
        }
    },
    {
        "id": 582,
        "n": "Jewelry Guild Permission",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 9,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 60,
            "price": 98000,
            "sc": 3
        }
    },
    {
        "id": 583,
        "n": "Ruby Dragon Gloves Of Magic",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 6
            },
            "slot": 5,
            "armor": 46,
            "aim": 33,
            "magic": 15,
            "min_defense": 60,
            "price": 73280
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 584,
        "n": "Ruby Dragon Gloves Of Accuracy",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 6
            },
            "slot": 5,
            "armor": 46,
            "aim": 43,
            "min_defense": 60,
            "price": 73280
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 585,
        "n": "Ruby Dragon Gloves Of Defense",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 6
            },
            "slot": 5,
            "armor": 56,
            "aim": 33,
            "min_defense": 60,
            "price": 73280
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 586,
        "n": "Diamond Gloves Of Defense",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 7
            },
            "slot": 5,
            "armor": 80,
            "aim": 40,
            "min_defense": 80,
            "price": 152368
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 587,
        "n": "Diamond Gloves Of Accuracy",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 7
            },
            "slot": 5,
            "armor": 60,
            "aim": 60,
            "min_defense": 80,
            "price": 152368
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 588,
        "n": "Diamond Gloves Of Magic",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 7
            },
            "slot": 5,
            "armor": 60,
            "aim": 40,
            "magic": 20,
            "min_defense": 80,
            "price": 152368
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 589,
        "n": "Sapphire Gloves Of Power",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 5
            },
            "slot": 5,
            "armor": 25,
            "aim": 22,
            "power": 10,
            "min_defense": 50,
            "price": 19980
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 590,
        "n": "Sapphire Gloves Of Magic",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 5
            },
            "slot": 5,
            "armor": 25,
            "aim": 22,
            "magic": 10,
            "min_defense": 50,
            "price": 19980
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 591,
        "n": "Sapphire Gloves Of Accuracy",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 5
            },
            "slot": 5,
            "armor": 25,
            "aim": 32,
            "min_defense": 50,
            "price": 19980
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 592,
        "n": "Sapphire Gloves Of Defense",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 5
            },
            "slot": 5,
            "armor": 35,
            "aim": 22,
            "min_defense": 50,
            "price": 19980
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 593,
        "n": "Orb Of Luck",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 1,
            "price": 400000,
            "desc": "Gives +10% to enchanting",
            "sc": 5
        }
    },
    {
        "id": 594,
        "n": "Maple Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 35,
            "price": 180,
            "sc": 23
        }
    },
    {
        "id": 595,
        "n": "Spirit Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 45,
            "price": 260,
            "sc": 23
        }
    },
    {
        "id": 596,
        "n": "Blue Palm Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 55,
            "price": 350,
            "sc": 23
        }
    },
    {
        "id": 597,
        "n": "Magic Oak Log",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_carpentry": 65,
            "price": 580,
            "sc": 23
        }
    },
    {
        "id": 598,
        "n": "Cesis Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 6000,
            "to_map": 10,
            "to_i": 58,
            "to_j": 64,
            "sc": 21
        }
    },
    {
        "id": 599,
        "n": "Walco Teleport",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 3000,
            "to_map": 11,
            "to_i": 22,
            "to_j": 30,
            "sc": 21
        }
    },
    {
        "id": 600,
        "n": "Donator Cape +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 4
            },
            "slot": 1,
            "armor": 35,
            "min_defense": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 601,
            "enchants_from": 357
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 601,
        "n": "Donator Cape +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 4
            },
            "slot": 1,
            "armor": 40,
            "min_defense": 20,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 602,
            "enchants_from": 600
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 602,
        "n": "Dragon Wings +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 13
            },
            "slot": 1,
            "armor": 45,
            "min_defense": 30,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 603,
            "enchants_from": 601
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 603,
        "n": "Dragon Wings +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 13
            },
            "slot": 1,
            "armor": 55,
            "min_defense": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 604,
            "enchants_from": 602
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 604,
        "n": "Dragon Wings +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 13
            },
            "slot": 1,
            "armor": 70,
            "min_defense": 50,
            "price": 90000,
            "enchant_bonus": 0.3,
            "enchant_id": 605,
            "enchants_from": 603
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 605,
        "n": "Blaze Dragon Wings +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 14
            },
            "slot": 1,
            "armor": 90,
            "min_defense": 60,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 606,
            "enchants_from": 604
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 606,
        "n": "Blaze Dragon Wings +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 14
            },
            "slot": 1,
            "armor": 100,
            "min_defense": 70,
            "price": 250000,
            "enchant_bonus": 0.3,
            "enchant_id": 607,
            "enchants_from": 605
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 607,
        "n": "Blaze Dragon Wings +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 14
            },
            "slot": 1,
            "armor": 130,
            "min_defense": 80,
            "price": 400000,
            "enchant_bonus": 0.3,
            "enchant_id": 608,
            "enchants_from": 606
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 608,
        "n": "Blaze Dragon Wings +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 15
            },
            "slot": 1,
            "armor": 160,
            "min_defense": 90,
            "price": 950000,
            "enchants_from": 607
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 609,
        "n": "Donator Keyblade +7",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 132
            },
            "slot": 4,
            "aim": 165,
            "power": 195,
            "min_accuracy": 60,
            "price": 230000,
            "enchant_bonus": 0.3,
            "enchant_id": 610,
            "enchants_from": 570,
            "sc": 0
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 610,
        "n": "Donator Keyblade +8",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 132
            },
            "slot": 4,
            "aim": 180,
            "power": 230,
            "min_accuracy": 70,
            "price": 280000,
            "enchant_bonus": 0.3,
            "enchant_id": 611,
            "enchants_from": 609,
            "sc": 0
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 611,
        "n": "Donator Keyblade +9",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 133
            },
            "slot": 4,
            "aim": 220,
            "power": 280,
            "min_accuracy": 80,
            "price": 550000,
            "enchant_bonus": 0.3,
            "enchant_id": 912,
            "enchants_from": 610,
            "sc": 0
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 612,
        "n": "Merlin Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 9
            },
            "slot": 1,
            "armor": 30,
            "magic": 20,
            "min_magic": 40,
            "price": 41924
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 613,
        "n": "Twilight Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 10
            },
            "slot": 1,
            "armor": 60,
            "min_defense": 50,
            "price": 85444
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 614,
        "n": "Carnwennan",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 128
            },
            "slot": 4,
            "aim": 20,
            "power": 20,
            "min_accuracy": 10,
            "price": 420,
            "enchant_id": 615,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 615,
        "n": "Enchanted Carnwennan",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 129
            },
            "slot": 4,
            "aim": 30,
            "power": 30,
            "min_accuracy": 10,
            "price": 778,
            "enchants_from": 614,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 616,
        "n": "Oblivion Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 126
            },
            "slot": 4,
            "aim": 90,
            "power": 80,
            "min_accuracy": 45,
            "price": 39814,
            "enchant_id": 617,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 617,
        "n": "Enchanted Oblivion Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 127
            },
            "slot": 4,
            "aim": 110,
            "power": 100,
            "min_accuracy": 45,
            "price": 73656,
            "enchants_from": 616,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 618,
        "n": "Hrunting",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 120
            },
            "slot": 4,
            "aim": 100,
            "power": 120,
            "min_accuracy": 50,
            "price": 83732,
            "enchant_id": 619,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 619,
        "n": "Enchanted Hrunting",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 121
            },
            "slot": 4,
            "aim": 120,
            "power": 145,
            "min_accuracy": 50,
            "price": 154904,
            "enchants_from": 618,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 620,
        "n": "The Devastator",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 124
            },
            "slot": 4,
            "aim": 120,
            "power": 120,
            "min_accuracy": 60,
            "price": 122842,
            "enchant_id": 621,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 621,
        "n": "Enchanted Devastator",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 125
            },
            "slot": 4,
            "aim": 145,
            "power": 145,
            "min_accuracy": 60,
            "price": 227258,
            "enchants_from": 620,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 622,
        "n": "Ridill",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 130
            },
            "slot": 4,
            "aim": 140,
            "power": 130,
            "min_accuracy": 80,
            "price": 298372,
            "enchant_id": 623,
            "sc": 0
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 623,
        "n": "Enchanted Ridill",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 131
            },
            "slot": 4,
            "aim": 170,
            "power": 170,
            "min_accuracy": 80,
            "price": 551988,
            "enchants_from": 622,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 624,
        "n": "Giant Archangel Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 122
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 220,
            "power": 270,
            "min_accuracy": 90,
            "price": 446920,
            "enchant_id": 625,
            "sc": 1
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 625,
        "n": "Enchanted Giant Archangel Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 123
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 260,
            "power": 350,
            "min_accuracy": 90,
            "price": 826802,
            "enchants_from": 624,
            "sc": 1
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 626,
        "n": "Small Fire Shield +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 26
            },
            "slot": 3,
            "armor": 69,
            "min_defense": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 627,
            "enchants_from": 353
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 627,
        "n": "Small Fire Shield +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 26
            },
            "slot": 3,
            "armor": 83,
            "min_defense": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 628,
            "enchants_from": 626
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 628,
        "n": "Small Fire Shield +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 26
            },
            "slot": 3,
            "armor": 97,
            "min_defense": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 629,
            "enchants_from": 627
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 629,
        "n": "Fire Shield +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 27
            },
            "slot": 3,
            "armor": 111,
            "min_defense": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 630,
            "enchants_from": 628
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 630,
        "n": "Fire Shield +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 27
            },
            "slot": 3,
            "armor": 125,
            "min_defense": 45,
            "price": 90000,
            "enchant_bonus": 0.3,
            "enchant_id": 631,
            "enchants_from": 629
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 631,
        "n": "Fire Shield +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 27
            },
            "slot": 3,
            "armor": 139,
            "min_defense": 50,
            "price": 180000,
            "enchant_bonus": 0.3,
            "enchant_id": 632,
            "enchants_from": 630
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 632,
        "n": "Large Fire Shield +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 28
            },
            "slot": 3,
            "armor": 153,
            "min_defense": 60,
            "price": 320000,
            "enchant_bonus": 0.3,
            "enchant_id": 633,
            "enchants_from": 631
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 633,
        "n": "Large Fire Shield +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 28
            },
            "slot": 3,
            "armor": 167,
            "min_defense": 70,
            "price": 530000,
            "enchant_bonus": 0.3,
            "enchant_id": 634,
            "enchants_from": 632
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 634,
        "n": "Large Fire Shield +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 28
            },
            "slot": 3,
            "armor": 180,
            "min_defense": 80,
            "price": 792000,
            "enchant_bonus": 0.3,
            "enchant_id": 960,
            "enchants_from": 633
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 635,
        "n": "Donator Warrior Armor +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 67,
            "min_defense": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 636,
            "enchants_from": 496
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 636,
        "n": "Donator Warrior Armor +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 82,
            "min_defense": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 637,
            "enchants_from": 635
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 637,
        "n": "Donator Warrior Armor +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 97,
            "min_defense": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 638,
            "enchants_from": 636
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 638,
        "n": "Donator Warrior Armor +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 112,
            "min_defense": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 639,
            "enchants_from": 637
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 639,
        "n": "Donator Warrior Armor +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 127,
            "min_defense": 45,
            "price": 90000,
            "enchant_bonus": 0.3,
            "enchant_id": 640,
            "enchants_from": 638
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 640,
        "n": "Donator Warrior Armor +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 142,
            "min_defense": 50,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 641,
            "enchants_from": 639
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 641,
        "n": "Donator Warrior Armor +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 157,
            "min_defense": 60,
            "price": 250000,
            "enchant_bonus": 0.3,
            "enchant_id": 642,
            "enchants_from": 640
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 642,
        "n": "Donator Warrior Armor +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 172,
            "min_defense": 70,
            "price": 400000,
            "enchant_bonus": 0.3,
            "enchant_id": 643,
            "enchants_from": 641
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 643,
        "n": "Donator Warrior Armor +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 33
            },
            "slot": 2,
            "armor": 187,
            "min_defense": 80,
            "price": 950000,
            "enchant_bonus": 0.3,
            "enchant_id": 956,
            "enchants_from": 642
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 644,
        "n": "Enchanted Flame Phoenix Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 45
            },
            "slot": 2,
            "armor": 127,
            "min_defense": 60,
            "price": 245902,
            "enchants_from": 157
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 645,
        "n": "Enchanted Amethyst Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 46
            },
            "slot": 2,
            "armor": 157,
            "min_defense": 80,
            "price": 438132,
            "enchants_from": 160
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 646,
        "n": "Enchanted Diamond Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 47
            },
            "slot": 2,
            "armor": 172,
            "min_defense": 80,
            "price": 708018,
            "enchants_from": 158
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 647,
        "n": "Enchanted Fire Dragon Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 13
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 48
            },
            "slot": 2,
            "armor": 142,
            "min_defense": 70,
            "price": 278974,
            "enchants_from": 159
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 648,
        "n": "Enchanted Fire Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 137
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 200,
            "power": 210,
            "min_accuracy": 80,
            "price": 334706,
            "enchants_from": 668,
            "sc": 1
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 649,
        "n": "Beelzebub Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 49
            },
            "slot": 2,
            "armor": 145,
            "min_defense": 90,
            "price": 528322,
            "enchant_id": 650
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 650,
        "n": "Enchanted Beelzebub Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 51
            },
            "slot": 2,
            "armor": 200,
            "min_defense": 90,
            "price": 977396,
            "enchants_from": 649
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 651,
        "n": "Overlord Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 17
            },
            "slot": 1,
            "armor": 30,
            "power": 10,
            "min_defense": 25,
            "price": 31928
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 652,
        "n": "Phoenix Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 18
            },
            "slot": 1,
            "armor": 90,
            "min_defense": 70,
            "price": 132958
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 653,
        "n": "Lucifer Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 50
            },
            "slot": 2,
            "armor": 125,
            "min_defense": 85,
            "price": 448276,
            "enchant_id": 654
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 654,
        "n": "Enchanted Lucifer Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 52
            },
            "slot": 2,
            "armor": 185,
            "min_defense": 85,
            "price": 829310,
            "enchants_from": 653
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 655,
        "n": "Cursed Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 9
            },
            "slot": 1,
            "armor": 60,
            "power": -20,
            "min_defense": 50,
            "price": 75882
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 656,
        "n": "Behemoth Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 19
            },
            "slot": 1,
            "armor": 85,
            "min_defense": 25,
            "price": 68332
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 657,
        "n": "Fire Stone Chunk",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 80,
            "price": 1200,
            "sc": 2
        }
    },
    {
        "id": 658,
        "n": "Fire Stone Bar",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 80,
            "price": 11520,
            "sc": 0
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 659,
        "n": "Reptile Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 15
            },
            "slot": 6,
            "armor": 15,
            "min_defense": 50,
            "speed": 35,
            "price": 24722,
            "enchant_id": 660
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 660,
        "n": "Enchanted Reptile Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 16
            },
            "slot": 6,
            "armor": 20,
            "aim": 10,
            "power": 10,
            "min_defense": 50,
            "speed": 35,
            "price": 45736,
            "enchants_from": 659
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 661,
        "n": "Angel Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 17
            },
            "slot": 6,
            "armor": 30,
            "min_defense": 70,
            "speed": 40,
            "price": 149582,
            "enchant_id": 662
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 662,
        "n": "Enchanted Angel Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 17
            },
            "slot": 6,
            "armor": 40,
            "aim": 10,
            "min_defense": 70,
            "speed": 40,
            "price": 276726,
            "enchants_from": 661
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 663,
        "n": "Silver Dragon Gloves",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "hands": 3
            },
            "slot": 5,
            "armor": 30,
            "aim": 20,
            "min_defense": 45,
            "price": 12818
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 664,
        "n": "Fire Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 29
            },
            "slot": 0,
            "armor": 60,
            "min_defense": 80,
            "price": 141004
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 665,
        "n": "Full Fire Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 30
            },
            "slot": 0,
            "armor": 82,
            "min_defense": 80,
            "price": 241460
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 666,
        "n": "Fire Flail",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 134
            },
            "slot": 4,
            "aim": 140,
            "power": 130,
            "min_accuracy": 80,
            "price": 259182,
            "enchant_id": 667,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 667,
        "n": "Enchanted Fire Flail",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 135
            },
            "slot": 4,
            "aim": 170,
            "power": 160,
            "min_accuracy": 80,
            "price": 479486,
            "enchants_from": 666,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 668,
        "n": "Fire Battle Axe",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 136
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 170,
            "power": 180,
            "min_accuracy": 80,
            "price": 180922,
            "enchant_id": 648,
            "sc": 1
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 669,
        "n": "Baby Ruby Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 5,
            "power": 10,
            "armor": 5,
            "price": 100000,
            "pet": 1
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 670,
        "n": "Gray Dog [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 5,
            "power": 5,
            "armor": 5,
            "magic": 5,
            "price": 25000,
            "pet": 2
        }
    },
    {
        "id": 671,
        "n": "Ruby Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 5,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 15,
            "power": 20,
            "armor": 10,
            "price": 130000,
            "pet": 3
        }
    },
    {
        "id": 672,
        "n": "King Ruby Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 25,
            "power": 40,
            "armor": 25,
            "price": 162500,
            "pet": 4
        }
    },
    {
        "id": 673,
        "n": "Chaotic Ruby Dragon [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 8,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 35,
            "power": 50,
            "armor": 30,
            "price": 662500,
            "pet": 5
        }
    },
    {
        "id": 674,
        "n": "Gray Wolf [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 17,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 15,
            "armor": 15,
            "magic": 15,
            "aim": 10,
            "price": 32500,
            "pet": 6
        }
    },
    {
        "id": 675,
        "n": "Brown Dog [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 5,
            "power": 5,
            "armor": 5,
            "magic": 5,
            "price": 25000,
            "pet": 7
        }
    },
    {
        "id": 676,
        "n": "Brown Wolf [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 18,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 15,
            "armor": 15,
            "magic": 15,
            "aim": 10,
            "price": 32500,
            "pet": 8
        }
    },
    {
        "id": 677,
        "n": "Baby Dinosaur [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 14,
            "y": 0
        },
        "params": {
            "wearable": true,
            "power": 8,
            "armor": 8,
            "slot": 12,
            "price": 100000,
            "pet": 9
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 678,
        "n": "Dinosaur [Rare]",
        "t": 7,
        "img": {
            "sheet": "17",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 16,
            "armor": 16,
            "price": 130000,
            "pet": 10
        }
    },
    {
        "id": 679,
        "n": "Spiky Dinosaur [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 25,
            "armor": 25,
            "price": 162500,
            "pet": 11
        }
    },
    {
        "id": 680,
        "n": "White Horse [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 19,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 5,
            "aim": 15,
            "armor": 10,
            "price": 500000,
            "pet": 12
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 681,
        "n": "Unicorn [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 10,
            "aim": 30,
            "armor": 30,
            "price": 650000,
            "pet": 13
        }
    },
    {
        "id": 682,
        "n": "Baby Beholder [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 11,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 8,
            "armor": 4,
            "price": 93000,
            "pet": 14
        }
    },
    {
        "id": 683,
        "n": "Beholder [Common]",
        "t": 7,
        "img": {
            "sheet": "17",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 16,
            "armor": 8,
            "price": 120900,
            "pet": 15
        }
    },
    {
        "id": 684,
        "n": "King Beholder [Common]",
        "t": 7,
        "img": {
            "sheet": "17",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 30,
            "armor": 15,
            "price": 151126,
            "pet": 16
        }
    },
    {
        "id": 685,
        "n": "Demonic Beholder [Rare]",
        "t": 7,
        "img": {
            "sheet": "17",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 50,
            "armor": 30,
            "price": 651126,
            "pet": 17
        }
    },
    {
        "id": 686,
        "n": "Ghost [Common]",
        "t": 7,
        "img": {
            "sheet": "13",
            "x": 6,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "armor": 15,
            "price": 30000,
            "pet": 18
        }
    },
    {
        "id": 687,
        "n": "Nightmare Ghost [Common]",
        "t": 7,
        "img": {
            "sheet": "13",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "armor": 35,
            "price": 39000,
            "pet": 19
        }
    },
    {
        "id": 688,
        "n": "Angel [Rare]",
        "t": 7,
        "img": {
            "sheet": "18",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 8,
            "power": 8,
            "armor": 8,
            "magic": 8,
            "price": 600000,
            "pet": 20
        }
    },
    {
        "id": 689,
        "n": "Archangel [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 5,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 15,
            "power": 15,
            "armor": 15,
            "magic": 15,
            "price": 780000,
            "pet": 21
        }
    },
    {
        "id": 690,
        "n": "Sacred Archangel [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 35,
            "power": 35,
            "armor": 35,
            "magic": 25,
            "price": 975000,
            "pet": 22
        }
    },
    {
        "id": 691,
        "n": "Saint Archangel [Legendary]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 50,
            "power": 35,
            "armor": 50,
            "magic": 45,
            "price": 1975000,
            "pet": 23
        }
    },
    {
        "id": 692,
        "n": "Skeleton [Common]",
        "t": 7,
        "img": {
            "sheet": "13",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 5,
            "price": 62000,
            "pet": 24
        }
    },
    {
        "id": 693,
        "n": "Skeleton Warrior [Common]",
        "t": 7,
        "img": {
            "sheet": "13",
            "x": 6,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 15,
            "price": 80600,
            "pet": 25
        }
    },
    {
        "id": 694,
        "n": "Skeleton King [Common]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 8,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 30,
            "price": 100750,
            "pet": 26
        }
    },
    {
        "id": 695,
        "n": "Baby Gryffin [Common]",
        "t": 7,
        "img": {
            "sheet": "18",
            "x": 5,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 10,
            "power": 5,
            "armor": 5,
            "price": 97000,
            "pet": 28
        }
    },
    {
        "id": 696,
        "n": "Gryffin [Common]",
        "t": 7,
        "img": {
            "sheet": "24",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 15,
            "power": 15,
            "armor": 15,
            "price": 126100,
            "pet": 29
        }
    },
    {
        "id": 697,
        "n": "Royal Gryffin [Common]",
        "t": 7,
        "img": {
            "sheet": "24",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 30,
            "power": 25,
            "armor": 25,
            "price": 157626,
            "pet": 30
        }
    },
    {
        "id": 698,
        "n": "Emerald Geko [Common]",
        "t": 7,
        "img": {
            "sheet": "24",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 10,
            "armor": 10,
            "price": 90000,
            "pet": 31
        }
    },
    {
        "id": 699,
        "n": "Moss Wyvern [Common]",
        "t": 7,
        "img": {
            "sheet": "17",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 30,
            "armor": 30,
            "price": 117000,
            "pet": 32
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 700,
        "n": "Ruby Geko [Common]",
        "t": 7,
        "img": {
            "sheet": "24",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 10,
            "defense": 10,
            "price": 90000,
            "pet": 33
        }
    },
    {
        "id": 701,
        "n": "Flame Wyvern [Common]",
        "t": 7,
        "img": {
            "sheet": "17",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 30,
            "defense": 30,
            "price": 117000,
            "pet": 34
        }
    },
    {
        "id": 702,
        "n": "Baby Black Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 10,
            "aim": 5,
            "armor": 10,
            "price": 250000,
            "pet": 35
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 703,
        "n": "Black Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 20,
            "aim": 10,
            "armor": 20,
            "price": 325000,
            "pet": 36
        }
    },
    {
        "id": 704,
        "n": "King Black Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 30,
            "aim": 20,
            "armor": 30,
            "price": 406250,
            "pet": 37
        }
    },
    {
        "id": 705,
        "n": "Blood Black Dragon [Rare]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 7,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 40,
            "aim": 45,
            "armor": 45,
            "price": 1156250,
            "pet": 38
        }
    },
    {
        "id": 706,
        "n": "Baby Emerald Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 5,
            "aim": 5,
            "armor": 10,
            "price": 95000,
            "pet": 39
        }
    },
    {
        "id": 707,
        "n": "Emerald Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 10,
            "aim": 10,
            "armor": 20,
            "price": 123500,
            "pet": 40
        }
    },
    {
        "id": 708,
        "n": "King Emerald Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 25,
            "aim": 25,
            "armor": 25,
            "price": 154376,
            "pet": 41
        }
    },
    {
        "id": 709,
        "n": "Cursed Dragon [Rare]",
        "t": 7,
        "img": {
            "sheet": "16",
            "x": 6,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 45,
            "aim": 35,
            "armor": 40,
            "price": 654376,
            "pet": 42
        }
    },
    {
        "id": 710,
        "n": "Stone Of Evolution",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "price": 250000,
            "desc": "Required to evolve pets and items",
            "sc": 99
        }
    },
    {
        "id": 711,
        "n": "Skeleton Overlord [Rare]",
        "t": 7,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 50,
            "aim": 30,
            "price": 1100750,
            "pet": 27
        }
    },
    {
        "id": 712,
        "n": "Donator Warrior Pants +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 21
            },
            "slot": 11,
            "armor": 47,
            "min_defense": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 713,
            "enchants_from": 495
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 713,
        "n": "Donator Warrior Pants +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 21
            },
            "slot": 11,
            "armor": 60,
            "min_defense": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 714,
            "enchants_from": 712
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 714,
        "n": "Donator Warrior Pants +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 21
            },
            "slot": 11,
            "armor": 73,
            "min_defense": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 715,
            "enchants_from": 713
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 715,
        "n": "Donator Warrior Pants +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 31
            },
            "slot": 11,
            "armor": 86,
            "min_defense": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 716,
            "enchants_from": 714
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 716,
        "n": "Donator Warrior Pants +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 31
            },
            "slot": 11,
            "armor": 99,
            "min_defense": 45,
            "price": 70000,
            "enchant_bonus": 0.3,
            "enchant_id": 717,
            "enchants_from": 715
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 717,
        "n": "Donator Warrior Pants +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 31
            },
            "slot": 11,
            "armor": 112,
            "min_defense": 50,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 718,
            "enchants_from": 716
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 718,
        "n": "Donator Warrior Pants +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 32
            },
            "slot": 11,
            "armor": 125,
            "min_defense": 60,
            "price": 230000,
            "enchant_bonus": 0.3,
            "enchant_id": 719,
            "enchants_from": 717
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 719,
        "n": "Donator Warrior Pants +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 32
            },
            "slot": 11,
            "armor": 138,
            "min_defense": 70,
            "price": 280000,
            "enchant_bonus": 0.3,
            "enchant_id": 720,
            "enchants_from": 718
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 720,
        "n": "Donator Warrior Pants +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 32
            },
            "slot": 11,
            "armor": 145,
            "min_defense": 80,
            "price": 550000,
            "enchant_bonus": 0.3,
            "enchant_id": 954,
            "enchants_from": 719
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 721,
        "n": "Donator Helmet +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 15
            },
            "slot": 0,
            "armor": 31,
            "min_defense": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 722,
            "enchants_from": 356
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 722,
        "n": "Donator Helmet +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 15
            },
            "slot": 0,
            "armor": 41,
            "min_defense": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 723,
            "enchants_from": 721
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 723,
        "n": "Donator Helmet +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 15
            },
            "slot": 0,
            "armor": 51,
            "min_defense": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 724,
            "enchants_from": 722
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 724,
        "n": "Soul Collector Helmet +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 17
            },
            "slot": 0,
            "armor": 61,
            "min_defense": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 725,
            "enchants_from": 723
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 725,
        "n": "Soul Collector Helmet +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 17
            },
            "slot": 0,
            "armor": 71,
            "min_defense": 45,
            "price": 70000,
            "enchant_bonus": 0.3,
            "enchant_id": 726,
            "enchants_from": 724
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 726,
        "n": "Soul Collector Helmet +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 14
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 17
            },
            "slot": 0,
            "armor": 81,
            "min_defense": 50,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 727,
            "enchants_from": 725
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 727,
        "n": "Ancient Soul Collector Helmet +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 32
            },
            "slot": 0,
            "armor": 91,
            "min_defense": 60,
            "price": 230000,
            "enchant_bonus": 0.3,
            "enchant_id": 728,
            "enchants_from": 726
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 728,
        "n": "Ancient Soul Collector Helmet +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 32
            },
            "slot": 0,
            "armor": 101,
            "min_defense": 70,
            "price": 280000,
            "enchant_bonus": 0.3,
            "enchant_id": 729,
            "enchants_from": 727
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 729,
        "n": "Ancient Soul Collector Helmet +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 32
            },
            "slot": 0,
            "armor": 112,
            "min_defense": 80,
            "price": 550000,
            "enchant_bonus": 0.3,
            "enchant_id": 958,
            "enchants_from": 728
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 730,
        "n": "Fir Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 16
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1000,
            "carpentry_type": "2",
            "carpentry_id": 299,
            "sc": 4
        }
    },
    {
        "id": 731,
        "n": "Cactus Wood Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 16
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3000,
            "carpentry_type": "2",
            "carpentry_id": 300,
            "sc": 4
        }
    },
    {
        "id": 732,
        "n": "Oak Wood Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 12000,
            "carpentry_type": "2",
            "carpentry_id": 301,
            "sc": 4
        }
    },
    {
        "id": 733,
        "n": "Fir Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 200,
            "carpentry_type": "1",
            "carpentry_id": 287,
            "sc": 2
        }
    },
    {
        "id": 734,
        "n": "Fir Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 2000,
            "carpentry_type": "1",
            "carpentry_id": 288,
            "sc": 6
        }
    },
    {
        "id": 735,
        "n": "Fir Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 400,
            "carpentry_type": "1",
            "carpentry_id": 289,
            "sc": 5
        }
    },
    {
        "id": 736,
        "n": "Fir Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 300,
            "carpentry_type": "1",
            "carpentry_id": 290,
            "sc": 3
        }
    },
    {
        "id": 737,
        "n": "Fir Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1400,
            "carpentry_type": "1",
            "carpentry_id": 291,
            "size": 2,
            "sc": 1
        }
    },
    {
        "id": 738,
        "n": "Fir Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1500,
            "carpentry_type": "1",
            "carpentry_id": 292,
            "heals": 1,
            "sc": 0
        }
    },
    {
        "id": 739,
        "n": "Cactus Wood Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 600,
            "carpentry_type": "1",
            "carpentry_id": 293,
            "sc": 2
        }
    },
    {
        "id": 740,
        "n": "Cactus Wood Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 9000,
            "carpentry_type": "1",
            "carpentry_id": 294,
            "sc": 6
        }
    },
    {
        "id": 741,
        "n": "Cactus Wood Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 750,
            "carpentry_type": "1",
            "carpentry_id": 295,
            "sc": 5
        }
    },
    {
        "id": 742,
        "n": "Cactus Wood Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1500,
            "carpentry_type": "1",
            "carpentry_id": 296,
            "sc": 3
        }
    },
    {
        "id": 743,
        "n": "Cactus Wood Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 6000,
            "carpentry_type": "1",
            "carpentry_id": 297,
            "size": 4,
            "sc": 1
        }
    },
    {
        "id": 744,
        "n": "Cactus Wood Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 4500,
            "carpentry_type": "1",
            "carpentry_id": 298,
            "heals": 2,
            "sc": 0
        }
    },
    {
        "id": 745,
        "n": "Oak Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1200,
            "carpentry_type": "1",
            "carpentry_id": 299,
            "sc": 2
        }
    },
    {
        "id": 746,
        "n": "Oak Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 37000,
            "carpentry_type": "1",
            "carpentry_id": 300,
            "sc": 6
        }
    },
    {
        "id": 747,
        "n": "Oak Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1500,
            "carpentry_type": "1",
            "carpentry_id": 301,
            "sc": 5
        }
    },
    {
        "id": 748,
        "n": "Oak Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3600,
            "carpentry_type": "1",
            "carpentry_id": 302,
            "sc": 3
        }
    },
    {
        "id": 749,
        "n": "Oak Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 12000,
            "carpentry_type": "1",
            "carpentry_id": 303,
            "size": 6,
            "sc": 1
        }
    },
    {
        "id": 750,
        "n": "Oak Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 9000,
            "carpentry_type": "1",
            "carpentry_id": 304,
            "heals": 3,
            "sc": 0
        }
    },
    {
        "id": 751,
        "n": "Santa Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 31
            },
            "slot": 0,
            "armor": 40,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 752,
        "n": "Fence",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 5100,
            "carpentry_type": "1",
            "carpentry_id": 305,
            "sc": 6
        }
    },
    {
        "id": 753,
        "n": "Soil",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 20
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 5250,
            "carpentry_type": "1",
            "carpentry_id": 332,
            "sc": 99
        }
    },
    {
        "id": 754,
        "n": "Green Leaf Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 1,
            "price": 6,
            "farming_id": 306,
            "sc": 19
        }
    },
    {
        "id": 755,
        "n": "Yellow Leaf Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 2,
            "price": 12,
            "farming_id": 307,
            "sc": 19
        }
    },
    {
        "id": 756,
        "n": "Grass Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 1,
            "price": 2,
            "farming_id": 308,
            "sc": 19
        }
    },
    {
        "id": 757,
        "n": "Grass",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_farming": 1,
            "price": 10,
            "sc": 13
        }
    },
    {
        "id": 758,
        "n": "Hay",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_farming": 5,
            "price": 14,
            "sc": 13
        }
    },
    {
        "id": 759,
        "n": "Hay Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 5,
            "price": 2,
            "farming_id": 309,
            "sc": 19
        }
    },
    {
        "id": 760,
        "n": "Wheat",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_farming": 7,
            "price": 38,
            "sc": 13
        }
    },
    {
        "id": 761,
        "n": "Wheat Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 7,
            "price": 15,
            "farming_id": 310,
            "sc": 19
        }
    },
    {
        "id": 762,
        "n": "Apple",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 18
        },
        "params": {
            "wearable": false,
            "price": 60,
            "heal": 6,
            "sc": 0
        }
    },
    {
        "id": 763,
        "n": "Apple Tree Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 8,
            "price": 25,
            "farming_id": 311,
            "sc": 19
        }
    },
    {
        "id": 764,
        "n": "Good Present",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 21
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "price": 1,
            "desc": "Contains a random item with value up to 80,000 coins",
            "no_present": true,
            "sc": 16
        }
    },
    {
        "id": 765,
        "n": "Great Present",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 22
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "price": 1,
            "desc": "Contains a random item with value up to 170,000 coins",
            "no_present": true,
            "sc": 16
        }
    },
    {
        "id": 766,
        "n": "Best Present",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 23
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "price": 1,
            "desc": "Contains a random item with value up to 450,000 coins",
            "no_present": true,
            "sc": 16
        }
    },
    {
        "id": 767,
        "n": "Rake",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 192
            },
            "slot": 4,
            "min_farming": 1,
            "price": 240,
            "sc": 0
        }
    },
    {
        "id": 768,
        "n": "Willow Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3600,
            "carpentry_type": "1",
            "carpentry_id": 312,
            "sc": 2
        }
    },
    {
        "id": 769,
        "n": "Maple Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 5400,
            "carpentry_type": "1",
            "carpentry_id": 313,
            "sc": 2
        }
    },
    {
        "id": 770,
        "n": "Spirit Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 7800,
            "carpentry_type": "1",
            "carpentry_id": 314,
            "sc": 2
        }
    },
    {
        "id": 771,
        "n": "Blue Palm Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 14000,
            "carpentry_type": "1",
            "carpentry_id": 315,
            "sc": 2
        }
    },
    {
        "id": 772,
        "n": "Magic Oak Chair",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 29000,
            "carpentry_type": "1",
            "carpentry_id": 316,
            "sc": 2
        }
    },
    {
        "id": 773,
        "n": "Blue Leaf Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 45,
            "price": 300,
            "farming_id": 317,
            "sc": 19
        }
    },
    {
        "id": 774,
        "n": "Aconitum Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 20
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 65,
            "price": 380,
            "farming_id": 318,
            "sc": 19
        }
    },
    {
        "id": 775,
        "n": "Blood Herb Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 67,
            "price": 500,
            "farming_id": 319,
            "sc": 19
        }
    },
    {
        "id": 776,
        "n": "Oregano Leaf Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 25,
            "price": 220,
            "farming_id": 321,
            "sc": 19
        }
    },
    {
        "id": 777,
        "n": "Tomato Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 4,
            "price": 2,
            "farming_id": 323,
            "sc": 19
        }
    },
    {
        "id": 778,
        "n": "Yarrow Leaf Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 15,
            "price": 130,
            "farming_id": 322,
            "sc": 19
        }
    },
    {
        "id": 779,
        "n": "Island Deed",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": false,
            "price": 35000,
            "sc": 7
        }
    },
    {
        "id": 780,
        "n": "Potato",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 17
        },
        "params": {
            "wearable": false,
            "price": 40,
            "heal": 3,
            "sc": 4
        }
    },
    {
        "id": 781,
        "n": "Onion",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 19
        },
        "params": {
            "wearable": false,
            "price": 85,
            "heal": 2,
            "sc": 4
        }
    },
    {
        "id": 782,
        "n": "Banana",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 17
        },
        "params": {
            "wearable": false,
            "price": 100,
            "heal": 8,
            "sc": 0
        }
    },
    {
        "id": 783,
        "n": "Pineapple",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 18
        },
        "params": {
            "wearable": false,
            "price": 140,
            "heal": 10,
            "sc": 4
        }
    },
    {
        "id": 784,
        "n": "Carrot",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 19
        },
        "params": {
            "wearable": false,
            "price": 130,
            "heal": 8,
            "sc": 4
        }
    },
    {
        "id": 785,
        "n": "Corn",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 18
        },
        "params": {
            "wearable": false,
            "price": 200,
            "heal": 4,
            "sc": 4
        }
    },
    {
        "id": 786,
        "n": "Strawberry",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 19
        },
        "params": {
            "wearable": false,
            "price": 350,
            "heal": 13,
            "sc": 0
        }
    },
    {
        "id": 787,
        "n": "Potato Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 13,
            "price": 35,
            "farming_id": 324,
            "sc": 19
        }
    },
    {
        "id": 788,
        "n": "Onion Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 17,
            "price": 70,
            "farming_id": 325,
            "sc": 19
        }
    },
    {
        "id": 789,
        "n": "Banana Tree Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 28,
            "price": 95,
            "farming_id": 326,
            "sc": 19
        }
    },
    {
        "id": 790,
        "n": "Pineapple Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 36,
            "price": 110,
            "farming_id": 327,
            "sc": 19
        }
    },
    {
        "id": 791,
        "n": "Carrot Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 48,
            "price": 100,
            "farming_id": 328,
            "sc": 19
        }
    },
    {
        "id": 792,
        "n": "Corn Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 55,
            "price": 160,
            "farming_id": 329,
            "sc": 19
        }
    },
    {
        "id": 793,
        "n": "Strawberry Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 62,
            "price": 250,
            "farming_id": 330,
            "sc": 19
        }
    },
    {
        "id": 794,
        "n": "Old Leaves Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 30,
            "price": 220,
            "farming_id": 331,
            "sc": 19
        }
    },
    {
        "id": 795,
        "n": "Small Potion Of Carpentry",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 11
        },
        "params": {
            "wearable": false,
            "boost_carpentry": 0.05,
            "price": 976,
            "sc": 2
        }
    },
    {
        "id": 796,
        "n": "Small Potion Of Farming",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 12
        },
        "params": {
            "wearable": false,
            "boost_farming": 0.05,
            "price": 508,
            "sc": 2
        }
    },
    {
        "id": 797,
        "n": "Bone Dagger",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 138
            },
            "slot": 4,
            "aim": 11,
            "power": 11,
            "min_accuracy": 10,
            "price": 180,
            "enchant_id": 798,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 798,
        "n": "Enchanted Bone Dagger",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 139
            },
            "slot": 4,
            "aim": 15,
            "power": 15,
            "min_accuracy": 10,
            "price": 334,
            "enchants_from": 797,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 799,
        "n": "Bone Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 140
            },
            "slot": 4,
            "aim": 17,
            "power": 17,
            "min_accuracy": 10,
            "price": 266,
            "enchant_id": 800,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 800,
        "n": "Enchanted Bone Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 141
            },
            "slot": 4,
            "aim": 25,
            "power": 25,
            "min_accuracy": 10,
            "price": 492,
            "enchants_from": 799,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 801,
        "n": "Bone Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 8
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 4
            },
            "slot": 3,
            "armor": 18,
            "min_defense": 10,
            "price": 1200,
            "enchant_id": 802
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 802,
        "n": "Enchanted Bone Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 30
            },
            "slot": 3,
            "armor": 27,
            "min_defense": 10,
            "price": 2220,
            "enchants_from": 801
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 803,
        "n": "Silver Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "min_health": 12,
            "slot": 8,
            "price": 6900,
            "magic": 9,
            "enchant_id": 1086
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 804,
        "n": "Silver Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 6
        },
        "params": {
            "wearable": true,
            "min_health": 14,
            "slot": 8,
            "price": 10450,
            "power": 10,
            "aim": 10,
            "enchant_id": 1087
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 805,
        "n": "Golden Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "min_health": 20,
            "slot": 8,
            "price": 7200,
            "armor": 12,
            "enchant_id": 1089
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 806,
        "n": "Golden Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 6
        },
        "params": {
            "wearable": true,
            "min_health": 26,
            "slot": 8,
            "price": 20600,
            "aim": 15,
            "power": 15,
            "magic": 15,
            "armor": 15,
            "enchant_id": 1092
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 807,
        "n": "White Gold Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 6
        },
        "params": {
            "wearable": true,
            "min_health": 30,
            "slot": 8,
            "price": 11600,
            "armor": 18,
            "enchant_id": 1093
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 808,
        "n": "White Gold Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "min_health": 33,
            "slot": 8,
            "price": 16400,
            "magic": 18,
            "enchant_id": 1094
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 809,
        "n": "White Gold Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": true,
            "min_health": 36,
            "slot": 8,
            "price": 24400,
            "power": 20,
            "aim": 20,
            "enchant_id": 1095
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 810,
        "n": "White Gold Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "min_health": 40,
            "slot": 8,
            "price": 38400,
            "armor": 24,
            "power": 24,
            "aim": 24,
            "magic": 24,
            "enchant_id": 1096
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 811,
        "n": "Platinum Amethyst Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": true,
            "min_health": 70,
            "slot": 8,
            "price": 202300,
            "armor": 50,
            "magic": 50,
            "enchant_id": 1102
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 812,
        "n": "Platinum Jadeite Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": true,
            "min_health": 80,
            "slot": 8,
            "price": 400000,
            "power": 61,
            "aim": 61,
            "armor": 61,
            "magic": 40,
            "enchant_id": 1104
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 813,
        "n": "Silver Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 11900,
            "min_health": 14,
            "power": 11,
            "aim": 11,
            "enchant_id": 1107
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 814,
        "n": "Silver Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 18900,
            "min_health": 16,
            "armor": 13,
            "power": 13,
            "magic": 13,
            "aim": 13,
            "enchant_id": 1108
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 815,
        "n": "Golden Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 11200,
            "min_health": 20,
            "armor": 13,
            "enchant_id": 1109
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 816,
        "n": "Golden Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 13600,
            "min_health": 22,
            "magic": 13,
            "enchant_id": 1110
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 817,
        "n": "Golden Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 24600,
            "min_health": 26,
            "armor": 16,
            "power": 16,
            "aim": 16,
            "magic": 16
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 818,
        "n": "White Gold Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 28400,
            "min_health": 30,
            "armor": 23,
            "enchant_id": 1113
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 819,
        "n": "White Gold Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 35600,
            "min_health": 33,
            "magic": 23,
            "enchant_id": 1114
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 820,
        "n": "White Gold Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 47600,
            "min_health": 36,
            "power": 26,
            "aim": 26,
            "enchant_id": 1115
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 821,
        "n": "White Gold Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 68600,
            "min_health": 40,
            "power": 32,
            "aim": 32,
            "magic": 32,
            "armor": 32,
            "enchant_id": 1116
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 822,
        "n": "Platinum Amethyst Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 216250,
            "min_health": 70,
            "magic": 70,
            "armor": 70,
            "enchant_id": 1122
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 823,
        "n": "Platinum Black Opal Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 368550,
            "min_health": 75,
            "power": 70,
            "aim": 70,
            "magic": 50,
            "armor": 70,
            "enchant_id": 1123
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 824,
        "n": "Willow Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 98000,
            "carpentry_type": "1",
            "carpentry_id": 334,
            "sc": 6
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 825,
        "n": "Willow Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 36000,
            "carpentry_type": "2",
            "carpentry_id": 305,
            "sc": 4
        }
    },
    {
        "id": 826,
        "n": "Willow Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 4200,
            "carpentry_type": "1",
            "carpentry_id": 335,
            "sc": 5
        }
    },
    {
        "id": 827,
        "n": "Willow Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 8400,
            "carpentry_type": "1",
            "carpentry_id": 336,
            "sc": 3
        }
    },
    {
        "id": 828,
        "n": "Willow Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 30000,
            "carpentry_type": "1",
            "carpentry_id": 337,
            "size": 8,
            "sc": 1
        }
    },
    {
        "id": 829,
        "n": "Maple Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 240000,
            "carpentry_type": "1",
            "carpentry_id": 338,
            "sc": 6
        }
    },
    {
        "id": 830,
        "n": "Maple Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 72000,
            "carpentry_type": "2",
            "carpentry_id": 306,
            "sc": 4
        },
        "sources": [
            "Easy Dungeon Reward"
        ]
    },
    {
        "id": 831,
        "n": "Maple Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 6300,
            "carpentry_type": "1",
            "carpentry_id": 340,
            "sc": 5
        }
    },
    {
        "id": 832,
        "n": "Maple Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 14400,
            "carpentry_type": "1",
            "carpentry_id": 341,
            "sc": 3
        }
    },
    {
        "id": 833,
        "n": "Maple Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 54000,
            "carpentry_type": "1",
            "carpentry_id": 342,
            "size": 10,
            "sc": 1
        }
    },
    {
        "id": 834,
        "n": "Maple Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 37800,
            "carpentry_type": "1",
            "carpentry_id": 343,
            "heals": 5,
            "sc": 0
        }
    },
    {
        "id": 835,
        "n": "Spirit Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 356000,
            "carpentry_type": "1",
            "carpentry_id": 344,
            "sc": 6
        }
    },
    {
        "id": 836,
        "n": "Spirit Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 130000,
            "carpentry_type": "2",
            "carpentry_id": 307,
            "sc": 4
        }
    },
    {
        "id": 837,
        "n": "Spirit Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 9100,
            "carpentry_type": "1",
            "carpentry_id": 346,
            "sc": 5
        }
    },
    {
        "id": 838,
        "n": "Spirit Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 23400,
            "carpentry_type": "1",
            "carpentry_id": 347,
            "sc": 3
        }
    },
    {
        "id": 839,
        "n": "Spirit Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 104000,
            "carpentry_type": "1",
            "carpentry_id": 348,
            "size": 12,
            "sc": 1
        }
    },
    {
        "id": 840,
        "n": "Spirit Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 54600,
            "carpentry_type": "1",
            "carpentry_id": 349,
            "heals": 6,
            "sc": 0
        }
    },
    {
        "id": 841,
        "n": "Blue Palm Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 450000,
            "carpentry_type": "1",
            "carpentry_id": 350,
            "sc": 6
        }
    },
    {
        "id": 842,
        "n": "Blue Palm Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 210000,
            "carpentry_type": "2",
            "carpentry_id": 308,
            "sc": 4
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 843,
        "n": "Blue Palm Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 17500,
            "carpentry_type": "1",
            "carpentry_id": 352,
            "sc": 5
        }
    },
    {
        "id": 844,
        "n": "Blue Palm Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 35000,
            "carpentry_type": "1",
            "carpentry_id": 353,
            "sc": 3
        }
    },
    {
        "id": 845,
        "n": "Blue Palm Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 175000,
            "carpentry_type": "1",
            "carpentry_id": 354,
            "size": 14,
            "sc": 1
        }
    },
    {
        "id": 846,
        "n": "Blue Palm Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 105000,
            "carpentry_type": "1",
            "carpentry_id": 355,
            "heals": 7,
            "sc": 0
        }
    },
    {
        "id": 847,
        "n": "Magic Wall",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 830000,
            "carpentry_type": "1",
            "carpentry_id": 356,
            "sc": 6
        }
    },
    {
        "id": 848,
        "n": "Magic Floor",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 18
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 406000,
            "carpentry_type": "2",
            "carpentry_id": 310,
            "sc": 4
        }
    },
    {
        "id": 849,
        "n": "Magic Table",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 34800,
            "carpentry_type": "1",
            "carpentry_id": 358,
            "sc": 5
        }
    },
    {
        "id": 850,
        "n": "Magic Chest",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 69600,
            "carpentry_type": "1",
            "carpentry_id": 359,
            "sc": 3
        }
    },
    {
        "id": 851,
        "n": "Magic Cabinet",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 2,
            "y": 14
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 464000,
            "carpentry_type": "1",
            "carpentry_id": 360,
            "size": 16,
            "sc": 1
        }
    },
    {
        "id": 852,
        "n": "Magic Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 0,
            "y": 16
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 208800,
            "carpentry_type": "1",
            "carpentry_id": 361,
            "heals": 8,
            "sc": 0
        }
    },
    {
        "id": 853,
        "n": "Willow Bed",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 18000,
            "carpentry_type": "1",
            "carpentry_id": 362,
            "heals": 4,
            "sc": 0
        }
    },
    {
        "id": 854,
        "n": "Beast Herb Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 17
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 69,
            "price": 1300,
            "farming_id": 320,
            "sc": 19
        }
    },
    {
        "id": 855,
        "n": "Potion Of Preservation",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 14,
            "price": 100000,
            "desc": "Keep 5 extra items on death, when equipped",
            "sc": 2
        }
    },
    {
        "id": 856,
        "n": "Veles Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 42
            },
            "slot": 11,
            "armor": 20,
            "magic": 16,
            "min_magic": 25,
            "price": 18822,
            "enchant_id": 870
        }
    },
    {
        "id": 857,
        "n": "Heka Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 43
            },
            "slot": 11,
            "armor": 31,
            "magic": 24,
            "min_magic": 45,
            "price": 48202,
            "enchant_id": 872
        }
    },
    {
        "id": 858,
        "n": "Enki Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 44
            },
            "slot": 11,
            "armor": 58,
            "magic": 40,
            "min_magic": 65,
            "price": 138420,
            "enchant_id": 874
        }
    },
    {
        "id": 859,
        "n": "Odin Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 45
            },
            "slot": 11,
            "armor": 88,
            "magic": 51,
            "min_magic": 85,
            "price": 323022,
            "enchant_id": 876
        }
    },
    {
        "id": 860,
        "n": "Veles Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 33
            },
            "slot": 0,
            "armor": 17,
            "magic": 14,
            "min_magic": 25,
            "price": 13482
        }
    },
    {
        "id": 861,
        "n": "Heka Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 34
            },
            "slot": 0,
            "armor": 27,
            "magic": 22,
            "min_magic": 45,
            "price": 42482
        }
    },
    {
        "id": 862,
        "n": "Enki Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 35
            },
            "slot": 0,
            "armor": 41,
            "magic": 38,
            "min_magic": 65,
            "price": 118204
        }
    },
    {
        "id": 863,
        "n": "Odin Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 36
            },
            "slot": 0,
            "armor": 72,
            "magic": 48,
            "min_magic": 85,
            "price": 234822
        }
    },
    {
        "id": 864,
        "n": "Veles Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 55
            },
            "slot": 2,
            "armor": 24,
            "magic": 17,
            "min_magic": 25,
            "price": 32282,
            "enchant_id": 879
        }
    },
    {
        "id": 865,
        "n": "Heka Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 56
            },
            "slot": 2,
            "armor": 41,
            "magic": 28,
            "min_magic": 45,
            "price": 82832,
            "enchant_id": 881
        }
    },
    {
        "id": 866,
        "n": "Enki Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 57
            },
            "slot": 2,
            "armor": 64,
            "magic": 44,
            "min_magic": 65,
            "price": 158202,
            "enchant_id": 883
        }
    },
    {
        "id": 867,
        "n": "Odin Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 58
            },
            "slot": 2,
            "armor": 102,
            "magic": 60,
            "min_magic": 85,
            "price": 492932,
            "enchant_id": 885
        }
    },
    {
        "id": 868,
        "n": "Enchanted Wizard Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 33
            },
            "slot": 11,
            "armor": 11,
            "magic": 8,
            "min_magic": 1,
            "price": 4995,
            "enchants_from": 479
        }
    },
    {
        "id": 869,
        "n": "Enchanted Witch Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 34
            },
            "slot": 11,
            "armor": 22,
            "magic": 16,
            "min_magic": 15,
            "price": 14918,
            "enchants_from": 480
        }
    },
    {
        "id": 870,
        "n": "Enchanted Veles Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 35
            },
            "slot": 11,
            "armor": 25,
            "magic": 18,
            "min_magic": 25,
            "price": 34820,
            "enchants_from": 856
        }
    },
    {
        "id": 871,
        "n": "Enchanted Battlemage robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 36
            },
            "slot": 11,
            "armor": 31,
            "magic": 22,
            "min_magic": 35,
            "price": 62243,
            "enchants_from": 481
        }
    },
    {
        "id": 872,
        "n": "Enchanted Heka Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 37
            },
            "slot": 11,
            "armor": 40,
            "magic": 28,
            "min_magic": 45,
            "price": 89173,
            "enchants_from": 857
        }
    },
    {
        "id": 873,
        "n": "Enchanted Merlin Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 38
            },
            "slot": 11,
            "armor": 58,
            "magic": 38,
            "min_magic": 55,
            "price": 114085,
            "enchants_from": 482
        }
    },
    {
        "id": 874,
        "n": "Enchanted Enki Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 39
            },
            "slot": 11,
            "armor": 70,
            "magic": 44,
            "min_magic": 65,
            "price": 256078,
            "no_present": true,
            "enchants_from": 858
        }
    },
    {
        "id": 875,
        "n": "Enchanted Gandalf Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 40
            },
            "slot": 11,
            "armor": 88,
            "magic": 50,
            "min_magic": 75,
            "price": 384356,
            "no_present": true,
            "enchants_from": 483
        }
    },
    {
        "id": 876,
        "n": "Enchanted Odin Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 41
            },
            "slot": 11,
            "armor": 104,
            "magic": 56,
            "min_magic": 85,
            "price": 597590,
            "enchants_from": 859
        }
    },
    {
        "id": 877,
        "n": "Enchanted Wizard Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 59
            },
            "slot": 2,
            "armor": 10,
            "magic": 9,
            "min_magic": 1,
            "price": 6660,
            "enchants_from": 452
        }
    },
    {
        "id": 878,
        "n": "Enchanted Witch Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 60
            },
            "slot": 2,
            "armor": 24,
            "magic": 16,
            "min_magic": 15,
            "price": 22874,
            "enchants_from": 453
        }
    },
    {
        "id": 879,
        "n": "Enchanted Veles Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 61
            },
            "slot": 2,
            "armor": 26,
            "magic": 19,
            "min_magic": 25,
            "price": 59721,
            "enchants_from": 864
        }
    },
    {
        "id": 880,
        "n": "Enchanted Battlemage Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 62
            },
            "slot": 2,
            "armor": 37,
            "magic": 25,
            "min_magic": 35,
            "price": 106561,
            "enchants_from": 455
        }
    },
    {
        "id": 881,
        "n": "Enchanted Heka Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 63
            },
            "slot": 2,
            "armor": 50,
            "magic": 32,
            "min_magic": 45,
            "price": 153239,
            "enchants_from": 865
        }
    },
    {
        "id": 882,
        "n": "Enchanted Merlin Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 64
            },
            "slot": 2,
            "armor": 64,
            "magic": 42,
            "min_magic": 55,
            "price": 217712,
            "enchants_from": 456
        }
    },
    {
        "id": 883,
        "n": "Enchanted Enki Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 65
            },
            "slot": 2,
            "armor": 85,
            "magic": 49,
            "min_magic": 65,
            "price": 292674,
            "no_present": true,
            "enchants_from": 866
        }
    },
    {
        "id": 884,
        "n": "Enchanted Gandalf Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 66
            },
            "slot": 2,
            "armor": 102,
            "magic": 57,
            "min_magic": 75,
            "price": 481888,
            "no_present": true,
            "enchants_from": 454
        }
    },
    {
        "id": 885,
        "n": "Enchanted Odin Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 67
            },
            "slot": 2,
            "armor": 121,
            "magic": 66,
            "min_magic": 85,
            "price": 911924,
            "enchants_from": 867
        }
    },
    {
        "id": 886,
        "n": "Pegasus [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 18,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 15,
            "aim": 40,
            "armor": 35,
            "price": 1400000,
            "pet": 43
        }
    },
    {
        "id": 887,
        "n": "Donkey [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 13,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 5,
            "armor": 10,
            "price": 30000,
            "pet": 44
        }
    },
    {
        "id": 888,
        "n": "Horror Steed [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 19,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 3,
            "armor": 7,
            "power": 7,
            "magic": 7,
            "aim": 7,
            "price": 300000,
            "pet": 45
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 889,
        "n": "Nightmare Steed [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 7,
            "armor": 13,
            "power": 13,
            "magic": 13,
            "aim": 13,
            "price": 390000,
            "pet": 46
        }
    },
    {
        "id": 890,
        "n": "Underworld Steed [Legendary]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 15,
            "armor": 30,
            "power": 30,
            "magic": 30,
            "aim": 30,
            "price": 1390000,
            "pet": 47
        }
    },
    {
        "id": 891,
        "n": "Baby Cupid [Legendary]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "armor": 4,
            "power": 4,
            "magic": 4,
            "aim": 4,
            "price": 1,
            "pet": 48
        }
    },
    {
        "id": 892,
        "n": "Cupid [Legendary]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "armor": 8,
            "power": 8,
            "magic": 8,
            "aim": 8,
            "price": 1,
            "pet": 49
        }
    },
    {
        "id": 893,
        "n": "Cupid Archer [Legendary]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "armor": 16,
            "power": 16,
            "magic": 16,
            "aim": 16,
            "price": 1,
            "pet": 50
        }
    },
    {
        "id": 894,
        "n": "Lady-Killer [Legendary]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 5,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "armor": 25,
            "power": 25,
            "magic": 25,
            "aim": 25,
            "price": 1,
            "pet": 51
        }
    },
    {
        "id": 895,
        "n": "Efreet [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 6,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 25,
            "aim": 10,
            "price": 1046500,
            "pet": 52
        }
    },
    {
        "id": 896,
        "n": "Diablo [Legendary]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 60,
            "armor": 50,
            "aim": 30,
            "price": 1455670,
            "pet": 53
        }
    },
    {
        "id": 897,
        "n": "Valentine's Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 70
            },
            "slot": 2,
            "armor": 25,
            "min_defense": 1,
            "price": 1,
            "enchant_id": 898
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 898,
        "n": "Enchanted Valentine's Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 71
            },
            "slot": 2,
            "armor": 35,
            "min_defense": 1,
            "price": 1,
            "enchants_from": 897
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 899,
        "n": "Valentine's Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 31
            },
            "slot": 3,
            "armor": 25,
            "min_defense": 1,
            "price": 1,
            "enchant_id": 900
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 900,
        "n": "Enchanted Valentine's Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 32
            },
            "slot": 3,
            "armor": 35,
            "min_defense": 1,
            "price": 1,
            "enchants_from": 899
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 901,
        "n": "Valentine's Cape",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 20
            },
            "slot": 1,
            "armor": 25,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 902,
        "n": "Valentine's Staff",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 143
            },
            "slot": 4,
            "aim": 25,
            "power": 25,
            "min_accuracy": 1,
            "price": 1,
            "enchant_id": 903,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 903,
        "n": "Enchanted Valentine's Staff",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 15
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 144
            },
            "slot": 4,
            "aim": 35,
            "power": 35,
            "min_accuracy": 1,
            "price": 1,
            "enchants_from": 902,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 904,
        "n": "Statue of Kronos",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 95,
            "price": 190335,
            "sc": 99
        }
    },
    {
        "id": 905,
        "n": "Chaotic Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 145
            },
            "slot": 4,
            "aim": 145,
            "power": 160,
            "min_accuracy": 70,
            "price": 328322,
            "enchant_id": 906,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 906,
        "n": "Enchanted Chaotic Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 146
            },
            "slot": 4,
            "aim": 180,
            "power": 200,
            "min_accuracy": 70,
            "price": 607296,
            "enchants_from": 905,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 907,
        "n": "Odin Mace",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 147
            },
            "slot": 4,
            "aim": 190,
            "power": 240,
            "min_accuracy": 90,
            "price": 523722,
            "enchant_id": 908,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 908,
        "n": "Enchanted Odin Mace",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 148
            },
            "slot": 4,
            "aim": 248,
            "power": 290,
            "min_accuracy": 90,
            "price": 968886,
            "enchants_from": 907,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 909,
        "n": "Kronos Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 150
            },
            "slot": 4,
            "aim": 260,
            "power": 270,
            "min_accuracy": 95,
            "price": 1175443,
            "enchant_id": 1061,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 910,
        "n": "Unicorn Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 149
            },
            "slot": 4,
            "aim": 150,
            "power": 100,
            "min_accuracy": 70,
            "price": 216750,
            "sc": 0
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 911,
        "n": "Unicorn Horn",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 70,
            "price": 35000,
            "sc": 11
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 912,
        "n": "Donator Keyblade +10",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 133
            },
            "slot": 4,
            "aim": 240,
            "power": 300,
            "min_accuracy": 90,
            "price": 723000,
            "enchant_bonus": 0.3,
            "enchant_id": 913,
            "enchants_from": 611,
            "sc": 0
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 913,
        "n": "Donator Keyblade +11",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 133
            },
            "slot": 4,
            "aim": 250,
            "power": 310,
            "min_accuracy": 95,
            "price": 912382,
            "enchants_from": 912,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 914,
        "n": "Donator Robe +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 35
            },
            "slot": 2,
            "armor": 44,
            "magic": 38,
            "min_magic": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 915,
            "enchants_from": 503
        }
    },
    {
        "id": 915,
        "n": "Donator Robe +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 35
            },
            "slot": 2,
            "armor": 53,
            "magic": 41,
            "min_magic": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 916,
            "enchants_from": 914
        }
    },
    {
        "id": 916,
        "n": "Donator Robe +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 35
            },
            "slot": 2,
            "armor": 62,
            "magic": 44,
            "min_magic": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 917,
            "enchants_from": 915
        }
    },
    {
        "id": 917,
        "n": "Monk Robe +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 68
            },
            "slot": 2,
            "armor": 71,
            "magic": 47,
            "min_magic": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 918,
            "enchants_from": 916
        }
    },
    {
        "id": 918,
        "n": "Monk Robe +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 68
            },
            "slot": 2,
            "armor": 80,
            "magic": 50,
            "min_magic": 45,
            "price": 90000,
            "enchant_bonus": 0.3,
            "enchant_id": 919,
            "enchants_from": 917
        }
    },
    {
        "id": 919,
        "n": "Monk Robe +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 68
            },
            "slot": 2,
            "armor": 89,
            "magic": 53,
            "min_magic": 50,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 920,
            "enchants_from": 918
        }
    },
    {
        "id": 920,
        "n": "Druid Robe +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 69
            },
            "slot": 2,
            "armor": 98,
            "magic": 56,
            "min_magic": 60,
            "price": 250000,
            "enchant_bonus": 0.3,
            "enchant_id": 921,
            "enchants_from": 919
        }
    },
    {
        "id": 921,
        "n": "Druid Robe +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 69
            },
            "slot": 2,
            "armor": 107,
            "magic": 59,
            "min_magic": 70,
            "price": 400000,
            "enchant_bonus": 0.3,
            "enchant_id": 922,
            "enchants_from": 920
        }
    },
    {
        "id": 922,
        "n": "Druid Robe +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 69
            },
            "slot": 2,
            "armor": 121,
            "magic": 66,
            "min_magic": 80,
            "price": 950000,
            "enchants_from": 921
        }
    },
    {
        "id": 923,
        "n": "Donator robe Bottom +1",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 22
            },
            "slot": 11,
            "armor": 29,
            "magic": 28,
            "min_magic": 15,
            "price": 20000,
            "enchant_bonus": 0.3,
            "enchant_id": 924,
            "enchants_from": 504
        }
    },
    {
        "id": 924,
        "n": "Donator robe Bottom +2",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 22
            },
            "slot": 11,
            "armor": 38,
            "magic": 31,
            "min_magic": 25,
            "price": 30000,
            "enchant_bonus": 0.3,
            "enchant_id": 925,
            "enchants_from": 923
        }
    },
    {
        "id": 925,
        "n": "Donator robe Bottom +3",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 22
            },
            "slot": 11,
            "armor": 47,
            "magic": 34,
            "min_magic": 35,
            "price": 40000,
            "enchant_bonus": 0.3,
            "enchant_id": 926,
            "enchants_from": 924
        }
    },
    {
        "id": 926,
        "n": "Monk robe Bottom +4",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 46
            },
            "slot": 11,
            "armor": 56,
            "magic": 37,
            "min_magic": 40,
            "price": 60000,
            "enchant_bonus": 0.3,
            "enchant_id": 927,
            "enchants_from": 925
        }
    },
    {
        "id": 927,
        "n": "Monk robe Bottom +5",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 46
            },
            "slot": 11,
            "armor": 65,
            "magic": 40,
            "min_magic": 45,
            "price": 70000,
            "enchant_bonus": 0.3,
            "enchant_id": 928,
            "enchants_from": 926
        }
    },
    {
        "id": 928,
        "n": "Monk robe Bottom +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 46
            },
            "slot": 11,
            "armor": 74,
            "magic": 43,
            "min_magic": 50,
            "price": 150000,
            "enchant_bonus": 0.3,
            "enchant_id": 929,
            "enchants_from": 927
        }
    },
    {
        "id": 929,
        "n": "Druid robe Bottom +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 47
            },
            "slot": 11,
            "armor": 83,
            "magic": 46,
            "min_magic": 60,
            "price": 230000,
            "enchant_bonus": 0.3,
            "enchant_id": 930,
            "enchants_from": 928
        }
    },
    {
        "id": 930,
        "n": "Druid robe Bottom +8",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 47
            },
            "slot": 11,
            "armor": 92,
            "magic": 49,
            "min_magic": 70,
            "price": 280000,
            "enchant_bonus": 0.3,
            "enchant_id": 931,
            "enchants_from": 929
        }
    },
    {
        "id": 931,
        "n": "Druid robe Bottom +9",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 47
            },
            "slot": 11,
            "armor": 104,
            "magic": 56,
            "min_magic": 80,
            "price": 550000,
            "enchants_from": 930
        }
    },
    {
        "id": 932,
        "n": "Emerald Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 72
            },
            "slot": 2,
            "armor": 32,
            "min_defense": 30,
            "price": 9260,
            "enchant_id": 933
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 933,
        "n": "Enchanted Emerald Chainmail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 73
            },
            "slot": 2,
            "armor": 46,
            "min_defense": 30,
            "price": 17132,
            "enchants_from": 932
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 934,
        "n": "Emerald Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 74
            },
            "slot": 2,
            "armor": 46,
            "min_defense": 30,
            "price": 18212,
            "enchant_id": 935
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 935,
        "n": "Enchanted Emerald Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 75
            },
            "slot": 2,
            "armor": 60,
            "min_defense": 30,
            "price": 33692,
            "enchants_from": 934
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 936,
        "n": "Emerald Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 48
            },
            "slot": 11,
            "armor": 32,
            "min_defense": 30,
            "price": 11940,
            "enchant_id": 937
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 937,
        "n": "Enchanted Emerald Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 49
            },
            "slot": 11,
            "armor": 42,
            "min_defense": 30,
            "price": 22090,
            "enchants_from": 936
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 938,
        "n": "Emerald Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 151
            },
            "slot": 4,
            "aim": 20,
            "power": 20,
            "min_accuracy": 30,
            "price": 8882,
            "enchant_id": 939,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 939,
        "n": "Enchanted Emerald Long Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 152
            },
            "slot": 4,
            "aim": 25,
            "power": 25,
            "min_accuracy": 30,
            "price": 16430,
            "enchants_from": 938,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 940,
        "n": "Emerald Sabre",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 153
            },
            "slot": 4,
            "aim": 30,
            "power": 25,
            "min_accuracy": 30,
            "price": 10569,
            "enchant_id": 941,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 941,
        "n": "Enchanted Emerald Sabre",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 16
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 154
            },
            "slot": 4,
            "aim": 37,
            "power": 34,
            "min_accuracy": 30,
            "price": 19952,
            "enchants_from": 940,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 942,
        "n": "Emerald Katana",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 155
            },
            "slot": 4,
            "aim": 40,
            "power": 40,
            "min_accuracy": 30,
            "price": 11274,
            "enchant_id": 943,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 943,
        "n": "Enchanted Emerald Katana",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 156
            },
            "slot": 4,
            "aim": 50,
            "power": 50,
            "min_accuracy": 30,
            "price": 20856,
            "enchants_from": 942,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 944,
        "n": "Emerald Warhammer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 157
            },
            "slot": 4,
            "disable_slot": 3,
            "aim": 50,
            "power": 70,
            "min_accuracy": 30,
            "price": 18054,
            "enchant_id": 945,
            "sc": 1
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 945,
        "n": "Enchanted Emerald Warhammer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 158
            },
            "slot": 4,
            "aim": 60,
            "power": 85,
            "min_accuracy": 30,
            "price": 33400,
            "enchants_from": 944,
            "sc": 0
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 946,
        "n": "Fishing Guild Permission",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 9,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_fishing": 80,
            "price": 98000,
            "sc": 3
        }
    },
    {
        "id": 947,
        "n": "Nephilim Book",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 69230,
            "sc": 0
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 948,
        "n": "Fellin Island Ticket",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 100,
            "sc": 0
        }
    },
    {
        "id": 949,
        "n": "Ice Feather",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 55,
            "price": 8000,
            "sc": 9
        }
    },
    {
        "id": 950,
        "n": "Lightning Feather",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 70,
            "price": 20000,
            "sc": 9
        }
    },
    {
        "id": 951,
        "n": "Ice Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 23
            },
            "slot": 1,
            "armor": 90,
            "power": 10,
            "aim": 25,
            "enchant_id": 1292,
            "min_strength": 60,
            "price": 122880
        },
        "sources": [
            "Normal Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 952,
        "n": "Lightning Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 22
            },
            "slot": 1,
            "armor": 140,
            "magic": 20,
            "min_defense": 85,
            "enchant_id": 1276,
            "price": 367200
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 953,
        "n": "Nephilim Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 21
            },
            "slot": 1,
            "armor": 180,
            "power": 20,
            "aim": 35,
            "min_strength": 90,
            "enchant_id": 1295,
            "price": 1363411
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 954,
        "n": "Firelord Pants +10",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 60
            },
            "slot": 11,
            "armor": 165,
            "min_defense": 90,
            "price": 748200,
            "enchant_bonus": 0.3,
            "enchant_id": 955,
            "enchants_from": 720
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 955,
        "n": "Firelord Pants +11",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 60
            },
            "slot": 11,
            "armor": 180,
            "min_defense": 95,
            "price": 998292,
            "enchant_id": 1162,
            "enchant_bonus": 0.2,
            "enchants_from": 954
        },
        "chances": [
            35,
            45,
            55,
            65
        ]
    },
    {
        "id": 956,
        "n": "Firelord Platemail +10",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 80
            },
            "slot": 2,
            "armor": 212,
            "min_defense": 90,
            "price": 1129100,
            "enchant_bonus": 0.3,
            "enchant_id": 957,
            "enchants_from": 643
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 957,
        "n": "Firelord Platemail +11",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 81
            },
            "slot": 2,
            "armor": 237,
            "min_defense": 95,
            "price": 1362882,
            "enchant_id": 1163,
            "enchant_bonus": 0.2,
            "enchants_from": 956
        },
        "chances": [
            35,
            45,
            55,
            65
        ]
    },
    {
        "id": 958,
        "n": "Firelord Helmet +10",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 37
            },
            "slot": 0,
            "armor": 125,
            "min_defense": 90,
            "price": 748200,
            "enchant_bonus": 0.3,
            "enchant_id": 959,
            "enchants_from": 729
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 959,
        "n": "Firelord Helmet +11",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 37
            },
            "slot": 0,
            "armor": 135,
            "min_defense": 95,
            "price": 998292,
            "enchant_id": 1161,
            "enchant_bonus": 0.2,
            "enchants_from": 958
        },
        "chances": [
            35,
            45,
            55,
            65
        ]
    },
    {
        "id": 960,
        "n": "Firelord Shield +10",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 33
            },
            "slot": 3,
            "armor": 195,
            "min_defense": 90,
            "price": 923022,
            "enchant_bonus": 0.3,
            "enchant_id": 961,
            "enchants_from": 634
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 961,
        "n": "Firelord Shield +11",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 33
            },
            "slot": 3,
            "armor": 220,
            "min_defense": 95,
            "price": 1128322,
            "enchant_id": 1164,
            "enchant_bonus": 0.2,
            "enchants_from": 960
        },
        "chances": [
            35,
            45,
            55,
            65
        ]
    },
    {
        "id": 962,
        "n": "Juggernaut Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 86
            },
            "slot": 2,
            "armor": 155,
            "min_defense": 95,
            "price": 877344,
            "enchant_id": 963
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 963,
        "n": "Enchanted Juggernaut Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 87
            },
            "slot": 2,
            "armor": 215,
            "min_defense": 95,
            "price": 1623086,
            "enchants_from": 962
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 964,
        "n": "Bahamut Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 78
            },
            "slot": 2,
            "armor": 170,
            "min_defense": 100,
            "price": 894208,
            "enchant_id": 965
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 965,
        "n": "Enchanted Bahamut Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 79
            },
            "slot": 2,
            "armor": 230,
            "min_defense": 100,
            "price": 1654284,
            "enchants_from": 964
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 966,
        "n": "7 Souls Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 76
            },
            "slot": 2,
            "armor": 220,
            "min_defense": 110,
            "price": 5557222,
            "enchant_id": 967
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 967,
        "n": "Enchanted 7 Souls Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 77
            },
            "slot": 2,
            "armor": 280,
            "min_defense": 110,
            "price": 10280860,
            "enchants_from": 966
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 968,
        "n": "7 Souls Jewel",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_jewelry": 99,
            "price": 324530,
            "sc": 10
        }
    },
    {
        "id": 969,
        "n": "Juggernaut Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 56
            },
            "slot": 11,
            "armor": 125,
            "min_defense": 95,
            "price": 348202,
            "enchant_id": 970
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 970,
        "n": "Enchanted Juggernaut Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 57
            },
            "slot": 11,
            "armor": 165,
            "min_defense": 95,
            "price": 811544,
            "enchants_from": 969
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 971,
        "n": "Enchanted Ichor Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 51
            },
            "slot": 11,
            "armor": 200,
            "min_defense": 105,
            "price": 2209502,
            "enchants_from": 1032
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 972,
        "n": "Ichor Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 82
            },
            "slot": 2,
            "armor": 190,
            "min_defense": 105,
            "price": 1379856,
            "enchant_id": 973
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 973,
        "n": "Enchanted Ichor Platemail",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 83
            },
            "slot": 2,
            "armor": 250,
            "min_defense": 105,
            "price": 2552734,
            "enchants_from": 972
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 974,
        "n": "Ichor Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 38
            },
            "slot": 0,
            "armor": 145,
            "min_defense": 105,
            "price": 1008794,
            "enchant_id": 975
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 975,
        "n": "Enchanted Ichor Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 39
            },
            "slot": 0,
            "armor": 175,
            "min_defense": 105,
            "price": 1903988,
            "enchants_from": 974
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 976,
        "n": "Bronze Full Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 48
            },
            "slot": 0,
            "armor": 15,
            "min_defense": 1,
            "price": 430
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 977,
        "n": "Juggernaut Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 42
            },
            "slot": 0,
            "armor": 120,
            "min_defense": 95,
            "price": 438672,
            "enchant_id": 978
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 978,
        "n": "Enchanted Juggernaut Helmet",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 43
            },
            "slot": 0,
            "armor": 150,
            "min_defense": 95,
            "price": 1263387,
            "enchants_from": 977
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 979,
        "n": "Demigod Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 52
            },
            "slot": 11,
            "armor": 100,
            "magic": 60,
            "min_magic": 95,
            "price": 1355477
        }
    },
    {
        "id": 980,
        "n": "Shiva Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 46
            },
            "slot": 0,
            "armor": 80,
            "magic": 53,
            "min_magic": 90,
            "price": 457008
        }
    },
    {
        "id": 981,
        "n": "Golden Apple",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 92,
            "price": 28720,
            "sc": 99
        }
    },
    {
        "id": 982,
        "n": "Warrior Trophy",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 85,
            "price": 44400,
            "sc": 99
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 983,
        "n": "Rusty Warrior Trophy",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 85,
            "price": 5000,
            "sc": 99
        },
        "sources": [
            "Normal Dungeon Reward"
        ]
    },
    {
        "id": 984,
        "n": "Demigod Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 44
            },
            "slot": 0,
            "armor": 90,
            "magic": 58,
            "min_magic": 95,
            "price": 1051061
        }
    },
    {
        "id": 985,
        "n": "Shiva Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 90
            },
            "slot": 2,
            "armor": 118,
            "magic": 70,
            "min_magic": 90,
            "price": 709574
        }
    },
    {
        "id": 986,
        "n": "Demigod Robe",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 88
            },
            "slot": 2,
            "armor": 135,
            "magic": 80,
            "min_magic": 95,
            "price": 1971389
        }
    },
    {
        "id": 987,
        "n": "Shiva Robe Bottom",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 54
            },
            "slot": 11,
            "armor": 94,
            "magic": 55,
            "min_magic": 90,
            "price": 443465
        }
    },
    {
        "id": 988,
        "n": "Needle For Robe Bottoms",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 120,
            "sc": 0
        }
    },
    {
        "id": 989,
        "n": "Needle For Robes",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 120,
            "sc": 0
        }
    },
    {
        "id": 990,
        "n": "Thread",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 20
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "price": 228,
            "sc": 99
        }
    },
    {
        "id": 991,
        "n": "Needle For Hats",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 120,
            "sc": 0
        }
    },
    {
        "id": 992,
        "n": "Air Bolt Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 13,
            "min_accuracy": 1,
            "price": 1345,
            "enchant_bonus": -0.3,
            "enchant_id": 998,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 993,
        "n": "Flash Bolt Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 10,
            "min_accuracy": 1,
            "price": 750,
            "enchant_bonus": -0.3,
            "enchant_id": 997,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 994,
        "n": "Earth Bolt Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 15,
            "min_accuracy": 1,
            "price": 1687,
            "enchant_bonus": -0.3,
            "enchant_id": 1000,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 995,
        "n": "Water Bolt Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 17,
            "min_accuracy": 1,
            "price": 2065,
            "enchant_bonus": -0.3,
            "enchant_id": 999,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 996,
        "n": "Fire Bolt Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 19,
            "min_accuracy": 1,
            "price": 2478,
            "enchant_bonus": -0.3,
            "enchant_id": 1001,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 997,
        "n": "Flash Missile Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 20,
            "min_accuracy": 1,
            "price": 1387,
            "enchant_bonus": -0.3,
            "enchant_id": 1002,
            "enchants_from": 993,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 998,
        "n": "Air Missile Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 23,
            "min_accuracy": 1,
            "price": 2489,
            "enchant_bonus": -0.3,
            "enchant_id": 1003,
            "enchants_from": 992,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 999,
        "n": "Water Missile Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 26,
            "min_accuracy": 1,
            "price": 3121,
            "enchant_bonus": -0.3,
            "enchant_id": 1005,
            "enchants_from": 995,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1000,
        "n": "Earth Missile Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 28,
            "min_accuracy": 1,
            "price": 3821,
            "enchant_bonus": -0.3,
            "enchant_id": 1004,
            "enchants_from": 994,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1001,
        "n": "Fire Missile Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 30,
            "min_accuracy": 1,
            "price": 4587,
            "enchant_bonus": -0.3,
            "enchant_id": 1006,
            "enchants_from": 996,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1002,
        "n": "Flash Wave Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 34,
            "min_accuracy": 1,
            "price": 2566,
            "enchant_bonus": -0.3,
            "enchant_id": 1007,
            "enchants_from": 997,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1003,
        "n": "Air Wave Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 38,
            "min_accuracy": 1,
            "price": 4604,
            "enchant_bonus": -0.3,
            "enchant_id": 1008,
            "enchants_from": 998,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1004,
        "n": "Earth Wave Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 42,
            "min_accuracy": 1,
            "price": 5775,
            "enchant_bonus": -0.3,
            "enchant_id": 1009,
            "enchants_from": 1000,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1005,
        "n": "Water Wave Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 46,
            "min_accuracy": 1,
            "price": 7069,
            "enchant_bonus": -0.3,
            "enchant_id": 1010,
            "enchants_from": 999,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1006,
        "n": "Fire Wave Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 50,
            "min_accuracy": 1,
            "price": 8486,
            "enchant_bonus": -0.3,
            "enchant_id": 1011,
            "enchants_from": 1001,
            "sc": 2
        },
        "chances": [
            20,
            40,
            60,
            70
        ]
    },
    {
        "id": 1007,
        "n": "Flash Blast Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 55,
            "min_accuracy": 1,
            "price": 4748,
            "enchants_from": 1002,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1008,
        "n": "Air Blast Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 60,
            "min_accuracy": 1,
            "price": 8519,
            "enchants_from": 1003,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1009,
        "n": "Earth Blast Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 65,
            "min_accuracy": 1,
            "price": 10684,
            "enchants_from": 1004,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1010,
        "n": "Water Blast Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 70,
            "min_accuracy": 1,
            "price": 13077,
            "enchants_from": 1005,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1011,
        "n": "Fire Blast Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 72,
            "min_accuracy": 1,
            "price": 15699,
            "enchants_from": 1006,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1012,
        "n": "Flannel Fabric",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 15
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_magic": 34,
            "price": 3005,
            "sc": 7
        }
    },
    {
        "id": 1013,
        "n": "Jute Fabric",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_magic": 55,
            "price": 4752,
            "sc": 7
        }
    },
    {
        "id": 1014,
        "n": "Silk Fabric",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 16
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_magic": 65,
            "price": 6900,
            "sc": 7
        }
    },
    {
        "id": 1015,
        "n": "Dragon Herb Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 19
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 80,
            "price": 5000,
            "farming_id": 437,
            "sc": 19
        }
    },
    {
        "id": 1016,
        "n": "Mortar And Pestle",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 8,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_alchemy": 1,
            "price": 320,
            "sc": 0
        }
    },
    {
        "id": 1017,
        "n": "Trout With Potatoes",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 10
        },
        "params": {
            "wearable": false,
            "heal": 7,
            "price": 110,
            "sc": 1
        }
    },
    {
        "id": 1018,
        "n": "Lion Fish Soup",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 14,
            "price": 508,
            "sc": 1
        }
    },
    {
        "id": 1019,
        "n": "Egg Of Hope",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 20
        },
        "params": {
            "wearable": false,
            "price": 1,
            "heal": 40,
            "sc": 3
        }
    },
    {
        "id": 1020,
        "n": "Egg Of Courage",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 20
        },
        "params": {
            "wearable": false,
            "boost_accuracy": 0.25,
            "price": 1,
            "sc": 3
        }
    },
    {
        "id": 1021,
        "n": "Egg Of Bravery",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 20
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.25,
            "price": 1,
            "sc": 3
        }
    },
    {
        "id": 1022,
        "n": "Egg Of Wishes",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 20
        },
        "params": {
            "wearable": false,
            "boost_defense": 0.25,
            "price": 1,
            "sc": 3
        }
    },
    {
        "id": 1023,
        "n": "Pineapple Juice",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 14
        },
        "params": {
            "wearable": false,
            "heal": 12,
            "price": 420,
            "sc": 1
        }
    },
    {
        "id": 1024,
        "n": "Root Beer",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 16
        },
        "params": {
            "wearable": false,
            "boost_strength": 0.06,
            "boost_accuracy": -0.02,
            "price": 188,
            "sc": 2
        }
    },
    {
        "id": 1025,
        "n": "Rock Squid Soup",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 20
        },
        "params": {
            "wearable": false,
            "heal": 19,
            "price": 780,
            "sc": 1
        }
    },
    {
        "id": 1026,
        "n": "Lobster Curry",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 20
        },
        "params": {
            "wearable": false,
            "heal": 16,
            "price": 882,
            "sc": 1
        }
    },
    {
        "id": 1027,
        "n": "Salmon Soup",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 20
        },
        "params": {
            "wearable": false,
            "heal": 12,
            "price": 360,
            "sc": 1
        }
    },
    {
        "id": 1028,
        "n": "Hammer Shark Dish",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 21
        },
        "params": {
            "wearable": false,
            "heal": 23,
            "price": 1046,
            "sc": 1
        }
    },
    {
        "id": 1029,
        "n": "Manta Ray Steak",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 21
        },
        "params": {
            "wearable": false,
            "heal": 25,
            "price": 1562,
            "sc": 1
        }
    },
    {
        "id": 1030,
        "n": "Dolphin Sushi",
        "t": 1,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 21
        },
        "params": {
            "wearable": false,
            "heal": 20,
            "price": 880,
            "sc": 1
        }
    },
    {
        "id": 1031,
        "n": "Repeat Quest Permission",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 16
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 7000,
            "sc": 99
        },
        "sources": [
            "Easy Dungeon Reward",
            "Normal Dungeon Reward",
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 1032,
        "n": "Ichor Pants",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 50
            },
            "slot": 11,
            "armor": 155,
            "min_defense": 105,
            "price": 1194325,
            "enchant_id": 971
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1033,
        "n": "2x Experience Potion",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 15
        },
        "params": {
            "wearable": false,
            "price": 449000,
            "boost_accuracy": 0.15,
            "boost_strength": 0.15,
            "boost_defense": 0.15,
            "boost_magic": 0.15,
            "boost_mining": 0.15,
            "boost_cooking": 0.15,
            "boost_fishing": 0.15,
            "boost_woodcutting": 0.15,
            "desc": "Experience lasts for 30 minutes(for all players)",
            "no_present": true,
            "sc": 2
        }
    },
    {
        "id": 1034,
        "n": "Cotton Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 3,
            "price": 240,
            "farming_id": 439,
            "sc": 19
        }
    },
    {
        "id": 1035,
        "n": "Bamboo Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 20,
            "price": 716,
            "farming_id": 440,
            "sc": 19
        }
    },
    {
        "id": 1036,
        "n": "Iron Fishing Rod",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 9,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 159
            },
            "slot": 4,
            "min_fishing": 65,
            "price": 2860,
            "sc": 0
        }
    },
    {
        "id": 1037,
        "n": "Kronos Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 34
            },
            "slot": 3,
            "armor": 135,
            "min_defense": 95,
            "price": 677370,
            "enchant_id": 1040
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1038,
        "n": "Ichor Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 35
            },
            "slot": 3,
            "armor": 175,
            "min_defense": 105,
            "price": 1341324,
            "enchant_id": 1039
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1039,
        "n": "Enchanted Ichor Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 21
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 36
            },
            "slot": 3,
            "armor": 235,
            "min_defense": 105,
            "price": 2481449,
            "enchants_from": 1038
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1040,
        "n": "Enchanted Kronos Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 37
            },
            "slot": 3,
            "armor": 195,
            "min_defense": 95,
            "price": 1253135,
            "enchants_from": 1037
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1041,
        "n": "Party Hat (Blue)",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 50
            },
            "slot": 0,
            "armor": 20,
            "aim": 20,
            "power": 20,
            "min_defense": 1,
            "price": 1,
            "desc": "1st anniversary"
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1042,
        "n": "Party Hat (Red)",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 49
            },
            "slot": 0,
            "armor": 50,
            "aim": 30,
            "power": 20,
            "min_defense": 1,
            "price": 1,
            "desc": "1st anniversary"
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1043,
        "n": "Donator Wand",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 54
            },
            "slot": 4,
            "aim": 9,
            "power": 4,
            "magic": 12,
            "min_magic": 10,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 10000,
            "enchant_id": 1044,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1044,
        "n": "Donator Wand +1",
        "t": 5,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 55
            },
            "slot": 4,
            "aim": 12,
            "power": 7,
            "magic": 16,
            "min_magic": 15,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 20000,
            "enchant_id": 1045,
            "enchants_from": 1043,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1045,
        "n": "Angelic Wand",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 161
            },
            "slot": 4,
            "aim": 18,
            "power": 17,
            "magic": 25,
            "min_magic": 25,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 30000,
            "enchant_id": 1046,
            "enchants_from": 1044,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1046,
        "n": "Serpent Wand",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 162
            },
            "slot": 4,
            "aim": 24,
            "power": 18,
            "magic": 35,
            "min_magic": 35,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 40000,
            "enchant_id": 1047,
            "enchants_from": 1045,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1047,
        "n": "Gorgon Wand",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 163
            },
            "slot": 4,
            "aim": 27,
            "power": 23,
            "magic": 40,
            "min_magic": 40,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 60000,
            "enchant_id": 1048,
            "enchants_from": 1046,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1048,
        "n": "Legendary Wand",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 164
            },
            "slot": 4,
            "aim": 36,
            "power": 38,
            "magic": 55,
            "min_accuracy": 1,
            "min_magic": 45,
            "price": 90000,
            "enchants_from": 1047,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1049,
        "n": "Misery Staff",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 165
            },
            "slot": 4,
            "aim": 60,
            "power": 60,
            "magic": 50,
            "cooldown": 0.3,
            "min_magic": 50,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 150000,
            "enchant_id": 1050,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1050,
        "n": "Ancient Staff",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 166
            },
            "slot": 4,
            "aim": 62,
            "power": 62,
            "magic": 60,
            "cooldown": 0.4,
            "min_magic": 60,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 250000,
            "enchant_id": 1051,
            "enchants_from": 1049,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1051,
        "n": "Divine Staff",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 167
            },
            "slot": 4,
            "aim": 69,
            "power": 69,
            "magic": 75,
            "cooldown": 0.5,
            "min_magic": 70,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 400000,
            "enchant_id": 1052,
            "enchants_from": 1050,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1052,
        "n": "Demonic Staff",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 17
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 168
            },
            "slot": 4,
            "aim": 75,
            "power": 75,
            "magic": 85,
            "cooldown": 0.55,
            "min_accuracy": 1,
            "min_magic": 80,
            "price": 950000,
            "enchants_from": 1051,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1053,
        "n": "Resurrection Scepter",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 169
            },
            "slot": 4,
            "aim": 45,
            "power": 60,
            "magic": 80,
            "min_magic": 50,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 150000,
            "enchant_id": 1054,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1054,
        "n": "Unicorn Scepter",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 170
            },
            "slot": 4,
            "aim": 55,
            "power": 67,
            "magic": 95,
            "min_magic": 60,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 250000,
            "enchant_id": 1055,
            "enchants_from": 1053,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1055,
        "n": "Kundun Scepter",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 171
            },
            "slot": 4,
            "aim": 60,
            "power": 77,
            "magic": 120,
            "min_magic": 70,
            "min_accuracy": 1,
            "enchant_bonus": 0.3,
            "price": 400000,
            "enchant_id": 1056,
            "enchants_from": 1054,
            "sc": 2
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1056,
        "n": "Imperial Scepter",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 172
            },
            "slot": 4,
            "aim": 70,
            "power": 90,
            "magic": 140,
            "min_accuracy": 1,
            "min_magic": 80,
            "price": 950000,
            "enchants_from": 1055,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1057,
        "n": "Yellow Key",
        "t": 5,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 16,
            "min_accuracy": 1,
            "price": 10000,
            "sc": 3
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1058,
        "n": "Blue Key",
        "t": 5,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 17,
            "min_accuracy": 1,
            "price": 10000,
            "sc": 3
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1059,
        "n": "Red Key",
        "t": 5,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 18,
            "min_accuracy": 1,
            "price": 10000,
            "sc": 3
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1060,
        "n": "Lock Pick",
        "t": 5,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_accuracy": 1,
            "price": 300000,
            "sc": 0
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1061,
        "n": "Enchanted Kronos Blade",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 173
            },
            "slot": 4,
            "aim": 280,
            "power": 330,
            "min_accuracy": 95,
            "price": 2293250,
            "enchants_from": 909,
            "sc": 0
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1062,
        "n": "Nephilim Slave [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 5,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 100000,
            "pet": 54
        },
        "sources": [
            "Easy Dungeon Reward",
            "Normal Dungeon Reward",
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 1063,
        "n": "Nephilim Protector [Legendary]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 60,
            "power": 50,
            "armor": 70,
            "magic": 25,
            "price": 2401000,
            "pet": 55
        }
    },
    {
        "id": 1064,
        "n": "Flame Phoenix [Rare]",
        "t": 7,
        "img": {
            "sheet": "21",
            "x": 8,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 20,
            "armor": 70,
            "magic": 70,
            "price": 1117465,
            "pet": 56
        }
    },
    {
        "id": 1065,
        "n": "Amethyst Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 19
            },
            "slot": 6,
            "armor": 57,
            "speed": 28,
            "min_defense": 80,
            "price": 174960
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1066,
        "n": "Juggernaut boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 77,
            "power": 20,
            "speed": 20,
            "min_defense": 95,
            "price": 348768
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1067,
        "n": "Ichor Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 100,
            "aim": 20,
            "speed": 28,
            "min_defense": 105,
            "price": 606614
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1068,
        "n": "7 Souls Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 120,
            "aim": 15,
            "power": 10,
            "speed": 31,
            "min_defense": 110,
            "price": 2040775
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1069,
        "n": "Wizard Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 9
            },
            "slot": 6,
            "armor": 4,
            "magic": 3,
            "speed": 5,
            "min_magic": 1,
            "price": 1560
        }
    },
    {
        "id": 1070,
        "n": "Witch Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 7
            },
            "slot": 6,
            "armor": 10,
            "magic": 8,
            "speed": 5,
            "min_magic": 15,
            "price": 5358
        }
    },
    {
        "id": 1071,
        "n": "Veles Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 1
            },
            "slot": 6,
            "armor": 12,
            "magic": 10,
            "speed": 5,
            "min_magic": 25,
            "price": 11524
        }
    },
    {
        "id": 1072,
        "n": "Battlemage Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 11
            },
            "slot": 6,
            "armor": 17,
            "magic": 15,
            "speed": 10,
            "min_magic": 35,
            "price": 28821
        }
    },
    {
        "id": 1073,
        "n": "Heka Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 10
            },
            "slot": 6,
            "armor": 22,
            "magic": 19,
            "speed": 10,
            "min_magic": 45,
            "price": 34723
        }
    },
    {
        "id": 1074,
        "n": "Merlin Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 19
            },
            "slot": 6,
            "armor": 25,
            "magic": 22,
            "speed": 15,
            "min_magic": 55,
            "price": 63690
        }
    },
    {
        "id": 1075,
        "n": "Enki Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 5
            },
            "slot": 6,
            "armor": 30,
            "magic": 27,
            "speed": 20,
            "min_magic": 65,
            "price": 89454
        }
    },
    {
        "id": 1076,
        "n": "Gandalf Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 3
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 36,
            "magic": 33,
            "speed": 20,
            "min_magic": 75,
            "price": 158550
        }
    },
    {
        "id": 1077,
        "n": "Odin Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 44,
            "magic": 38,
            "speed": 25,
            "min_magic": 85,
            "price": 212320
        }
    },
    {
        "id": 1078,
        "n": "Shiva Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 52,
            "magic": 42,
            "speed": 25,
            "min_magic": 90,
            "price": 380584
        }
    },
    {
        "id": 1079,
        "n": "Demigod Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 0
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 60,
            "magic": 50,
            "speed": 25,
            "min_magic": 95,
            "price": 971688
        }
    },
    {
        "id": 1080,
        "n": "Diamond Boots",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 2
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 6
            },
            "slot": 6,
            "armor": 44,
            "power": 10,
            "aim": 10,
            "speed": 27,
            "min_defense": 70,
            "price": 121500
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1081,
        "n": "Potion Of Oblivion",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 8,
            "y": 16
        },
        "params": {
            "wearable": false,
            "price": 50000,
            "desc": "Removes 1 skill level",
            "sc": 2
        }
    },
    {
        "id": 1082,
        "n": "Donator Boots +6",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 14
            },
            "slot": 6,
            "armor": 72,
            "speed": 42,
            "power": 5,
            "min_defense": 60,
            "price": 240000,
            "enchant_bonus": 0.3,
            "enchant_id": 1083,
            "enchants_from": 580
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 1083,
        "n": "Donator Boots +7",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "boots": 14
            },
            "slot": 6,
            "armor": 85,
            "speed": 45,
            "aim": 5,
            "power": 8,
            "min_defense": 70,
            "price": 360000,
            "enchants_from": 1082
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1084,
        "n": "Needle For Boots",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 120,
            "sc": 0
        }
    },
    {
        "id": 1085,
        "n": "Enchanted Silver Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 10,
            "price": 8325,
            "armor": 13,
            "enchants_from": 48
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1086,
        "n": "Enchanted Silver Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 2
        },
        "params": {
            "wearable": true,
            "min_health": 12,
            "slot": 8,
            "price": 12765,
            "magic": 13,
            "enchants_from": 803
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1087,
        "n": "Enchanted Silver Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "min_health": 14,
            "slot": 8,
            "price": 19332,
            "power": 14,
            "aim": 14,
            "enchants_from": 804
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1088,
        "n": "Enchanted Silver Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 16,
            "price": 33115,
            "magic": 17,
            "armor": 17,
            "aim": 17,
            "power": 17,
            "enchants_from": 300
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1089,
        "n": "Enchanted Golden Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": true,
            "min_health": 20,
            "slot": 8,
            "price": 13320,
            "armor": 17,
            "enchants_from": 805
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1090,
        "n": "Enchanted Golden Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 22,
            "price": 17760,
            "magic": 17,
            "enchants_from": 298
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1091,
        "n": "Enchanted Golden Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 9
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 24,
            "price": 25160,
            "aim": 18,
            "power": 18,
            "enchants_from": 131
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1092,
        "n": "Enchanted Golden Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 9
        },
        "params": {
            "wearable": true,
            "min_health": 26,
            "slot": 8,
            "price": 38110,
            "aim": 21,
            "power": 21,
            "magic": 21,
            "armor": 21,
            "enchants_from": 806
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1093,
        "n": "Enchanted White Gold Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 9
        },
        "params": {
            "wearable": true,
            "min_health": 30,
            "slot": 8,
            "price": 21460,
            "armor": 25,
            "enchants_from": 807
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1094,
        "n": "Enchanted White Gold Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 9
        },
        "params": {
            "wearable": true,
            "min_health": 33,
            "slot": 8,
            "price": 30340,
            "magic": 25,
            "enchants_from": 808
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1095,
        "n": "Enchanted White Gold Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 9
        },
        "params": {
            "wearable": true,
            "min_health": 36,
            "slot": 8,
            "price": 45140,
            "power": 28,
            "aim": 28,
            "enchants_from": 809
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1096,
        "n": "Enchanted White Gold Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 10
        },
        "params": {
            "wearable": true,
            "min_health": 40,
            "slot": 8,
            "price": 71040,
            "armor": 34,
            "power": 34,
            "aim": 34,
            "magic": 34,
            "enchants_from": 810
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1097,
        "n": "Enchanted White Gold Amethyst Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 45,
            "price": 105080,
            "armor": 39,
            "magic": 39,
            "enchants_from": 486
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1098,
        "n": "Enchanted Platinum Sapphire Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 50,
            "price": 47360,
            "armor": 42,
            "enchants_from": 375
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1099,
        "n": "Enchanted Platinum Emerald Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 55,
            "price": 65120,
            "magic": 42,
            "enchants_from": 376
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1100,
        "n": "Enchanted Platinum Ruby Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 60,
            "price": 94720,
            "aim": 48,
            "power": 48,
            "enchants_from": 377
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1101,
        "n": "Enchanted Platinum Diamond Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 10
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 65,
            "price": 146520,
            "magic": 42,
            "armor": 59,
            "aim": 59,
            "power": 59,
            "enchants_from": 378
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1102,
        "n": "Enchanted Platinum Amethyst Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 10
        },
        "params": {
            "wearable": true,
            "min_health": 70,
            "slot": 8,
            "price": 374255,
            "armor": 70,
            "magic": 70,
            "enchants_from": 811
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1103,
        "n": "Enchanted Platinum Black Opal Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 8,
            "min_health": 75,
            "price": 393680,
            "magic": 49,
            "armor": 64,
            "aim": 64,
            "power": 64,
            "enchants_from": 391
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1104,
        "n": "Enchanted Platinum Jadeite Ring",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 10
        },
        "params": {
            "wearable": true,
            "min_health": 80,
            "slot": 8,
            "price": 740000,
            "power": 85,
            "aim": 85,
            "armor": 85,
            "magic": 56,
            "enchants_from": 812
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1105,
        "n": "Enchanted Silver Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 10,
            "price": 10175,
            "armor": 14,
            "enchants_from": 49
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1106,
        "n": "Enchanted Silver Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 12,
            "price": 14165,
            "magic": 14,
            "enchants_from": 299
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1107,
        "n": "Silver Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 22015,
            "min_health": 14,
            "power": 15,
            "aim": 15,
            "enchants_from": 813
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1108,
        "n": "Silver Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 34965,
            "min_health": 16,
            "armor": 18,
            "power": 18,
            "magic": 18,
            "aim": 18,
            "enchants_from": 814
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1109,
        "n": "Enchanted Golden Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 20720,
            "min_health": 20,
            "armor": 18,
            "enchants_from": 815
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1110,
        "n": "Enchanted Golden Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 25160,
            "min_health": 22,
            "magic": 18,
            "enchants_from": 816
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1111,
        "n": "Enchanted Golden Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 11
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 24,
            "price": 32560,
            "aim": 20,
            "power": 20,
            "enchants_from": 130
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1112,
        "n": "Enchanted Golden Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 26,
            "price": 45510,
            "magic": 22,
            "armor": 22,
            "aim": 22,
            "power": 22,
            "enchants_from": 301
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1113,
        "n": "Enchanted White Gold Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 52540,
            "min_health": 30,
            "armor": 32,
            "enchants_from": 818
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1114,
        "n": "Enchanted White Gold Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 65860,
            "min_health": 33,
            "magic": 32,
            "enchants_from": 819
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1115,
        "n": "Enchanted White Gold Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 88060,
            "min_health": 36,
            "power": 36,
            "aim": 36,
            "enchants_from": 820
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1116,
        "n": "Enchanted White Gold Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 126910,
            "min_health": 40,
            "power": 45,
            "aim": 45,
            "magic": 45,
            "armor": 45,
            "enchants_from": 821
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1117,
        "n": "Enchanted White Gold Amethyst Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 45,
            "price": 165760,
            "armor": 53,
            "magic": 53,
            "enchants_from": 489
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1118,
        "n": "Enchanted Platinum Sapphire Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 50,
            "price": 82880,
            "armor": 56,
            "enchants_from": 380
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1119,
        "n": "Enchanted Platinum Emerald Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 55,
            "price": 109520,
            "magic": 56,
            "enchants_from": 382
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1120,
        "n": "Enchanted Platinum Ruby Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 60,
            "price": 153920,
            "aim": 64,
            "power": 64,
            "enchants_from": 381
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1121,
        "n": "Enchanted Platinum Diamond Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 65,
            "price": 231620,
            "magic": 63,
            "armor": 81,
            "aim": 81,
            "power": 81,
            "enchants_from": 395
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1122,
        "n": "Enchanted Platinum Amethyst Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 400062,
            "min_health": 70,
            "magic": 91,
            "armor": 91,
            "enchants_from": 822
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1123,
        "n": "Enchanted Platinum Black Opal Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 3,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 681818,
            "min_health": 75,
            "power": 91,
            "aim": 91,
            "magic": 65,
            "armor": 91,
            "enchants_from": 823
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1124,
        "n": "Enchanted Platinum Jadeite Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 4,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "price": 1082250,
            "min_health": 80,
            "magic": 75,
            "armor": 101,
            "aim": 101,
            "power": 101,
            "enchants_from": 392
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1125,
        "n": "Low Jewelry Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3000,
            "sc": 5
        }
    },
    {
        "id": 1126,
        "n": "Medium Jewelry Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 50000,
            "sc": 5
        }
    },
    {
        "id": 1127,
        "n": "High Jewelry Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 150000,
            "sc": 5
        }
    },
    {
        "id": 1128,
        "n": "Superior Jewelry Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 300000,
            "sc": 5
        }
    },
    {
        "id": 1129,
        "n": "Tombstone",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 462,
            "sc": 7
        }
    },
    {
        "id": 1130,
        "n": "Tombstone",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 463,
            "sc": 7
        }
    },
    {
        "id": 1131,
        "n": "Reaper Memorial",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 464,
            "sc": 7
        }
    },
    {
        "id": 1132,
        "n": "Gargoyle Statue",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 465,
            "sc": 7
        }
    },
    {
        "id": 1133,
        "n": "Gargoyle Statue",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 466,
            "sc": 7
        }
    },
    {
        "id": 1134,
        "n": "Gargoyle Statue",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 467,
            "sc": 7
        }
    },
    {
        "id": 1135,
        "n": "Small Tombstone",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 468,
            "sc": 7
        }
    },
    {
        "id": 1136,
        "n": "Small Tombstone",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 469,
            "sc": 7
        }
    },
    {
        "id": 1137,
        "n": "Small Tombstone",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 1,
            "carpentry_type": "1",
            "carpentry_id": 470,
            "sc": 7
        }
    },
    {
        "id": 1138,
        "n": "Reaper Soul",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "price": 1,
            "desc": "Reaper has soul also",
            "sc": 99
        }
    },
    {
        "id": 1139,
        "n": "Angry Witch [Legendary]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 6,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "magic": 45,
            "price": 1,
            "pet": 57
        }
    },
    {
        "id": 1140,
        "n": "Unicorn Blood Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 5,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 1,
            "price": 1,
            "armor": 22,
            "accuracy": 20,
            "power": 22,
            "magic": 22
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1141,
        "n": "Cursed Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 7,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 30,
            "price": 1,
            "accuracy": 31,
            "power": 31
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1142,
        "n": "Resurrection Necklace",
        "t": 2,
        "img": {
            "sheet": "14",
            "x": 6,
            "y": 13
        },
        "params": {
            "wearable": true,
            "slot": 7,
            "min_health": 45,
            "price": 1,
            "armor": 50,
            "power": 25
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1143,
        "n": "Guild Deed",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": false,
            "price": 100000,
            "no_present": true,
            "desc": "Can be used to create a guild or visit one.",
            "sc": 7
        }
    },
    {
        "id": 1144,
        "n": "Candy Cane",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 175
            },
            "slot": 4,
            "aim": 20,
            "magic": 25,
            "min_magic": 15,
            "price": 1,
            "sc": 4
        }
    },
    {
        "id": 1145,
        "n": "Candy Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 174
            },
            "slot": 4,
            "aim": 25,
            "power": 25,
            "min_accuracy": 15,
            "price": 1,
            "sc": 4
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1146,
        "n": "Candy Shield",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 38
            },
            "slot": 3,
            "armor": 25,
            "min_defense": 15,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1147,
        "n": "Rudolph [Legendary]",
        "t": 7,
        "img": {
            "sheet": "41",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "speed": 30,
            "aim": 10,
            "armor": 25,
            "price": 1,
            "pet": 58
        }
    },
    {
        "id": 1148,
        "n": "Santa's Bag",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 10,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 53
            },
            "slot": 3,
            "magic_slots": 5,
            "armor": 75,
            "min_magic": 85,
            "price": 1,
            "sc": 1
        }
    },
    {
        "id": 1149,
        "n": "Legendary Present",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 24
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "price": 1,
            "desc": "Contains a random item with value up to 1,500,000 coins",
            "no_present": true,
            "sc": 16
        }
    },
    {
        "id": 1150,
        "n": "Piglet [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 7,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 25,
            "speed": -10,
            "armor": 35,
            "price": 200000,
            "pet": 59
        }
    },
    {
        "id": 1151,
        "n": "Pig [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 8,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 45,
            "speed": -15,
            "armor": 40,
            "price": 600000,
            "pet": 60
        }
    },
    {
        "id": 1152,
        "n": "Firecracker",
        "t": 6,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 10,
            "min_magic": 1,
            "magic": 26,
            "price": 1
        }
    },
    {
        "id": 1153,
        "n": "Rose Pouch",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 8,
            "y": 4
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 55
            },
            "slot": 3,
            "magic_slots": 5,
            "cooldown": 0.03,
            "aim": 40,
            "min_magic": 85,
            "price": 1,
            "sc": 1
        }
    },
    {
        "id": 1154,
        "n": "Rose Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 21
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 1,
            "price": 1,
            "farming_id": 477,
            "sc": 19
        }
    },
    {
        "id": 1155,
        "n": "Armored Pig [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 9,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 50,
            "speed": -20,
            "armor": 70,
            "price": 950000,
            "pet": 61
        }
    },
    {
        "id": 1156,
        "n": "Rose Sword",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 2,
                "weapon": 176
            },
            "slot": 4,
            "aim": 25,
            "power": 45,
            "min_accuracy": 15,
            "price": 1,
            "sc": 4
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1157,
        "n": "Rose",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 18
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 177
            },
            "slot": 4,
            "aim": 25,
            "power": 25,
            "price": 1,
            "sc": 4
        }
    },
    {
        "id": 1158,
        "n": "Heart Shaped Candy",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": false,
            "price": 1,
            "heal": 30,
            "sc": 3
        }
    },
    {
        "id": 1159,
        "n": "Needle",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 3
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 120,
            "sc": 0
        }
    },
    {
        "id": 1160,
        "n": "Rare Present",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 25
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "price": 1,
            "desc": "Contains a random rare item from an event",
            "no_present": true,
            "sc": 16
        }
    },
    {
        "id": 1161,
        "n": "Firelord Helmet +12",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 51
            },
            "slot": 0,
            "armor": 155,
            "min_defense": 105,
            "price": 1425124,
            "enchants_from": 959
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1162,
        "n": "Firelord Pants +12",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "pants": 61
            },
            "slot": 11,
            "armor": 205,
            "min_defense": 105,
            "price": 1435322,
            "enchants_from": 955
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1163,
        "n": "Firelord Platemail +12",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "body": 92
            },
            "slot": 2,
            "armor": 262,
            "min_defense": 105,
            "price": 1762882,
            "enchants_from": 957
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1164,
        "n": "Firelord Shield +12",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 39
            },
            "slot": 3,
            "armor": 240,
            "min_defense": 105,
            "price": 1423222,
            "enchants_from": 961
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1165,
        "n": "Flag of Estonia",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 100000,
            "carpentry_type": "1",
            "carpentry_id": 478,
            "no_present": true,
            "sc": 7
        }
    },
    {
        "id": 1166,
        "n": "Gray Werewolf [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "pet": 62,
            "aim": 17,
            "power": 25,
            "armor": 25,
            "magic": 25,
            "price": 90220
        }
    },
    {
        "id": 1167,
        "n": "Warg [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "pet": 63,
            "aim": 19,
            "power": 28,
            "armor": 28,
            "magic": 28,
            "price": 103753
        }
    },
    {
        "id": 1168,
        "n": "Swamp Guru [Common]",
        "t": 7,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 23
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "pet": 64,
            "aim": 14,
            "power": 17,
            "armor": 21,
            "magic": 23,
            "price": 82586,
            "no_present": true
        }
    },
    {
        "id": 1169,
        "n": "Ghost Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 962404,
            "aim": 40,
            "armor": 66,
            "magic": 52,
            "pet": 65,
            "no_present": true
        }
    },
    {
        "id": 1170,
        "n": "Kobalos [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 11,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 27000,
            "no_present": true,
            "pet": 66
        }
    },
    {
        "id": 1171,
        "n": "Leprechaun [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 10,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 40,
            "armor": 40,
            "price": 406250,
            "pet": 67
        }
    },
    {
        "id": 1172,
        "n": "3-leaf clover",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 23
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 5000,
            "sc": 13
        }
    },
    {
        "id": 1173,
        "n": "4-leaf clover",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 23
        },
        "params": {
            "wearable": true,
            "slot": 15,
            "price": 25000,
            "sc": 13
        }
    },
    {
        "id": 1174,
        "n": "Leprechaun Hat",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 22
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 52
            },
            "slot": 0,
            "armor": 25,
            "min_defense": 1,
            "price": 1
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1175,
        "n": "Lion [Common]",
        "t": 7,
        "img": {
            "sheet": "41",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 15,
            "armor": 15,
            "price": 92700,
            "pet": 68
        }
    },
    {
        "id": 1176,
        "n": "Desert Scorpion [Common]",
        "t": 7,
        "img": {
            "sheet": "20",
            "x": 5,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 4,
            "armor": 2,
            "aim": 10,
            "speed": -5,
            "price": 88700,
            "pet": 69
        }
    },
    {
        "id": 1177,
        "n": "Deathstalker Scorpion [Common]",
        "t": 7,
        "img": {
            "sheet": "20",
            "x": 2,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 10,
            "armor": 5,
            "aim": 25,
            "speed": -8,
            "price": 115310,
            "pet": 70
        }
    },
    {
        "id": 1178,
        "n": "Emperor Scorpion [Rare]",
        "t": 7,
        "img": {
            "sheet": "20",
            "x": 1,
            "y": 12
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "power": 15,
            "armor": 10,
            "aim": 35,
            "speed": -8,
            "price": 394138,
            "pet": 71
        }
    },
    {
        "id": 1179,
        "n": "Brown Werewolf [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 4,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "pet": 72,
            "aim": 17,
            "power": 25,
            "armor": 25,
            "magic": 25,
            "price": 90220
        }
    },
    {
        "id": 1180,
        "n": "Dark Pegasus [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 6,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 3480361,
            "aim": 40,
            "power": 17,
            "armor": 98,
            "magic": 98,
            "speed": 9,
            "pet": 73,
            "no_present": true
        }
    },
    {
        "id": 1181,
        "n": "Sleipnir [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 5209164,
            "aim": 68,
            "power": 68,
            "armor": 68,
            "speed": 34,
            "pet": 74,
            "no_present": true
        }
    },
    {
        "id": 1182,
        "n": "HellKyte [Legendary]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2244109,
            "aim": 15,
            "power": 38,
            "armor": 11,
            "magic": 23,
            "pet": 75,
            "no_present": true
        }
    },
    {
        "id": 1183,
        "n": "Ifrit [Legendary]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 4510142,
            "aim": 23,
            "power": 57,
            "pet": 76,
            "no_present": true
        }
    },
    {
        "id": 1184,
        "n": "Death Knight [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2980383,
            "aim": 40,
            "power": 72,
            "pet": 77,
            "no_present": true
        }
    },
    {
        "id": 1185,
        "n": "Shiva [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 4236349,
            "aim": 69,
            "power": 58,
            "armor": 98,
            "magic": 58,
            "pet": 78,
            "no_present": true
        }
    },
    {
        "id": 1186,
        "n": "Fire Overlord [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 9,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 4023517,
            "aim": 53,
            "power": 94,
            "pet": 79,
            "no_present": true
        }
    },
    {
        "id": 1187,
        "n": "Lionhead Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 6,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1819147,
            "aim": 66,
            "power": 46,
            "armor": 66,
            "magic": 14,
            "pet": 80,
            "no_present": true
        }
    },
    {
        "id": 1188,
        "n": "Horntail [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1122545,
            "aim": 55,
            "armor": 60,
            "magic": 66,
            "pet": 81,
            "no_present": true
        }
    },
    {
        "id": 1189,
        "n": "Rael [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 7401510,
            "aim": 113,
            "power": 79,
            "armor": 113,
            "magic": 101,
            "pet": 82,
            "no_present": true
        }
    },
    {
        "id": 1190,
        "n": "Cursed Archangel [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 5482600,
            "aim": 86,
            "power": 60,
            "armor": 86,
            "magic": 77,
            "pet": 83,
            "no_present": true
        }
    },
    {
        "id": 1191,
        "n": "Jophiel the archangel [Rare]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 3313312,
            "aim": 63,
            "power": 63,
            "armor": 63,
            "magic": 56,
            "pet": 84,
            "no_present": true
        }
    },
    {
        "id": 1192,
        "n": "Michael the archangel [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2881141,
            "aim": 58,
            "power": 58,
            "armor": 58,
            "magic": 52,
            "pet": 85,
            "no_present": true
        }
    },
    {
        "id": 1193,
        "n": "Obsidian Dragon [Legendary]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2927812,
            "aim": 83,
            "power": 83,
            "armor": 90,
            "pet": 86,
            "no_present": true
        }
    },
    {
        "id": 1194,
        "n": "Ancient Wyvern [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 372157,
            "armor": 43,
            "magic": 52,
            "pet": 87,
            "no_present": true
        }
    },
    {
        "id": 1195,
        "n": "Hydra [Rare]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 427981,
            "armor": 47,
            "magic": 56,
            "pet": 88,
            "no_present": true
        }
    },
    {
        "id": 1196,
        "n": "Wildfire Steed [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 3858640,
            "aim": 52,
            "poweer": 52,
            "armor": 52,
            "speed": 26,
            "pet": 89,
            "no_present": true
        }
    },
    {
        "id": 1197,
        "n": "Giant Troll [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 164800,
            "power": 25,
            "armor": 15,
            "pet": 90,
            "no_present": true
        }
    },
    {
        "id": 1198,
        "n": "Manticore [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 9,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 675730,
            "aim": 40,
            "power": 26,
            "armor": 20,
            "speed": 12,
            "pet": 91,
            "no_present": true
        }
    },
    {
        "id": 1199,
        "n": "Fire Elemental [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2905084,
            "aim": 17,
            "power": 43,
            "pet": 92,
            "no_present": true
        }
    },
    {
        "id": 1200,
        "n": "Rathalos [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 373510,
            "power": 56,
            "armor": 56,
            "pet": 93,
            "no_present": true
        }
    },
    {
        "id": 1201,
        "n": "Saint Dragon [Legendary]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1530660,
            "aim": 71,
            "power": 75,
            "armor": 64,
            "magic": 19,
            "pet": 94,
            "no_present": true
        }
    },
    {
        "id": 1202,
        "n": "Ancient Ironbelly [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1515436,
            "aim": 71,
            "armor": 79,
            "magic": 86,
            "pet": 95,
            "no_present": true
        }
    },
    {
        "id": 1203,
        "n": "Archsky Dragon [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2002623,
            "aim": 68,
            "power": 98,
            "armor": 68,
            "pet": 96,
            "no_present": true
        }
    },
    {
        "id": 1204,
        "n": "Flame Beholder [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1662303,
            "aim": 12,
            "power": 29,
            "armor": 9,
            "magic": 17,
            "pet": 97,
            "no_present": true
        }
    },
    {
        "id": 1205,
        "n": "Efreet Sultan [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2905084,
            "aim": 17,
            "power": 43,
            "pet": 98,
            "no_present": true
        }
    },
    {
        "id": 1206,
        "n": "Spiked Emerald Wyvern [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 387946,
            "power": 14,
            "armor": 49,
            "magic": 35,
            "pet": 99,
            "no_present": true
        }
    },
    {
        "id": 1207,
        "n": "Spiked Ruby Wyvern [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 446138,
            "power": 16,
            "armor": 53,
            "magic": 38,
            "pet": 100,
            "no_present": true
        }
    },
    {
        "id": 1208,
        "n": "Magma Wyvern [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 324792,
            "power": 17,
            "armor": 52,
            "magic": 35,
            "pet": 101,
            "no_present": true
        }
    },
    {
        "id": 1209,
        "n": "Swamp Wyvern [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 373510,
            "armor": 56,
            "magic": 56,
            "pet": 102,
            "no_present": true
        }
    },
    {
        "id": 1210,
        "n": "Naga [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 137500,
            "aim": 25,
            "armor": 25,
            "pet": 103,
            "no_present": true
        }
    },
    {
        "id": 1211,
        "n": "Gorgon [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 438955,
            "aim": 47,
            "armor": 47,
            "pet": 104,
            "no_present": true
        }
    },
    {
        "id": 1212,
        "n": "Rubysoul Dragon [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1530660,
            "aim": 71,
            "power": 30,
            "armor": 79,
            "magic": 68,
            "pet": 105,
            "no_present": true
        }
    },
    {
        "id": 1213,
        "n": "Crystal Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1133822,
            "aim": 55,
            "power": 23,
            "armor": 60,
            "magic": 52,
            "pet": 106,
            "no_present": true
        }
    },
    {
        "id": 1214,
        "n": "Undead Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2168750,
            "aim": 63,
            "power": 63,
            "armor": 69,
            "pet": 107,
            "no_present": true
        }
    },
    {
        "id": 1215,
        "n": "Beholder Worm [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 534976,
            "armor": 56,
            "magic": 68,
            "pet": 108,
            "no_present": true
        }
    },
    {
        "id": 1216,
        "n": "Royal Horse [Rare]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 9,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 845986,
            "aim": 19,
            "armor": 19,
            "speed": 10,
            "pet": 109,
            "no_present": true
        }
    },
    {
        "id": 1217,
        "n": "Lava Pegasus [Rare]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 4002415,
            "aim": 44,
            "power": 19,
            "armor": 106,
            "magic": 106,
            "speed": 9,
            "pet": 110,
            "no_present": true
        }
    },
    {
        "id": 1218,
        "n": "Nightmare Pegasus [Legendary]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 5003019,
            "aim": 53,
            "power": 23,
            "armor": 128,
            "magic": 128,
            "speed": 11,
            "pet": 111,
            "no_present": true
        }
    },
    {
        "id": 1219,
        "n": "Sun Pegasus [Legendary]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 8,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 3391925,
            "aim": 62,
            "power": 5,
            "armor": 58,
            "magic": 5,
            "speed": 25,
            "pet": 112,
            "no_present": true
        }
    },
    {
        "id": 1220,
        "n": "Flaming Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1483425,
            "aim": 52,
            "power": 75,
            "armor": 52,
            "pet": 113,
            "no_present": true
        }
    },
    {
        "id": 1221,
        "n": "Lava Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1830425,
            "aim": 66,
            "power": 69,
            "armor": 66,
            "pet": 114,
            "no_present": true
        }
    },
    {
        "id": 1222,
        "n": "White Belly Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1472147,
            "aim": 52,
            "power": 17,
            "armor": 63,
            "magic": 52,
            "pet": 115,
            "no_present": true
        }
    },
    {
        "id": 1223,
        "n": "Underworld Dragon [Legendary]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2471073,
            "aim": 86,
            "power": 90,
            "armor": 86,
            "pet": 116,
            "no_present": true
        }
    },
    {
        "id": 1224,
        "n": "Fire Heart Dragon [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1145100,
            "aim": 55,
            "power": 81,
            "armor": 49,
            "pet": 117,
            "no_present": true
        }
    },
    {
        "id": 1225,
        "n": "Dragonite [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 8,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1133822,
            "aim": 55,
            "power": 58,
            "armor": 49,
            "magic": 14,
            "pet": 118,
            "no_present": true
        }
    },
    {
        "id": 1226,
        "n": "Ice Beholder [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 419523,
            "armor": 26,
            "magic": 52,
            "pet": 119,
            "no_present": true
        }
    },
    {
        "id": 1227,
        "n": "Cloudcaller [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 5,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 3886400,
            "aim": 69,
            "armor": 60,
            "speed": 26,
            "pet": 120,
            "no_present": true
        }
    },
    {
        "id": 1228,
        "n": "Centaur [Rare]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 2,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 128460,
            "aim": 10,
            "speed": 5,
            "pet": 121,
            "no_present": true
        }
    },
    {
        "id": 1229,
        "n": "Demon [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 124503,
            "armor": 65,
            "pet": 122,
            "no_present": true
        }
    },
    {
        "id": 1230,
        "n": "Dark Guru [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "pet": 123,
            "aim": 14,
            "power": 17,
            "armor": 22,
            "magic": 23,
            "price": 82586,
            "no_present": true
        }
    },
    {
        "id": 1231,
        "n": "Shadow Werewolf [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 100000,
            "pet": 124,
            "no_present": true
        }
    },
    {
        "id": 1232,
        "n": "Raguel the archangel [Legendary]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 1,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 4141640,
            "aim": 75,
            "power": 75,
            "armor": 75,
            "magic": 68,
            "pet": 125,
            "no_present": true
        }
    },
    {
        "id": 1233,
        "n": "Winged Centaur [Rare]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 0,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 397085,
            "aim": 40,
            "power": 29,
            "armor": 29,
            "speed": 3,
            "pet": 126,
            "no_present": true
        }
    },
    {
        "id": 1234,
        "n": "Ankylosaurus [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 451100,
            "power": 43,
            "armor": 43,
            "pet": 127,
            "no_present": true
        }
    },
    {
        "id": 1235,
        "n": "Tyrannosaurus [Rare]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 518765,
            "power": 46,
            "armor": 47,
            "pet": 128,
            "no_present": true
        }
    },
    {
        "id": 1236,
        "n": "Shadow Dragon [Rare]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 2,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1106765,
            "aim": 44,
            "armor": 72,
            "magic": 56,
            "pet": 129,
            "no_present": true
        }
    },
    {
        "id": 1237,
        "n": "Marble Unicorn [Legendary]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 7,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 5246640,
            "aim": 75,
            "armor": 65,
            "speed": 28,
            "pet": 130,
            "no_present": true
        }
    },
    {
        "id": 1238,
        "n": "Underworld Lord [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 4761769,
            "aim": 75,
            "power": 75,
            "armor": 75,
            "magic": 52,
            "pet": 131,
            "no_present": true
        }
    },
    {
        "id": 1239,
        "n": "Lord Of Destruction [Legendary]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 9,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 6428389,
            "aim": 98,
            "power": 98,
            "armor": 98,
            "magic": 68,
            "pet": 132,
            "no_present": true
        }
    },
    {
        "id": 1240,
        "n": "Game Master [Ancient]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1,
            "aim": 500,
            "power": 500,
            "armor": 500,
            "magic": 500,
            "pet": 133,
            "no_present": true
        }
    },
    {
        "id": 1241,
        "n": "Ruby Horse [Legendary]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 618354,
            "aim": 10,
            "power": 11,
            "armor": 18,
            "Magic": 11,
            "speed": 9,
            "pet": 134,
            "no_present": true
        }
    },
    {
        "id": 1242,
        "n": "Winged Sapphire Demon [Legendary]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 4,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 1057482,
            "aim": 23,
            "armor": 23,
            "speed": 12,
            "pet": 135,
            "no_present": true
        }
    },
    {
        "id": 1243,
        "n": "Breeding Nest",
        "t": 8,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 22
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 5250,
            "carpentry_type": "1",
            "carpentry_id": 479,
            "sc": 7
        }
    },
    {
        "id": 1244,
        "n": "Bone Horse [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 458040,
            "aim": 8,
            "power": 8,
            "armor": 14,
            "magic": 8,
            "speed": 6,
            "pet": 136,
            "no_present": true
        }
    },
    {
        "id": 1245,
        "n": "Disembodied Spirit [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 4,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 108264,
            "armor": 60,
            "pet": 137,
            "no_present": true
        }
    },
    {
        "id": 1246,
        "n": "Royal Donkey [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 12,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 71280,
            "armor": 17,
            "speed": 7,
            "pet": 138,
            "no_present": true
        }
    },
    {
        "id": 1247,
        "n": "Undead Donkey [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 13,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 84772,
            "armor": 19,
            "speed": 9,
            "pet": 139,
            "no_present": true
        }
    },
    {
        "id": 1248,
        "n": "Shadow Guru [Common]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 3,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "pet": 140,
            "aim": 14,
            "power": 17,
            "armor": 22,
            "magic": 23,
            "price": 89250,
            "no_present": true
        }
    },
    {
        "id": 1249,
        "n": "Hinny [Common]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 735640,
            "aim": 17,
            "armor": 17,
            "speed": 9,
            "pet": 141,
            "no_present": true
        }
    },
    {
        "id": 1250,
        "n": "Crystallized Pegasus [Rare]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 6,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2713540,
            "aim": 54,
            "power": 4,
            "armor": 48,
            "magic": 4,
            "speed": 20,
            "pet": 142,
            "no_present": true
        }
    },
    {
        "id": 1251,
        "n": "Demonic Unicorn [Common]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 14,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 2359600,
            "aim": 50,
            "power": 4,
            "armor": 44,
            "magic": 4,
            "speed": 19,
            "pet": 143,
            "no_present": true
        }
    },
    {
        "id": 1252,
        "n": "Lindworm [Common]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 324792,
            "armor": 52,
            "magic": 52,
            "pet": 144,
            "no_present": true
        }
    },
    {
        "id": 1253,
        "n": "Soul Trapper [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 2,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 324792,
            "power": 52,
            "armor": 52,
            "pet": 145,
            "no_present": true
        }
    },
    {
        "id": 1254,
        "n": "Dream Collector [Legendary]",
        "t": 7,
        "img": {
            "sheet": "62",
            "x": 7,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 438496,
            "power": 23,
            "armor": 68,
            "magic": 45,
            "pet": 146,
            "no_present": true
        }
    },
    {
        "id": 1255,
        "n": "Genie [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 15,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 3340846,
            "aim": 19,
            "power": 47,
            "pet": 147,
            "no_present": true
        }
    },
    {
        "id": 1256,
        "n": "Euryale [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 0,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 381700,
            "aim": 43,
            "armor": 43,
            "pet": 148,
            "no_present": true
        }
    },
    {
        "id": 1257,
        "n": "Medusa [Common]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 110000,
            "aim": 15,
            "armor": 5,
            "pet": 149,
            "no_present": true
        }
    },
    {
        "id": 1258,
        "n": "Giant Bunny [Rare]",
        "t": 7,
        "img": {
            "sheet": "45",
            "x": 16,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "aim": 40,
            "armor": 20,
            "speed": 10,
            "price": 1,
            "pet": 150
        }
    },
    {
        "id": 1259,
        "n": "Balance Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 24
            },
            "slot": 1,
            "armor": 325,
            "magic": 50,
            "min_defense": 115,
            "enchant_id": 1260,
            "price": 5253165
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1260,
        "n": "Enchanted Balance Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 25
            },
            "slot": 1,
            "armor": 406,
            "magic": 63,
            "min_defense": 115,
            "price": 9718354,
            "enchants_from": 1259
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1261,
        "n": "Saint Dragon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 59
            },
            "slot": 1,
            "armor": 225,
            "power": 40,
            "aim": 55,
            "min_strength": 110,
            "enchant_id": 1262,
            "price": 2480310
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1262,
        "n": "Enchanted Saint Dragon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 53
            },
            "slot": 1,
            "armor": 281,
            "power": 50,
            "aim": 69,
            "min_strength": 110,
            "price": 4588574,
            "enchants_from": 1261
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1263,
        "n": "Wings of Raguel",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 28
            },
            "slot": 1,
            "armor": 240,
            "power": 50,
            "aim": 70,
            "min_strength": 120,
            "enchant_id": 1264,
            "price": 6962460
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1264,
        "n": "Enchanted Wings of Raguel",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 29
            },
            "slot": 1,
            "armor": 300,
            "power": 62,
            "aim": 87,
            "min_strength": 120,
            "price": 12880551,
            "enchants_from": 1263
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1265,
        "n": "Enchanted Archdevil Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 30
            },
            "slot": 1,
            "armor": 150,
            "aim": 37,
            "power": 25,
            "min_strength": 80,
            "price": 340574,
            "enchants_from": 360
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1266,
        "n": "Wings of Path",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 46
            },
            "slot": 1,
            "armor": 20,
            "magic": 5,
            "min_defense": 1,
            "enchant_id": 1267,
            "price": 1064
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1267,
        "n": "Enchanted Wings of Path",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 47
            },
            "slot": 1,
            "armor": 25,
            "magic": 6,
            "min_defense": 1,
            "price": 1964,
            "enchants_from": 1266
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1268,
        "n": "Enchanted Angel Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 57
            },
            "slot": 1,
            "armor": 44,
            "magic": 13,
            "min_defense": 5,
            "price": 72520,
            "enchants_from": 367
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1269,
        "n": "Soul Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 26
            },
            "slot": 1,
            "armor": 45,
            "magic": 15,
            "min_defense": 15,
            "enchant_id": 1270,
            "price": 44226
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1270,
        "n": "Enchanted Soul Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 27
            },
            "slot": 1,
            "armor": 56,
            "magic": 19,
            "min_defense": 15,
            "price": 81818,
            "enchants_from": 1269
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1271,
        "n": "Iron Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 33
            },
            "slot": 1,
            "armor": 65,
            "magic": 10,
            "min_defense": 25,
            "enchant_id": 1272,
            "price": 52530
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1272,
        "n": "Enchanted Iron Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 23
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 45
            },
            "slot": 1,
            "armor": 81,
            "magic": 12,
            "min_defense": 25,
            "price": 97180,
            "enchants_from": 1271
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1273,
        "n": "Sapphire Dragon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 56
            },
            "slot": 1,
            "armor": 80,
            "magic": 15,
            "min_defense": 35,
            "enchant_id": 1274,
            "price": 57120
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1274,
        "n": "Enchanted Sapphire Dragon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 55
            },
            "slot": 1,
            "armor": 100,
            "magic": 19,
            "min_defense": 35,
            "price": 105672,
            "enchants_from": 1273
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1275,
        "n": "Enchanted Archangel Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 37
            },
            "slot": 1,
            "armor": 163,
            "magic": 25,
            "min_defense": 75,
            "price": 343574,
            "enchants_from": 359
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1276,
        "n": "Enchanted Lightning Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 43
            },
            "slot": 1,
            "armor": 175,
            "magic": 25,
            "min_defense": 85,
            "price": 679320,
            "enchants_from": 952
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1277,
        "n": "Core Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 48
            },
            "slot": 1,
            "armor": 220,
            "magic": 30,
            "min_defense": 95,
            "enchant_id": 1278,
            "price": 973228
        },
        "sources": [
            "Hell Dungeon Reward"
        ],
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1278,
        "n": "Enchanted Core Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 49
            },
            "slot": 1,
            "armor": 275,
            "magic": 38,
            "min_defense": 95,
            "price": 1800471,
            "enchants_from": 1277
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1279,
        "n": "Shadow Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 61
            },
            "slot": 1,
            "armor": 270,
            "magic": 40,
            "min_defense": 105,
            "enchant_id": 1280,
            "price": 2499990
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1280,
        "n": "Enchanted Shadow Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 62
            },
            "slot": 1,
            "armor": 337,
            "magic": 50,
            "min_defense": 105,
            "price": 4624981,
            "enchants_from": 1279
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1281,
        "n": "Bat Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 34
            },
            "slot": 1,
            "armor": 10,
            "power": 5,
            "aim": 5,
            "min_strength": 1,
            "enchant_id": 1282,
            "price": 1322
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1282,
        "n": "Enchanted Bat Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 35
            },
            "slot": 1,
            "armor": 13,
            "power": 6,
            "aim": 6,
            "min_strength": 1,
            "price": 2445,
            "enchants_from": 1281
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1283,
        "n": "Enchanted Devil Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 58
            },
            "slot": 1,
            "armor": 31,
            "power": 12,
            "aim": 12,
            "min_strength": 10,
            "price": 72520,
            "enchants_from": 346
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1284,
        "n": "Fire Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 38
            },
            "slot": 1,
            "armor": 30,
            "power": 15,
            "aim": 15,
            "min_strength": 20,
            "enchant_id": 1285,
            "price": 46500
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1285,
        "n": "Enchanted Fire Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 39
            },
            "slot": 1,
            "armor": 37,
            "power": 19,
            "aim": 19,
            "min_strength": 20,
            "price": 86025,
            "enchants_from": 1284
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1286,
        "n": "Gorgon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 12,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 40
            },
            "slot": 1,
            "armor": 45,
            "power": 10,
            "aim": 15,
            "min_strength": 30,
            "enchant_id": 1287,
            "price": 63216
        },
        "sources": [
            "Easy Dungeon Reward"
        ],
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1287,
        "n": "Enchanted Gorgon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 13,
            "y": 24
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 52
            },
            "slot": 1,
            "armor": 56,
            "power": 12,
            "aim": 19,
            "min_strength": 30,
            "price": 116950,
            "enchants_from": 1286
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1288,
        "n": "Ruby Dragon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 60
            },
            "slot": 1,
            "armor": 55,
            "power": 15,
            "aim": 15,
            "min_strength": 40,
            "enchant_id": 1289,
            "price": 82800
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1289,
        "n": "Enchanted Ruby Dragon Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 54
            },
            "slot": 1,
            "armor": 69,
            "power": 19,
            "aim": 19,
            "min_strength": 40,
            "price": 153180,
            "enchants_from": 1288
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1290,
        "n": "Spirit Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 41
            },
            "slot": 1,
            "armor": 75,
            "power": 20,
            "aim": 20,
            "min_strength": 50,
            "enchant_id": 1291,
            "price": 98422
        },
        "sources": [
            "Easy Dungeon Reward",
            "Normal Dungeon Reward",
            "Hell Dungeon Reward"
        ],
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1291,
        "n": "Enchanted Spirit Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 42
            },
            "slot": 1,
            "armor": 94,
            "power": 25,
            "aim": 25,
            "min_strength": 50,
            "price": 182080,
            "enchants_from": 1290
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1292,
        "n": "Enchanted Ice Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 44
            },
            "slot": 1,
            "armor": 112,
            "power": 13,
            "aim": 31,
            "min_strength": 60,
            "price": 227328,
            "enchants_from": 951
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1293,
        "n": "Sunstorm Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 31
            },
            "slot": 1,
            "armor": 110,
            "power": 15,
            "aim": 25,
            "min_strength": 70,
            "enchant_id": 1294,
            "price": 133220
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1294,
        "n": "Enchanted Sunstorm Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 32
            },
            "slot": 1,
            "armor": 138,
            "power": 19,
            "aim": 31,
            "min_strength": 70,
            "price": 246457,
            "enchants_from": 1293
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1295,
        "n": "Enchanted Nephilim Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 36
            },
            "slot": 1,
            "armor": 225,
            "power": 25,
            "aim": 44,
            "min_strength": 90,
            "price": 2522310,
            "enchants_from": 953
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1296,
        "n": "Underworld Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 51
            },
            "slot": 1,
            "armor": 195,
            "power": 30,
            "aim": 45,
            "min_strength": 100,
            "enchant_id": 1297,
            "price": 2310000
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1297,
        "n": "Enchanted Underworld Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 9,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 50
            },
            "slot": 1,
            "armor": 244,
            "power": 37,
            "aim": 56,
            "min_strength": 100,
            "price": 4273500,
            "enchants_from": 1296
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1298,
        "n": "Crystal Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 10,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 63
            },
            "slot": 1,
            "armor": 100,
            "magic": 10,
            "min_defense": 55,
            "enchant_id": 1299,
            "price": 94150
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1299,
        "n": "Enchanted Crystal Wings",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 11,
            "y": 25
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 64
            },
            "slot": 1,
            "armor": 125,
            "magic": 13,
            "min_defense": 55,
            "price": 174177,
            "enchants_from": 1298
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1300,
        "n": "Uncut Crystal",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 1,
            "price": 1600,
            "sc": 10
        }
    },
    {
        "id": 1301,
        "n": "Cut Crystal",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 3,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_forging": 1,
            "price": 1250,
            "sc": 10
        }
    },
    {
        "id": 1302,
        "n": "Feather",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 4,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 25,
            "sc": 9
        }
    },
    {
        "id": 1303,
        "n": "Low Wings Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 3000,
            "sc": 5
        }
    },
    {
        "id": 1304,
        "n": "Medium Wings Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 50000,
            "sc": 5
        }
    },
    {
        "id": 1305,
        "n": "High Wings Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 150000,
            "sc": 5
        }
    },
    {
        "id": 1306,
        "n": "Superior Wings Enchant Scroll",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 10,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 300000,
            "sc": 5
        }
    },
    {
        "id": 1307,
        "n": "Nightmare Orb",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 150000,
            "sc": 15
        },
        "sources": [
            "Easy Dungeon Reward",
            "Normal Dungeon Reward",
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 1308,
        "n": "Mark of Raguel",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 30
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 250000,
            "sc": 14
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 1309,
        "n": "War Dragon Wings +10",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 65
            },
            "slot": 1,
            "armor": 185,
            "power": 25,
            "aim": 40,
            "speed": 5,
            "min_strength": 95,
            "price": 1400000,
            "enchant_bonus": 0.3,
            "enchant_id": 1320
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 1310,
        "n": "Peace Dragon Wings +10",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 1,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 66
            },
            "slot": 1,
            "armor": 225,
            "magic": 30,
            "speed": 5,
            "min_defense": 95,
            "price": 1400000,
            "enchant_bonus": 0.3,
            "enchant_id": 1317
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 1311,
        "n": "Mark of Peace",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 0,
            "y": 31
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 200000,
            "sc": 14
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 1312,
        "n": "Mark of War",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 1,
            "y": 31
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 200000,
            "sc": 14
        },
        "sources": [
            "Hell Dungeon Reward"
        ]
    },
    {
        "id": 1313,
        "n": "Party Hat (Green)",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 2,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 53
            },
            "slot": 0,
            "armor": 20,
            "aim": 20,
            "power": 20,
            "min_defense": 1,
            "price": 1,
            "desc": "2nd anniversary"
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1314,
        "n": "Party Hat (Purple)",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 3,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "helmet": 54
            },
            "slot": 0,
            "armor": 50,
            "aim": 30,
            "power": 20,
            "min_defense": 1,
            "price": 1,
            "desc": "2nd anniversary"
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1315,
        "n": "Peace Dragon Wings +14",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 4,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 67
            },
            "slot": 1,
            "armor": 385,
            "magic": 62,
            "speed": 13,
            "min_defense": 115,
            "price": 9175040,
            "enchant_bonus": 0.2,
            "enchant_id": 1318,
            "enchants_from": 1319
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1316,
        "n": "Peace Dragon Wings +12",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 5,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 68
            },
            "slot": 1,
            "armor": 305,
            "magic": 46,
            "speed": 9,
            "min_defense": 105,
            "price": 3584000,
            "enchant_bonus": 0.2,
            "enchant_id": 1319,
            "enchants_from": 1317
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1317,
        "n": "Peace Dragon Wings +11",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 6,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 69
            },
            "slot": 1,
            "armor": 265,
            "magic": 38,
            "speed": 7,
            "min_defense": 100,
            "price": 2240000,
            "enchant_bonus": 0.2,
            "enchant_id": 1316,
            "enchants_from": 1310
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1318,
        "n": "Peace Dragon Wings +15",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 7,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 70
            },
            "slot": 1,
            "armor": 425,
            "magic": 70,
            "speed": 15,
            "min_defense": 120,
            "price": 13762560,
            "enchants_from": 1315
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1319,
        "n": "Peace Dragon Wings +13",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 8,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 71
            },
            "slot": 1,
            "armor": 345,
            "magic": 54,
            "speed": 11,
            "min_defense": 110,
            "price": 5734400,
            "enchant_bonus": 0.2,
            "enchant_id": 1315,
            "enchants_from": 1316
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1320,
        "n": "War Dragon Wings +11",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 65
            },
            "slot": 1,
            "armor": 210,
            "power": 35,
            "aim": 53,
            "speed": 7,
            "min_strength": 100,
            "price": 2240000,
            "enchant_bonus": 0.2,
            "enchant_id": 1321,
            "enchants_from": 1309
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1321,
        "n": "War Dragon Wings +12",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 65
            },
            "slot": 1,
            "armor": 235,
            "power": 45,
            "aim": 66,
            "speed": 9,
            "min_strength": 105,
            "price": 3584000,
            "enchant_bonus": 0.2,
            "enchant_id": 1322,
            "enchants_from": 1320
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1322,
        "n": "War Dragon Wings +13",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 65
            },
            "slot": 1,
            "armor": 260,
            "power": 55,
            "aim": 79,
            "speed": 11,
            "min_strength": 110,
            "price": 5734400,
            "enchant_bonus": 0.2,
            "enchant_id": 1323,
            "enchants_from": 1321
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1323,
        "n": "War Dragon Wings +14",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 65
            },
            "slot": 1,
            "armor": 285,
            "power": 65,
            "aim": 92,
            "speed": 13,
            "min_strength": 115,
            "price": 9175040,
            "enchant_bonus": 0.2,
            "enchant_id": 1324,
            "enchants_from": 1322
        },
        "chances": [
            25,
            35,
            45,
            55
        ]
    },
    {
        "id": 1324,
        "n": "War Dragon Wings +15",
        "t": 0,
        "img": {
            "sheet": "8",
            "x": 0,
            "y": 26
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 65
            },
            "slot": 1,
            "armor": 310,
            "power": 75,
            "aim": 105,
            "speed": 15,
            "min_strength": 120,
            "price": 13762560,
            "enchants_from": 1323
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1327,
        "n": "Boar Spear",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 179
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 20,
            "power": 90,
            "min_accuracy": 1,
            "min_strength": 10,
            "enchant_bonus": 0.3,
            "price": 10000,
            "enchant_id": 1328,
            "sc": 1
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1328,
        "n": "Spontoon",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 180
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 40,
            "power": 105,
            "min_accuracy": 1,
            "min_strength": 15,
            "enchant_bonus": 0.3,
            "price": 20000,
            "enchant_id": 1329,
            "enchants_from": 1327,
            "sc": 1
        },
        "chances": [
            80,
            100,
            100,
            100
        ]
    },
    {
        "id": 1329,
        "n": "Warspear",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 3,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 181
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 45,
            "power": 130,
            "min_accuracy": 1,
            "min_strength": 25,
            "enchant_bonus": 0.3,
            "price": 30000,
            "enchant_id": 1330,
            "enchants_from": 1328,
            "sc": 1
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 1330,
        "n": "Shadowspear",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 4,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 182
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 55,
            "power": 150,
            "min_accuracy": 1,
            "min_strength": 35,
            "enchant_bonus": 0.3,
            "price": 40000,
            "enchant_id": 1331,
            "enchants_from": 1329,
            "sc": 1
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 1331,
        "n": "Dragon Lance",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 5,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 183
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 65,
            "power": 170,
            "min_accuracy": 1,
            "min_strength": 40,
            "enchant_bonus": 0.3,
            "price": 60000,
            "enchant_id": 1332,
            "enchants_from": 1330,
            "sc": 1
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 1332,
        "n": "Qiang",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 6,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 184
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 75,
            "power": 190,
            "min_accuracy": 1,
            "min_strength": 45,
            "enchant_bonus": 0.3,
            "price": 70000,
            "enchant_id": 1333,
            "enchants_from": 1331,
            "sc": 1
        },
        "chances": [
            65,
            80,
            90,
            100
        ]
    },
    {
        "id": 1333,
        "n": "Demonspear",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 7,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 185
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 100,
            "power": 235,
            "min_accuracy": 1,
            "min_strength": 50,
            "enchant_bonus": 0.3,
            "price": 150000,
            "enchant_id": 1334,
            "enchants_from": 1332,
            "sc": 1
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 1334,
        "n": "Ancient Spear",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 8,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 186
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 125,
            "power": 255,
            "min_accuracy": 1,
            "min_strength": 60,
            "enchant_bonus": 0.3,
            "price": 230000,
            "enchant_id": 1335,
            "enchants_from": 1333,
            "sc": 1
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 1335,
        "n": "Guardian's Piercer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 9,
            "y": 19
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 187
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 140,
            "power": 280,
            "min_accuracy": 1,
            "min_strength": 70,
            "enchant_bonus": 0.3,
            "price": 280000,
            "enchant_id": 1336,
            "enchants_from": 1334,
            "sc": 1
        },
        "chances": [
            55,
            70,
            75,
            85
        ]
    },
    {
        "id": 1336,
        "n": "Ebonsteel Impaler",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 0,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 188
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 150,
            "power": 330,
            "min_accuracy": 1,
            "min_strength": 80,
            "enchant_bonus": 0.3,
            "price": 550000,
            "enchant_id": 1337,
            "enchants_from": 1335,
            "sc": 1
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 1337,
        "n": "Spike of Eternity",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 1,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 189
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 175,
            "power": 360,
            "min_accuracy": 1,
            "min_strength": 90,
            "enchant_bonus": 0.3,
            "price": 723000,
            "enchant_id": 1338,
            "enchants_from": 1336,
            "sc": 1
        },
        "chances": [
            45,
            55,
            65,
            75
        ]
    },
    {
        "id": 1338,
        "n": "Stormfury Piercer",
        "t": 5,
        "img": {
            "sheet": "7",
            "x": 2,
            "y": 20
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 0,
                "right_hand": 0,
                "weapon": 190
            },
            "slot": 4,
            "disable_slot": 3,
            "no_present": true,
            "aim": 180,
            "power": 400,
            "min_accuracy": 1,
            "min_strength": 95,
            "price": 912382,
            "enchants_from": 1337,
            "sc": 1
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1339,
        "n": "Elemental pouch",
        "t": 4,
        "img": {
            "sheet": "12",
            "x": 9,
            "y": 31
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 0,
                "shield": 54
            },
            "slot": 3,
            "magic_slots": 5,
            "min_magic": 90,
            "price": 3500000,
            "sc": 1
        }
    },
    {
        "id": 1340,
        "n": "Air Orb",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 31
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 80,
            "price": 800000,
            "sc": 15
        }
    },
    {
        "id": 1341,
        "n": "Earth Orb",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 6,
            "y": 31
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 80,
            "price": 800000,
            "sc": 15
        }
    },
    {
        "id": 1342,
        "n": "Fire Orb",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 7,
            "y": 31
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 80,
            "price": 800000,
            "sc": 15
        }
    },
    {
        "id": 1343,
        "n": "Water Orb",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 8,
            "y": 31
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_forging": 80,
            "price": 800000,
            "sc": 15
        }
    },
    {
        "id": 1344,
        "n": "Mylanth [Legendary]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 0,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 6107144,
            "aim": 109,
            "power": 71,
            "armor": 122,
            "magic": 59,
            "pet": 151,
            "no_present": true
        }
    },
    {
        "id": 1345,
        "n": "Tesselth [Ancient]",
        "t": 7,
        "img": {
            "sheet": "61",
            "x": 1,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 7023216,
            "aim": 128,
            "power": 84,
            "armor": 143,
            "magic": 70,
            "pet": 152,
            "no_present": true
        }
    },
    {
        "id": 1346,
        "n": "Xirador [Legendary]",
        "t": 7,
        "img": {
            "sheet": "59",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 7023216,
            "aim": 107,
            "power": 133,
            "armor": 111,
            "pet": 153,
            "no_present": true
        }
    },
    {
        "id": 1347,
        "n": "Xalanth [Ancient]",
        "t": 7,
        "img": {
            "sheet": "60",
            "x": 1,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 12,
            "price": 7023216,
            "aim": 125,
            "power": 156,
            "armor": 130,
            "pet": 154,
            "no_present": true
        }
    },
    {
        "id": 1348,
        "n": "Light Peacekeeper",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 40
            },
            "slot": 3,
            "armor": 8,
            "min_defense": 10,
            "magic_block": 10,
            "price": 827,
            "enchant_id": 1349
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1349,
        "n": "Sturdy Peacekeeper",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 41
            },
            "slot": 3,
            "armor": 11,
            "min_defense": 20,
            "magic_block": 15,
            "price": 9805,
            "enchant_id": 1350,
            "enchants_from": 1348
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1350,
        "n": "Enchanted Peacekeeper",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 42
            },
            "slot": 3,
            "armor": 18,
            "min_defense": 30,
            "magic_block": 20,
            "price": 27946,
            "enchants_from": 1349
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1351,
        "n": "Light Greenwood Shield",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 43
            },
            "slot": 3,
            "armor": 27,
            "min_defense": 40,
            "magic_block": 25,
            "price": 38540,
            "enchant_id": 1352
        },
        "chances": [
            35,
            50,
            60,
            75
        ]
    },
    {
        "id": 1352,
        "n": "Sturdy Greenwood Shield",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 44
            },
            "slot": 3,
            "armor": 39,
            "min_defense": 50,
            "magic_block": 30,
            "price": 109839,
            "enchant_id": 1353,
            "enchants_from": 1351
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1353,
        "n": "Enchanted Greenwood Shield",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 45
            },
            "slot": 3,
            "armor": 48,
            "min_defense": 60,
            "magic_block": 35,
            "price": 203202,
            "enchants_from": 1352
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1354,
        "n": "Light Redwood Shield",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 46
            },
            "slot": 3,
            "armor": 55,
            "min_defense": 70,
            "magic_block": 40,
            "price": 294386,
            "enchant_id": 1355
        },
        "chances": [
            25,
            40,
            45,
            55
        ]
    },
    {
        "id": 1355,
        "n": "Sturdy Redwood Shield",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 47
            },
            "slot": 3,
            "armor": 70,
            "min_defense": 80,
            "magic_block": 45,
            "price": 544614,
            "enchant_id": 1356,
            "enchants_from": 1354
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1356,
        "n": "Enchanted Redwood Shield",
        "t": 0,
        "img": {
            "sheet": "40",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": true,
            "visible": {
                "right_hand": 1,
                "shield": 48
            },
            "slot": 3,
            "armor": 85,
            "min_defense": 90,
            "magic_block": 50,
            "price": 844151,
            "enchants_from": 1355
        },
        "chances": [
            15,
            25,
            35,
            45
        ]
    },
    {
        "id": 1357,
        "n": "Gate",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 3,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 75000,
            "carpentry_type": "1",
            "carpentry_id": 497,
            "sc": 7
        }
    },
    {
        "id": 1358,
        "n": "Tossa Jute Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 11,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 85,
            "price": 3801,
            "farming_id": 518,
            "sc": 19
        }
    },
    {
        "id": 1359,
        "n": "Bag of Worms",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 11,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 95,
            "price": 5520,
            "farming_id": 519,
            "sc": 19
        }
    },
    {
        "id": 1360,
        "n": "Mailbox",
        "t": 8,
        "img": {
            "sheet": "49",
            "x": 3,
            "y": 2
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 63000,
            "carpentry_type": "1",
            "carpentry_id": 520,
            "sc": 7
        }
    },
    {
        "id": 1361,
        "n": "Birthday Cake",
        "t": 1,
        "img": {
            "sheet": "11",
            "x": 0,
            "y": 14
        },
        "params": {
            "wearable": false,
            "heal": 50,
            "price": 1,
            "desc": "Happy birthday!",
            "sc": 3
        }
    },
    {
        "id": 1362,
        "n": "Poison Rain Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 75,
            "min_accuracy": 1,
            "price": 43960,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1363,
        "n": "Blizzard Medallion",
        "t": 4,
        "img": {
            "sheet": "38",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_magic": 79,
            "min_accuracy": 1,
            "price": 48739,
            "sc": 2
        },
        "chances": [
            50,
            70,
            90,
            100
        ]
    },
    {
        "id": 1364,
        "n": "Flannel Seed",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 11,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_farming": 66,
            "price": 800,
            "farming_id": 526,
            "sc": 19
        }
    },
    {
        "id": 1365,
        "n": "Teleport Book",
        "t": 3,
        "img": {
            "sheet": "4",
            "x": 7,
            "y": 7
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 25000,
            "desc": "Can be used to teleport to various locations. Single use.",
            "sc": 21
        }
    },
    {
        "id": 1366,
        "n": "NPC Tag",
        "t": 0,
        "img": {
            "sheet": "12",
            "x": 2,
            "y": 31
        },
        "params": {
            "wearable": true,
            "visible": {
                "cape": 72
            },
            "slot": 1,
            "price": 1,
            "no_present": true
        },
        "chances": [
            5,
            15,
            25,
            35
        ]
    },
    {
        "id": 1367,
        "n": "Potion Of Love",
        "t": 1,
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 16
        },
        "params": {
            "wearable": false,
            "boost_health": 0.1,
            "price": 1,
            "desc_only": "Restores health to 110%.",
            "sc": 3
        }
    },
    {
        "id": 1368,
        "n": "Raw Frog",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 4
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 1,
            "price": 26,
            "sc": 17
        }
    },
    {
        "id": 1369,
        "n": "Frog",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 4
        },
        "params": {
            "wearable": false,
            "heal": 3,
            "price": 39,
            "sc": 0
        }
    },
    {
        "id": 1370,
        "n": "Raw Eel",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 47,
            "price": 125,
            "sc": 17
        }
    },
    {
        "id": 1371,
        "n": "Eel",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 12,
            "price": 188,
            "sc": 0
        }
    },
    {
        "id": 1372,
        "n": "Raw Cowfish",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 2,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 64,
            "price": 228,
            "sc": 17
        }
    },
    {
        "id": 1373,
        "n": "Cowfish",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 3,
            "y": 6
        },
        "params": {
            "wearable": false,
            "heal": 16,
            "price": 342,
            "sc": 0
        }
    },
    {
        "id": 1374,
        "n": "Raw Giant Catfish",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 95,
            "price": 465,
            "sc": 17
        }
    },
    {
        "id": 1375,
        "n": "Giant Catfish",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 23,
            "price": 698,
            "sc": 0
        }
    },
    {
        "id": 1376,
        "n": "Raw Whale Shark",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 0,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 99,
            "price": 498,
            "sc": 17
        }
    },
    {
        "id": 1377,
        "n": "Whale Shark",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 1,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 25,
            "price": 733,
            "sc": 0
        }
    },
    {
        "id": 1378,
        "n": "Raw Coelacanth",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 1,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 103,
            "price": 523,
            "sc": 17
        }
    },
    {
        "id": 1379,
        "n": "Coelacanth Kombu-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 0,
            "y": 8
        },
        "params": {
            "wearable": false,
            "heal": 28,
            "price": 1024,
            "sc": 1
        }
    },
    {
        "id": 1380,
        "n": "Coelacanth Nori-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 1,
            "y": 8
        },
        "params": {
            "wearable": false,
            "heal": 32,
            "price": 2134,
            "sc": 1
        }
    },
    {
        "id": 1381,
        "n": "Raw sturgeon",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 0,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 107,
            "price": 536,
            "sc": 0
        }
    },
    {
        "id": 1382,
        "n": "Sturgeon Kombu-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 30,
            "price": 1124,
            "sc": 1
        }
    },
    {
        "id": 1383,
        "n": "Sturgeon Nori-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 7
        },
        "params": {
            "wearable": false,
            "heal": 33,
            "price": 2604,
            "sc": 1
        }
    },
    {
        "id": 1384,
        "n": "Raw Blue Marlin",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 6
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 108,
            "price": 558,
            "sc": 17
        }
    },
    {
        "id": 1385,
        "n": "Blue Marlin",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 6
        },
        "params": {
            "wearable": false,
            "heal": 26,
            "price": 837,
            "sc": 0
        }
    },
    {
        "id": 1386,
        "n": "Raw Stonefish",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 2,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 112,
            "price": 582,
            "sc": 17
        }
    },
    {
        "id": 1387,
        "n": "Stonefish Kombu-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 2,
            "y": 8
        },
        "params": {
            "wearable": false,
            "heal": 32,
            "price": 1237,
            "sc": 1
        }
    },
    {
        "id": 1388,
        "n": "Stonefish Nori-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 3,
            "y": 8
        },
        "params": {
            "wearable": false,
            "heal": 34,
            "price": 3123,
            "sc": 1
        }
    },
    {
        "id": 1389,
        "n": "Stonefish Dulse-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 8
        },
        "params": {
            "wearable": false,
            "heal": 37,
            "price": 3873,
            "sc": 1
        }
    },
    {
        "id": 1390,
        "n": "Raw Sunfish",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 4,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 116,
            "price": 616,
            "sc": 17
        }
    },
    {
        "id": 1391,
        "n": "Sunfish",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 5
        },
        "params": {
            "wearable": false,
            "heal": 28,
            "price": 924,
            "sc": 0
        }
    },
    {
        "id": 1392,
        "n": "Raw Oarfish",
        "t": 3,
        "img": {
            "sheet": "9",
            "x": 3,
            "y": 7
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "min_cooking": 120,
            "price": 660,
            "sc": 17
        }
    },
    {
        "id": 1393,
        "n": "Oarfish Kombu-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 5,
            "y": 8
        },
        "params": {
            "wearable": false,
            "heal": 33,
            "price": 1470,
            "sc": 1
        }
    },
    {
        "id": 1394,
        "n": "Oarfish Nori-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 0,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 37,
            "price": 3690,
            "sc": 1
        }
    },
    {
        "id": 1395,
        "n": "Oarfish Dulse-sushi",
        "t": 1,
        "img": {
            "sheet": "9",
            "x": 1,
            "y": 9
        },
        "params": {
            "wearable": false,
            "heal": 40,
            "price": 4590,
            "sc": 1
        }
    },
    {
        "id": 1396,
        "n": "Sunken Treasure",
        "t": 3,
        "img": {
            "sheet": "12",
            "x": 5,
            "y": 1
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 20000,
            "sc": 99
        }
    },
    {
        "id": 1397,
        "n": "Poseidon's Trident",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 0,
            "y": 5
        },
        "params": {
            "wearable": true,
            "visible": {
                "left_hand": 1,
                "weapon": 193
            },
            "slot": 4,
            "min_fishing": 95,
            "price": 350000,
            "sc": 0
        }
    },
    {
        "id": 1398,
        "n": "Poseidon's' Piece 1",
        "t": 3,
        "img": {
            "sheet": "10",
            "x": 1,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 175000,
            "sc": 99
        }
    },
    {
        "id": 1399,
        "n": "Poseidon's' Piece 2",
        "t": 3,
        "img": {
            "sheet": "10",
            "x": 2,
            "y": 5
        },
        "params": {
            "wearable": true,
            "slot": 3,
            "price": 175000,
            "sc": 99
        }
    },
    {
        "id": 1400,
        "n": "Poseidon's Permission",
        "t": 3,
        "img": {
            "sheet": "10",
            "x": 3,
            "y": 5
        },
        "params": {
            "wearable": false,
            "slot": 9,
            "min_magic": 1,
            "price": 1,
            "to_map": 23,
            "to_i": 20,
            "to_j": 20,
            "sc": 99
        }
    },
    {
        "id": 1401,
        "n": "Saw",
        "t": 4,
        "img": {
            "sheet": "10",
            "x": 6,
            "y": 0
        },
        "params": {
            "wearable": true,
            "slot": 4,
            "min_carpentry": 1,
            "price": 1,
            "no_present": true,
            "sc": 0
        }
    }
]
},{}],333:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , _items = require('./ItemDB.js')
  , util = require('../util.js')
  , _numItems = _items.length
;

var ItemStore = assign({}, EventEmitter.prototype, {
  getAll: function() {
    return util.sortByKey(_items, 'n');
  },
  get: function(id) {
    id = parseInt(id);
    for (var i=0;i<_numItems;i++) {
      if (parseInt(_items[i].id) == id) return _items[i];
    }
    return null;
  },
  getItem: function(id) {
    return this.get(id);
  },
  getFarmingSeed: function(item) {

    switch(item.id) {
      case 228: return this.getItem(794); // old leaf
      case 283: return this.getItem(778); // yarrow
      case 762: return this.getItem(763); // apple
      case 782: return this.getItem(789); // banana
      case 265: return this.getItem(1034); // cotton
      case 266: return this.getItem(1035); // bamboo
      case 1012: return this.getItem(1364); // flannel
      case 1013: return this.getItem(1358); // jute
      case 1014: return this.getItem(1359); //silk
    }

    var re = new RegExp(item.n + ' Seed');
    for (var i in _items) {
      if (_items[i].n.match(re)) {
        return _items[i];
      }
    }

    return false;
  },

  search: function(term) {
    var re = new RegExp(term.toLowerCase(), 'i');
    return util.sortByKey(_items.map(function(item, idx){
      return item.name.toLoserCase().match(re);
    }), 'n')
  },

  getEnchantChain: function(id) {
    var currentId = id;
    var found = false
    var chain = [];
    var origItem = null;
    while (!found) {
      item = this.getItem(currentId);
      if (!origItem) origItem = item;
      chain.unshift(item);
      if (item.params.enchants_from) {
        currentId = parseInt(item.params.enchants_from);
      } else {
        found = true;
      }
    }
    found = false;
    var currentId=id;
    var currentItem = this.getItem(id);

    while(!found) {
      if (currentItem.params.enchant_id) {
        var nextItem = this.getItem(currentItem.params.enchant_id);
        chain.push(nextItem);
        currentItem = nextItem;
      } else {
        found = true;
      }
    }
    return chain;
  },
  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },

  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },

  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;
    var text;
/*
    switch(action.actionType) {
      case AppCon.SEARCH:
        q = action.q.trim();

        break;

      case SearchConstants.TODO_DESTROY:
        destroy(action.id);
        TodoStore.emitChange();
        break;

      // add more cases for other actionTypes, like TODO_UPDATE, etc.
    }
*/
    return true; // No errors. Needed by promise in Dispatcher.
  })

});

module.exports = ItemStore;
},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"../util.js":341,"./ItemDB.js":332,"events":4,"object-assign":8}],334:[function(require,module,exports){
module.exports = [
    {
        "id": 0,
        "n": "Gray Wizard",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 10,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 0,
                    "chance": 0.05
                },
                {
                    "id": 1,
                    "chance": 0.01
                },
                {
                    "id": 271,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 993,
                    "chance": 0.0025
                },
                {
                    "id": 992,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.01
                },
                {
                    "id": 448,
                    "chance": 0.01
                },
                {
                    "id": 8,
                    "chance": 0.01
                }
            ],
            "combat_level": 4
        },
        "temp": {
            "busy": false,
            "health": 10,
            "total_defense": 3,
            "total_strength": 3,
            "total_accuracy": 2
        },
        "locations": {
            "Dorpat": 25
        }
    },
    {
        "id": 1,
        "n": "White Rat",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 0,
            "y": 4
        },
        "params": {
            "health": 5,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 3,
                    "chance": 0.25
                },
                {
                    "id": 0,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 490,
                    "chance": 0.25
                },
                {
                    "id": 204,
                    "chance": 0.01
                }
            ],
            "combat_level": 1
        },
        "temp": {
            "health": 5,
            "busy": false,
            "total_defense": 0,
            "total_strength": 0,
            "total_accuracy": 0
        },
        "locations": {
            "Dorpat": 25,
            "Dungeon": 18,
            "Tutorial Island": 22
        }
    },
    {
        "id": 3,
        "n": "Green Wizard",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 4,
            "y": 0
        },
        "params": {
            "health": 17,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 0,
                    "chance": 0.1
                },
                {
                    "id": 1,
                    "chance": 0.05
                },
                {
                    "id": 40,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 271,
                    "chance": 0.01
                },
                {
                    "id": 992,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 20,
                    "chance": 0.02
                },
                {
                    "id": 452,
                    "chance": 0.01
                },
                {
                    "id": 448,
                    "chance": 0.01
                },
                {
                    "id": 220,
                    "chance": 0.01
                }
            ],
            "combat_level": 11
        },
        "temp": {
            "health": 17,
            "busy": false,
            "total_defense": 10,
            "total_strength": 10,
            "total_accuracy": 10
        },
        "locations": {
            "Dorpat": 22
        }
    },
    {
        "id": 4,
        "n": "Orc Warrior",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 3,
            "y": 10
        },
        "params": {
            "health": 25,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 1,
                    "chance": 0.1
                },
                {
                    "id": 40,
                    "chance": 0.05
                },
                {
                    "id": 5,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 25,
                    "chance": 0.0025
                },
                {
                    "id": 37,
                    "chance": 0.0035
                },
                {
                    "id": 479,
                    "chance": 0.0025
                },
                {
                    "id": 4,
                    "chance": 0.01
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 19,
                    "chance": 0.01
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 230,
                    "chance": 0.005
                },
                {
                    "id": 264,
                    "chance": 0.01
                }
            ],
            "combat_level": 21
        },
        "temp": {
            "health": 25,
            "busy": false,
            "total_defense": 5,
            "total_strength": 30,
            "total_accuracy": 25
        },
        "locations": {
            "Dorpat": 22
        }
    },
    {
        "id": 6,
        "n": "Minotaur",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 4,
            "y": 3
        },
        "params": {
            "health": 60,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 6,
                    "chance": 0.2
                },
                {
                    "id": 18,
                    "chance": 0.02
                },
                {
                    "id": 303,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 864,
                    "chance": 0.0025
                },
                {
                    "id": 1071,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 2,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 4,
                    "chance": 0.1
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 272,
                    "chance": 0.05
                }
            ],
            "combat_level": 48
        },
        "temp": {
            "health": 60,
            "busy": false,
            "total_defense": 45,
            "total_strength": 45,
            "total_accuracy": 45
        },
        "locations": {
            "Dorpat": 12
        }
    },
    {
        "id": 7,
        "n": "Dwarf Mage",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 0,
            "y": 3
        },
        "params": {
            "health": 14,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 21,
                    "chance": 0.05
                },
                {
                    "id": 20,
                    "chance": 0.05
                },
                {
                    "id": 448,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 479,
                    "chance": 0.0025
                },
                {
                    "id": 273,
                    "chance": 0.05
                },
                {
                    "id": 444,
                    "chance": 0.005
                }
            ],
            "combat_level": 13
        },
        "temp": {
            "health": 14,
            "busy": false,
            "total_defense": 14,
            "total_strength": 10,
            "total_accuracy": 14
        },
        "locations": {
            "Dorpat": 13
        }
    },
    {
        "id": 8,
        "n": "Black Rat",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 1,
            "y": 4
        },
        "params": {
            "health": 23,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 14,
                    "chance": 0.05
                },
                {
                    "id": 15,
                    "chance": 0.1
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 22,
                    "chance": 0.03
                },
                {
                    "id": 23,
                    "chance": 0.03
                }
            ],
            "combat_level": 20
        },
        "temp": {
            "health": 23,
            "busy": false,
            "total_defense": 20,
            "total_strength": 20,
            "total_accuracy": 20
        },
        "locations": {
            "Dorpat": 1,
            "Dungeon": 14
        }
    },
    {
        "id": 9,
        "n": "Ghost",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 1,
            "y": 3
        },
        "params": {
            "health": 31,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 17,
                    "chance": 0.1
                },
                {
                    "id": 24,
                    "chance": 0.015
                },
                {
                    "id": 54,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 38,
                    "chance": 0.0025
                },
                {
                    "id": 25,
                    "chance": 0.05
                },
                {
                    "id": 1359,
                    "chance": 0.0015
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 233,
                    "chance": 0.05
                }
            ],
            "combat_level": 30
        },
        "temp": {
            "health": 31,
            "busy": false,
            "total_defense": 32,
            "total_strength": 28,
            "total_accuracy": 32
        },
        "locations": {
            "Dungeon": 14,
            "Walco": 11
        }
    },
    {
        "id": 10,
        "n": "Skeleton",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 0,
            "y": 5
        },
        "params": {
            "health": 38,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 24,
                    "chance": 0.025
                },
                {
                    "id": 26,
                    "chance": 0.035
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 1269,
                    "chance": 0.0015
                },
                {
                    "id": 1359,
                    "chance": 0.0015
                },
                {
                    "id": 294,
                    "chance": 0.0025
                },
                {
                    "id": 27,
                    "chance": 0.05
                },
                {
                    "id": 274,
                    "chance": 0.05
                }
            ],
            "combat_level": 36
        },
        "temp": {
            "health": 38,
            "busy": false,
            "total_defense": 18,
            "total_strength": 48,
            "total_accuracy": 43
        },
        "locations": {
            "Dungeon": 22,
            "Walco": 8
        }
    },
    {
        "id": 11,
        "n": "Vampire",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 1,
            "y": 7
        },
        "params": {
            "health": 44,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 25,
                    "chance": 0.07
                },
                {
                    "id": 24,
                    "chance": 0.03
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 28,
                    "chance": 0.01
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 860,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 1071,
                    "chance": 0.0025
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 215,
                    "chance": 0.05
                }
            ],
            "combat_level": 44
        },
        "temp": {
            "health": 44,
            "busy": false,
            "total_defense": 70,
            "total_strength": 30,
            "total_accuracy": 35
        },
        "locations": {
            "Dungeon": 14,
            "Walco": 11
        }
    },
    {
        "id": 13,
        "n": "Orc Mage",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 4,
            "y": 10
        },
        "params": {
            "health": 30,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 1,
                    "chance": 0.1
                },
                {
                    "id": 40,
                    "chance": 0.05
                },
                {
                    "id": 5,
                    "chance": 0.05
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 4,
                    "chance": 0.01
                },
                {
                    "id": 435,
                    "chance": 0.0025
                },
                {
                    "id": 295,
                    "chance": 0.0025
                },
                {
                    "id": 424,
                    "chance": 0.0025
                },
                {
                    "id": 230,
                    "chance": 0.005
                },
                {
                    "id": 19,
                    "chance": 0.01
                },
                {
                    "id": 64,
                    "chance": 0.005
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 264,
                    "chance": 0.05
                }
            ],
            "combat_level": 25
        },
        "temp": {
            "health": 30,
            "busy": false,
            "total_defense": 17,
            "total_strength": 30,
            "total_accuracy": 25
        },
        "locations": {
            "Dorpat": 19
        }
    },
    {
        "id": 14,
        "n": "Sapphire Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 25,
                    "chance": 0.025
                },
                {
                    "id": 26,
                    "chance": 0.0025
                },
                {
                    "id": 28,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 216,
                    "chance": 0.0035
                },
                {
                    "id": 250,
                    "chance": 0.0025
                },
                {
                    "id": 362,
                    "chance": 0.0015
                }
            ],
            "combat_level": 83
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 80,
            "total_strength": 85,
            "total_accuracy": 80
        },
        "locations": {
            "Dungeon": 23
        }
    },
    {
        "id": 16,
        "n": "Gnoll Warrior",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 4,
            "y": 12
        },
        "params": {
            "health": 54,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 6,
                    "chance": 0.2
                },
                {
                    "id": 44,
                    "chance": 0.01
                },
                {
                    "id": 42,
                    "chance": 0.02
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 45,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 62,
                    "chance": 0.0025
                },
                {
                    "id": 43,
                    "chance": 0.0025
                },
                {
                    "id": 58,
                    "chance": 0.0025
                },
                {
                    "id": 295,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 64,
                    "chance": 0.005
                },
                {
                    "id": 272,
                    "chance": 0.05
                }
            ],
            "combat_level": 54
        },
        "temp": {
            "health": 54,
            "busy": false,
            "total_defense": 60,
            "total_strength": 50,
            "total_accuracy": 54
        },
        "locations": {
            "Dungeon": 19
        }
    },
    {
        "id": 17,
        "n": "Hydra",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 1,
            "y": 6
        },
        "params": {
            "health": 61,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 47,
                    "chance": 0.05
                },
                {
                    "id": 46,
                    "chance": 0.0025
                },
                {
                    "id": 189,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 339,
                    "chance": 0.0025
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 142,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 26,
                    "chance": 0.02
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 62
        },
        "temp": {
            "health": 61,
            "busy": false,
            "total_defense": 80,
            "total_strength": 65,
            "total_accuracy": 43
        },
        "locations": {
            "Dungeon": 14
        }
    },
    {
        "id": 18,
        "n": "Archangel",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 0,
            "y": 9
        },
        "params": {
            "health": 69,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 48,
                    "chance": 0.0025
                },
                {
                    "id": 17,
                    "chance": 0.05
                },
                {
                    "id": 56,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.0015
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 300,
                    "chance": 0.001
                },
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 49,
                    "chance": 0.0025
                },
                {
                    "id": 369,
                    "chance": 0.01
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 70
        },
        "temp": {
            "health": 69,
            "busy": false,
            "total_defense": 70,
            "total_strength": 71,
            "total_accuracy": 73
        },
        "locations": {
            "Clouds": 21
        }
    },
    {
        "id": 19,
        "n": "Archdevil",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 82,
                    "chance": 0.01
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 128,
                    "chance": 0.0015
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 475,
                    "chance": 0.0025
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 141,
                    "chance": 0.0025
                },
                {
                    "id": 144,
                    "chance": 0.0015
                },
                {
                    "id": 370,
                    "chance": 0.01
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 130,
            "total_strength": 75,
            "total_accuracy": 75
        },
        "locations": {
            "Blood River": 24,
            "Hell": 14,
            "Lost Woods": 24
        }
    },
    {
        "id": 20,
        "n": "Behemoth",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 3,
            "y": 5
        },
        "params": {
            "health": 88,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 59,
                    "chance": 0.008
                },
                {
                    "id": 89,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 64,
                    "chance": 0.005
                },
                {
                    "id": 858,
                    "chance": 0.0025
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 1075,
                    "chance": 0.0025
                },
                {
                    "id": 276,
                    "chance": 0.005
                },
                {
                    "id": 135,
                    "chance": 0.0025
                }
            ],
            "combat_level": 97
        },
        "temp": {
            "health": 88,
            "busy": false,
            "total_defense": 122,
            "total_strength": 78,
            "total_accuracy": 100
        },
        "locations": {
            "Fellin": 20,
            "Lost Woods": 27
        }
    },
    {
        "id": 21,
        "n": "Ettin King",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 5,
            "y": 4
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 67,
                    "chance": 0.002
                },
                {
                    "id": 93,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 128,
                    "chance": 0.005
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 93
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 80,
            "total_strength": 100,
            "total_accuracy": 100
        },
        "locations": {
            "Lost Woods": 32
        }
    },
    {
        "id": 22,
        "n": "Efreet",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 6,
            "y": 3
        },
        "params": {
            "health": 112,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 129,
                    "chance": 0.0025
                },
                {
                    "id": 96,
                    "chance": 0.03
                },
                {
                    "id": 428,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 895,
                    "chance": 0.0025
                },
                {
                    "id": 130,
                    "chance": 0.003
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 103
        },
        "temp": {
            "health": 112,
            "busy": false,
            "total_defense": 120,
            "total_strength": 80,
            "total_accuracy": 100
        },
        "locations": {
            "Dungeon": 18,
            "Blood River": 33,
            "Hell": 18
        }
    },
    {
        "id": 23,
        "n": "Ghost Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 6
        },
        "params": {
            "health": 98,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 131,
                    "chance": 0.0025
                },
                {
                    "id": 35,
                    "chance": 0.0035
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 99,
                    "chance": 0.01
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 117
        },
        "temp": {
            "health": 98,
            "busy": false,
            "total_defense": 100,
            "total_strength": 100,
            "total_accuracy": 170
        },
        "locations": {
            "Dungeon": 8,
            "Hell": 18,
            "Walco": 12,
            "Dragon's Lair": 10
        }
    },
    {
        "id": 24,
        "n": "King Ruby Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 0,
            "y": 4
        },
        "params": {
            "health": 160,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 132,
                    "chance": 0.0001
                },
                {
                    "id": 99,
                    "chance": 0.05
                },
                {
                    "id": 224,
                    "chance": 0.008
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 363,
                    "chance": 0.0025
                },
                {
                    "id": 669,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 396,
                    "chance": 0.0015
                },
                {
                    "id": 252,
                    "chance": 0.005
                }
            ],
            "combat_level": 165
        },
        "temp": {
            "health": 160,
            "busy": false,
            "total_defense": 200,
            "total_strength": 100,
            "total_accuracy": 200
        },
        "locations": {
            "Dungeon": 4,
            "Blood River": 6,
            "Hell": 20,
            "Clouds": 7,
            "Dragon's Lair": 19
        }
    },
    {
        "id": 25,
        "n": "Paladin",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 7,
            "y": 1
        },
        "params": {
            "health": 73,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 133,
                    "chance": 0.005
                },
                {
                    "id": 49,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1348,
                    "chance": 0.0025
                },
                {
                    "id": 271,
                    "chance": 0.01
                },
                {
                    "id": 93,
                    "chance": 0.003
                }
            ],
            "combat_level": 84
        },
        "temp": {
            "health": 73,
            "busy": false,
            "total_defense": 100,
            "total_strength": 63,
            "total_accuracy": 100
        },
        "locations": {
            "Dorpat": 1,
            "Dungeon": 14
        }
    },
    {
        "id": 26,
        "n": "Cursed Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 6,
            "y": 5
        },
        "params": {
            "health": 168,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 153,
                    "chance": 0.0025
                },
                {
                    "id": 155,
                    "chance": 0.0025
                },
                {
                    "id": 655,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 398,
                    "chance": 0.0025
                },
                {
                    "id": 156,
                    "chance": 0.003
                }
            ],
            "combat_level": 142
        },
        "temp": {
            "health": 168,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Dungeon": 8,
            "Blood River": 17,
            "Hell": 13
        }
    },
    {
        "id": 27,
        "n": "Ruby Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 110,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 99,
                    "chance": 0.01
                },
                {
                    "id": 150,
                    "chance": 0.0025
                },
                {
                    "id": 252,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 224,
                    "chance": 0.0035
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 148,
                    "chance": 0.003
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 152,
                    "chance": 0.01
                }
            ],
            "combat_level": 100
        },
        "temp": {
            "health": 110,
            "busy": false,
            "total_defense": 90,
            "total_strength": 90,
            "total_accuracy": 110
        },
        "locations": {
            "Dungeon": 13,
            "Blood River": 32,
            "Hell": 33,
            "Clouds": 6,
            "Dragon's Lair": 7
        }
    },
    {
        "id": 28,
        "n": "Vampire Lord",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 4,
            "y": 7
        },
        "params": {
            "health": 106,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 134,
                    "chance": 0.001
                },
                {
                    "id": 93,
                    "chance": 0.1
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 133,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 215,
                    "chance": 0.05
                }
            ],
            "combat_level": 101
        },
        "temp": {
            "health": 106,
            "busy": false,
            "total_defense": 150,
            "total_strength": 50,
            "total_accuracy": 100
        },
        "locations": {
            "Dungeon": 1,
            "Walco": 10
        }
    },
    {
        "id": 29,
        "n": "Dark Knight",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 83,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 133,
                    "chance": 0.005
                },
                {
                    "id": 49,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 271,
                    "chance": 0.01
                },
                {
                    "id": 93,
                    "chance": 0.03
                }
            ],
            "combat_level": 86
        },
        "temp": {
            "health": 83,
            "busy": false,
            "total_defense": 100,
            "total_strength": 53,
            "total_accuracy": 110
        },
        "locations": {
            "Dungeon": 13
        }
    },
    {
        "id": 30,
        "n": "Holy Warrior",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 5,
            "y": 0
        },
        "params": {
            "health": 83,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 133,
                    "chance": 0.005
                },
                {
                    "id": 149,
                    "chance": 0.005
                },
                {
                    "id": 93,
                    "chance": 0.03
                },
                {
                    "id": 271,
                    "chance": 0.01
                },
                {
                    "id": 154,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 94
        },
        "temp": {
            "health": 83,
            "busy": false,
            "total_defense": 120,
            "total_strength": 63,
            "total_accuracy": 110
        },
        "locations": {
            "Dungeon": 9
        }
    },
    {
        "id": 31,
        "n": "Russula",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 4
        },
        "params": {
            "health": 6,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 227,
                    "chance": 0.2
                }
            ],
            "combat_level": 5
        },
        "temp": {
            "health": 6,
            "busy": false,
            "total_defense": 6,
            "total_strength": 4,
            "total_accuracy": 6
        },
        "locations": {
            "Whiland": 33
        }
    },
    {
        "id": 32,
        "n": "Dark Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 4
        },
        "params": {
            "health": 14,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 235,
                    "chance": 0.8
                }
            ],
            "combat_level": 15
        },
        "temp": {
            "health": 14,
            "busy": false,
            "total_defense": 20,
            "total_strength": 10,
            "total_accuracy": 16
        },
        "locations": {
            "Whiland": 28
        }
    },
    {
        "id": 33,
        "n": "Blue Magic Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 4
        },
        "params": {
            "health": 20,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 236,
                    "chance": 0.8
                }
            ],
            "combat_level": 25
        },
        "temp": {
            "health": 20,
            "busy": false,
            "total_defense": 30,
            "total_strength": 20,
            "total_accuracy": 30
        },
        "locations": {
            "Whiland": 28
        }
    },
    {
        "id": 34,
        "n": "Boletus",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 1,
            "y": 5
        },
        "params": {
            "health": 35,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 237,
                    "chance": 0.8
                }
            ],
            "combat_level": 35
        },
        "temp": {
            "health": 35,
            "busy": false,
            "total_defense": 35,
            "total_strength": 30,
            "total_accuracy": 40
        },
        "locations": {
            "Whiland": 33
        }
    },
    {
        "id": 35,
        "n": "Silver Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 3,
            "y": 5
        },
        "params": {
            "health": 50,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 239,
                    "chance": 0.7
                }
            ],
            "combat_level": 45
        },
        "temp": {
            "health": 50,
            "busy": false,
            "total_defense": 50,
            "total_strength": 30,
            "total_accuracy": 50
        },
        "locations": {
            "Whiland": 18
        }
    },
    {
        "id": 36,
        "n": "Golden Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 5,
            "y": 4
        },
        "params": {
            "health": 55,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 238,
                    "chance": 0.7
                }
            ],
            "combat_level": 55
        },
        "temp": {
            "health": 55,
            "busy": false,
            "total_defense": 65,
            "total_strength": 40,
            "total_accuracy": 60
        },
        "locations": {
            "Whiland": 3,
            "Lost Woods": 31
        }
    },
    {
        "id": 37,
        "n": "Dry-Rotted Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 0,
            "y": 5
        },
        "params": {
            "health": 60,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 240,
                    "chance": 0.6
                }
            ],
            "combat_level": 65
        },
        "temp": {
            "health": 60,
            "busy": false,
            "total_defense": 70,
            "total_strength": 50,
            "total_accuracy": 80
        },
        "locations": {
            "Whiland": 6,
            "Lost Woods": 12
        }
    },
    {
        "id": 38,
        "n": "Avatar's Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 6,
            "y": 4
        },
        "params": {
            "health": 80,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 241,
                    "chance": 0.6
                }
            ],
            "combat_level": 75
        },
        "temp": {
            "health": 80,
            "busy": false,
            "total_defense": 120,
            "total_strength": 40,
            "total_accuracy": 60
        },
        "locations": {
            "Whiland": 14,
            "Lost Woods": 14
        }
    },
    {
        "id": 39,
        "n": "Poisoned Shroom",
        "t": "4",
        "img": {
            "sheet": "23",
            "x": 2,
            "y": 5
        },
        "params": {
            "health": 80,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 243,
                    "chance": 0.6
                }
            ],
            "combat_level": 85
        },
        "temp": {
            "health": 80,
            "busy": false,
            "total_defense": 80,
            "total_strength": 60,
            "total_accuracy": 120
        },
        "locations": {
            "Whiland": 1,
            "Lost Woods": 20
        }
    },
    {
        "id": 40,
        "n": "Fire Shroom",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 4,
            "y": 14
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 245,
                    "chance": 0.5
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 60,
            "total_strength": 80,
            "total_accuracy": 140
        },
        "locations": {
            "Whiland": 2,
            "Hell": 10
        }
    },
    {
        "id": 41,
        "n": "Lava Shroom",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 5,
            "y": 14
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 244,
                    "chance": 0.5
                }
            ],
            "combat_level": 105
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 100,
            "total_strength": 100,
            "total_accuracy": 120
        },
        "locations": {
            "Whiland": 3,
            "Hell": 17
        }
    },
    {
        "id": 43,
        "n": "Cyclops Knight",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 4,
            "y": 13
        },
        "params": {
            "health": 80,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 221,
                    "chance": 0.02
                },
                {
                    "id": 49,
                    "chance": 0.025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 228,
                    "chance": 0.1
                },
                {
                    "id": 75,
                    "chance": 0.08
                }
            ],
            "combat_level": 97
        },
        "temp": {
            "health": 80,
            "busy": false,
            "total_defense": 108,
            "total_strength": 60,
            "total_accuracy": 140
        },
        "locations": {
            "Reval": 20
        }
    },
    {
        "id": 44,
        "n": "Desert Runner",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 5,
            "y": 9
        },
        "params": {
            "health": 28,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 270,
                    "chance": 0.1
                },
                {
                    "id": 41,
                    "chance": 0.05
                },
                {
                    "id": 274,
                    "chance": 0.1
                },
                {
                    "id": 19,
                    "chance": 0.05
                }
            ],
            "combat_level": 30
        },
        "temp": {
            "health": 28,
            "busy": false,
            "total_defense": 30,
            "total_strength": 20,
            "total_accuracy": 42
        },
        "locations": {
            "Reval": 55
        }
    },
    {
        "id": 45,
        "n": "Desert Orc",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 200,
                    "chance": 0.005
                },
                {
                    "id": 270,
                    "chance": 0.1
                },
                {
                    "id": 264,
                    "chance": 0.1
                },
                {
                    "id": 230,
                    "chance": 0.05
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 146,
                    "chance": 0.0025
                }
            ],
            "combat_level": 106
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 130,
            "total_strength": 70,
            "total_accuracy": 132
        },
        "locations": {
            "Reval": 33
        }
    },
    {
        "id": 46,
        "n": "Orc King",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 0,
            "y": 3
        },
        "params": {
            "health": 110,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 264,
                    "chance": 0.1
                },
                {
                    "id": 858,
                    "chance": 0.0025
                },
                {
                    "id": 1075,
                    "chance": 0.0025
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 268,
                    "chance": 0.05
                },
                {
                    "id": 230,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 285,
                    "chance": 0.03
                }
            ],
            "combat_level": 110
        },
        "temp": {
            "health": 110,
            "busy": false,
            "total_defense": 100,
            "total_strength": 80,
            "total_accuracy": 150
        },
        "locations": {
            "Reval": 21
        }
    },
    {
        "id": 47,
        "n": "Fire Imp",
        "t": "4",
        "img": {
            "sheet": "25",
            "x": 1,
            "y": 10
        },
        "params": {
            "health": 38,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 274,
                    "chance": 0.1
                },
                {
                    "id": 760,
                    "chance": 0.05
                },
                {
                    "id": 856,
                    "chance": 0.0025
                },
                {
                    "id": 292,
                    "chance": 0.05
                },
                {
                    "id": 268,
                    "chance": 0.01
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 42,
                    "chance": 0.05
                }
            ],
            "combat_level": 42
        },
        "temp": {
            "health": 38,
            "busy": false,
            "total_defense": 40,
            "total_strength": 30,
            "total_accuracy": 60
        },
        "locations": {
            "Reval": 36,
            "Blood River": 15
        }
    },
    {
        "id": 48,
        "n": "King Cobra",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 3,
            "y": 4
        },
        "params": {
            "health": 72,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 62,
                    "chance": 0.01
                },
                {
                    "id": 275,
                    "chance": 0.05
                },
                {
                    "id": 284,
                    "chance": 0.05
                },
                {
                    "id": 286,
                    "chance": 0.05
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 61,
                    "chance": 0.05
                }
            ],
            "combat_level": 72
        },
        "temp": {
            "health": 72,
            "busy": false,
            "total_defense": 66,
            "total_strength": 60,
            "total_accuracy": 90
        },
        "locations": {
            "Reval": 23
        }
    },
    {
        "id": 49,
        "n": "Fire Viper",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 5,
            "y": 4
        },
        "params": {
            "health": 48,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 44,
                    "chance": 0.01
                },
                {
                    "id": 206,
                    "chance": 0.1
                },
                {
                    "id": 212,
                    "chance": 0.05
                },
                {
                    "id": 260,
                    "chance": 0.02
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 42,
                    "chance": 0.02
                }
            ],
            "combat_level": 58
        },
        "temp": {
            "health": 48,
            "busy": false,
            "total_defense": 72,
            "total_strength": 50,
            "total_accuracy": 62
        },
        "locations": {
            "Reval": 12,
            "Blood River": 17
        }
    },
    {
        "id": 50,
        "n": "Fire Ant",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 7,
            "y": 0
        },
        "params": {
            "health": 72,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 44,
                    "chance": 0.0025
                },
                {
                    "id": 205,
                    "chance": 0.1
                },
                {
                    "id": 210,
                    "chance": 0.05
                },
                {
                    "id": 260,
                    "chance": 0.02
                },
                {
                    "id": 247,
                    "chance": 0.02
                },
                {
                    "id": 303,
                    "chance": 0.01
                }
            ],
            "combat_level": 86
        },
        "temp": {
            "health": 72,
            "busy": false,
            "total_defense": 120,
            "total_strength": 60,
            "total_accuracy": 92
        },
        "locations": {
            "Reval": 12
        }
    },
    {
        "id": 51,
        "n": "Wind Elemental",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 7,
            "y": 4
        },
        "params": {
            "health": 66,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 81,
                    "chance": 0.04
                },
                {
                    "id": 205,
                    "chance": 0.1
                },
                {
                    "id": 212,
                    "chance": 0.05
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 285,
                    "chance": 0.005
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 48,
                    "chance": 0.005
                },
                {
                    "id": 418,
                    "chance": 0.001
                }
            ],
            "combat_level": 70
        },
        "temp": {
            "health": 66,
            "busy": false,
            "total_defense": 70,
            "total_strength": 54,
            "total_accuracy": 90
        },
        "locations": {
            "Narwa": 13
        }
    },
    {
        "id": 52,
        "n": "Ice Troglodyte",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 0,
            "y": 5
        },
        "params": {
            "health": 82,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 81,
                    "chance": 0.04
                },
                {
                    "id": 46,
                    "chance": 0.0025
                },
                {
                    "id": 212,
                    "chance": 0.05
                },
                {
                    "id": 285,
                    "chance": 0.005
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 146,
                    "chance": 0.0025
                }
            ],
            "combat_level": 90
        },
        "temp": {
            "health": 82,
            "busy": false,
            "total_defense": 108,
            "total_strength": 70,
            "total_accuracy": 100
        },
        "locations": {
            "Narwa": 11
        }
    },
    {
        "id": 53,
        "n": "Frozen Bat",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 3,
            "y": 0
        },
        "params": {
            "health": 76,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 83,
                    "chance": 0.02
                },
                {
                    "id": 204,
                    "chance": 0.05
                },
                {
                    "id": 221,
                    "chance": 0.005
                },
                {
                    "id": 61,
                    "chance": 0.01
                },
                {
                    "id": 293,
                    "chance": 0.005
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 83
        },
        "temp": {
            "health": 76,
            "busy": false,
            "total_defense": 80,
            "total_strength": 76,
            "total_accuracy": 100
        },
        "locations": {
            "Narwa": 12
        }
    },
    {
        "id": 54,
        "n": "Ice Giant",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 110,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 83,
                    "chance": 0.02
                },
                {
                    "id": 207,
                    "chance": 0.05
                },
                {
                    "id": 222,
                    "chance": 0.003
                },
                {
                    "id": 259,
                    "chance": 0.1
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 163,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 115
        },
        "temp": {
            "health": 110,
            "busy": false,
            "total_defense": 120,
            "total_strength": 80,
            "total_accuracy": 150
        },
        "locations": {
            "Narwa": 16
        }
    },
    {
        "id": 55,
        "n": "Ice Lizard",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 3,
            "y": 10
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 98,
                    "chance": 0.02
                },
                {
                    "id": 261,
                    "chance": 0.05
                },
                {
                    "id": 267,
                    "chance": 0.08
                },
                {
                    "id": 862,
                    "chance": 0.0025
                },
                {
                    "id": 1075,
                    "chance": 0.0025
                },
                {
                    "id": 144,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 201,
                    "chance": 0.01
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 130
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 150,
            "total_strength": 90,
            "total_accuracy": 150
        },
        "locations": {
            "Narwa": 17
        }
    },
    {
        "id": 56,
        "n": "Ice Golem",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 150,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 89,
                    "chance": 0.02
                },
                {
                    "id": 298,
                    "chance": 0.05
                },
                {
                    "id": 299,
                    "chance": 0.05
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 180,
                    "chance": 0.0025
                },
                {
                    "id": 217,
                    "chance": 0.05
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 363,
                    "chance": 0.0025
                }
            ],
            "combat_level": 150
        },
        "temp": {
            "health": 150,
            "busy": false,
            "total_defense": 150,
            "total_strength": 150,
            "total_accuracy": 150
        },
        "locations": {
            "Narwa": 12
        }
    },
    {
        "id": 57,
        "n": "Frozen Spirit",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 4,
            "y": 10
        },
        "params": {
            "health": 280,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 109,
                    "chance": 0.02
                },
                {
                    "id": 301,
                    "chance": 0.0025
                },
                {
                    "id": 258,
                    "chance": 0.05
                },
                {
                    "id": 169,
                    "chance": 0.0025
                },
                {
                    "id": 378,
                    "chance": 0.0025
                },
                {
                    "id": 363,
                    "chance": 0.0025
                },
                {
                    "id": 467,
                    "chance": 0.0025
                },
                {
                    "id": 248,
                    "chance": 0.05
                },
                {
                    "id": 194,
                    "chance": 0.01
                }
            ],
            "combat_level": 250
        },
        "temp": {
            "health": 280,
            "busy": false,
            "total_defense": 300,
            "total_strength": 120,
            "total_accuracy": 300
        },
        "locations": {
            "Narwa": 16
        }
    },
    {
        "id": 58,
        "n": "Wind Protector",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 6,
            "y": 5
        },
        "params": {
            "health": 66,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 89,
                    "chance": 0.02
                },
                {
                    "id": 205,
                    "chance": 0.05
                },
                {
                    "id": 861,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 994,
                    "chance": 0.0025
                },
                {
                    "id": 220,
                    "chance": 0.05
                },
                {
                    "id": 58,
                    "chance": 0.01
                },
                {
                    "id": 18,
                    "chance": 0.03
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 74
        },
        "temp": {
            "health": 66,
            "busy": false,
            "total_defense": 100,
            "total_strength": 40,
            "total_accuracy": 90
        },
        "locations": {
            "Narwa": 7,
            "Clouds": 9
        }
    },
    {
        "id": 59,
        "n": "Azure Golem",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 2,
            "y": 6
        },
        "params": {
            "health": 180,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 383,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 384,
                    "chance": 0.005
                }
            ],
            "combat_level": 122
        },
        "temp": {
            "health": 180,
            "busy": false,
            "total_defense": 108,
            "total_strength": 85,
            "total_accuracy": 115
        },
        "locations": {
            "Rakblood": 26
        }
    },
    {
        "id": 60,
        "n": "Bronze Golem",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 4,
            "y": 6
        },
        "params": {
            "health": 34,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 33,
                    "chance": 0.05
                },
                {
                    "id": 32,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 34,
                    "chance": 0.05
                }
            ],
            "combat_level": 26
        },
        "temp": {
            "health": 34,
            "busy": false,
            "total_defense": 20,
            "total_strength": 30,
            "total_accuracy": 20
        },
        "locations": {
            "Dorpat": 4,
            "Rakblood": 43
        }
    },
    {
        "id": 61,
        "n": "Coal Golem",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 5,
            "y": 8
        },
        "params": {
            "health": 52,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 31,
                    "chance": 0.05
                },
                {
                    "id": 186,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 194,
                    "chance": 0.0015
                }
            ],
            "combat_level": 63
        },
        "temp": {
            "health": 52,
            "busy": false,
            "total_defense": 100,
            "total_strength": 50,
            "total_accuracy": 50
        },
        "locations": {
            "Rakblood": 26
        }
    },
    {
        "id": 62,
        "n": "Iron Golem",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 3,
            "y": 8
        },
        "params": {
            "health": 52,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 23,
                    "chance": 0.03
                },
                {
                    "id": 31,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 860,
                    "chance": 0.0025
                },
                {
                    "id": 1071,
                    "chance": 0.0025
                },
                {
                    "id": 50,
                    "chance": 0.03
                }
            ],
            "combat_level": 48
        },
        "temp": {
            "health": 52,
            "busy": false,
            "total_defense": 50,
            "total_strength": 30,
            "total_accuracy": 60
        },
        "locations": {
            "Dorpat": 2,
            "Rakblood": 12
        }
    },
    {
        "id": 63,
        "n": "Steel Golem",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 2,
            "y": 8
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 31,
                    "chance": 0.04
                },
                {
                    "id": 186,
                    "chance": 0.03
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 291,
                    "chance": 0.01
                }
            ],
            "combat_level": 73
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 80,
            "total_strength": 40,
            "total_accuracy": 80
        },
        "locations": {
            "Rakblood": 31
        }
    },
    {
        "id": 64,
        "n": "Rock Spirit",
        "t": "4",
        "img": {
            "sheet": "25",
            "x": 4,
            "y": 6
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 89,
                    "chance": 0.02
                },
                {
                    "id": 205,
                    "chance": 0.05
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 150,
                    "chance": 0.0025
                },
                {
                    "id": 289,
                    "chance": 0.025
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 419,
                    "chance": 0.005
                }
            ],
            "combat_level": 92
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 100,
            "total_strength": 66,
            "total_accuracy": 110
        },
        "locations": {
            "Rakblood": 30
        }
    },
    {
        "id": 65,
        "n": "Mutated Hydra",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 2,
            "y": 6
        },
        "params": {
            "health": 86,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 85,
                    "chance": 0.02
                },
                {
                    "id": 142,
                    "chance": 0.01
                },
                {
                    "id": 228,
                    "chance": 0.1
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 259,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.03
                },
                {
                    "id": 52,
                    "chance": 0.01
                }
            ],
            "combat_level": 84
        },
        "temp": {
            "health": 86,
            "busy": false,
            "total_defense": 90,
            "total_strength": 50,
            "total_accuracy": 110
        },
        "locations": {
            "Rakblood": 20
        }
    },
    {
        "id": 66,
        "n": "Dark Orc",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 5,
            "y": 4
        },
        "params": {
            "health": 38,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 77,
                    "chance": 0.02
                },
                {
                    "id": 205,
                    "chance": 0.05
                },
                {
                    "id": 220,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 57,
                    "chance": 0.01
                },
                {
                    "id": 856,
                    "chance": 0.0025
                },
                {
                    "id": 230,
                    "chance": 0.01
                },
                {
                    "id": 264,
                    "chance": 0.05
                }
            ],
            "combat_level": 47
        },
        "temp": {
            "health": 38,
            "busy": false,
            "total_defense": 40,
            "total_strength": 50,
            "total_accuracy": 60
        },
        "locations": {
            "Rakblood": 7
        }
    },
    {
        "id": 67,
        "n": "Skeleton Knight",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 3,
            "y": 6
        },
        "params": {
            "health": 33,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 89,
                    "chance": 0.02
                },
                {
                    "id": 270,
                    "chance": 0.05
                },
                {
                    "id": 269,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 860,
                    "chance": 0.0025
                },
                {
                    "id": 1269,
                    "chance": 0.0015
                },
                {
                    "id": 1071,
                    "chance": 0.0025
                },
                {
                    "id": 1359,
                    "chance": 0.0015
                },
                {
                    "id": 51,
                    "chance": 0.01
                },
                {
                    "id": 24,
                    "chance": 0.02
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 38
        },
        "temp": {
            "health": 33,
            "busy": false,
            "total_defense": 39,
            "total_strength": 40,
            "total_accuracy": 40
        },
        "locations": {
            "Dungeon": 13,
            "Walco": 26
        }
    },
    {
        "id": 68,
        "n": "Baby Minotaur Skeleton",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 3,
            "y": 8
        },
        "params": {
            "health": 18,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 11,
                    "chance": 0.02
                },
                {
                    "id": 4,
                    "chance": 0.03
                },
                {
                    "id": 220,
                    "chance": 0.05
                },
                {
                    "id": 274,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 269,
                    "chance": 0.005
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 25
        },
        "temp": {
            "health": 18,
            "busy": false,
            "total_defense": 30,
            "total_strength": 22,
            "total_accuracy": 30
        },
        "locations": {
            "Dungeon": 19
        }
    },
    {
        "id": 69,
        "n": "Snow Troll Knight",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 125,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 101,
                    "chance": 0.02
                },
                {
                    "id": 152,
                    "chance": 0.03
                },
                {
                    "id": 198,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 207,
                    "chance": 0.1
                },
                {
                    "id": 261,
                    "chance": 0.02
                },
                {
                    "id": 216,
                    "chance": 0.01
                }
            ],
            "combat_level": 150
        },
        "temp": {
            "health": 125,
            "busy": false,
            "total_defense": 175,
            "total_strength": 100,
            "total_accuracy": 200
        },
        "locations": {
            "Narwa": 16
        }
    },
    {
        "id": 70,
        "n": "Snow Troll Assassin",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 6,
            "y": 6
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 97,
                    "chance": 0.02
                },
                {
                    "id": 207,
                    "chance": 0.08
                },
                {
                    "id": 222,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 862,
                    "chance": 0.0025
                },
                {
                    "id": 259,
                    "chance": 0.01
                },
                {
                    "id": 268,
                    "chance": 0.05
                },
                {
                    "id": 155,
                    "chance": 0.0025
                }
            ],
            "combat_level": 120
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 120,
            "total_strength": 80,
            "total_accuracy": 180
        },
        "locations": {
            "Narwa": 26
        }
    },
    {
        "id": 71,
        "n": "Snow Troll Defender",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 3,
            "y": 6
        },
        "params": {
            "health": 76,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 87,
                    "chance": 0.02
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 272,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 259,
                    "chance": 0.01
                },
                {
                    "id": 865,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 284,
                    "chance": 0.05
                },
                {
                    "id": 302,
                    "chance": 0.01
                }
            ],
            "combat_level": 80
        },
        "temp": {
            "health": 76,
            "busy": false,
            "total_defense": 84,
            "total_strength": 60,
            "total_accuracy": 100
        },
        "locations": {
            "Narwa": 24
        }
    },
    {
        "id": 72,
        "n": "Snow Gungan Priest",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 3,
            "y": 8
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 83,
                    "chance": 0.02
                },
                {
                    "id": 275,
                    "chance": 0.05
                },
                {
                    "id": 188,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 274,
                    "chance": 0.01
                },
                {
                    "id": 48,
                    "chance": 0.005
                },
                {
                    "id": 445,
                    "chance": 0.0025
                },
                {
                    "id": 449,
                    "chance": 0.005
                },
                {
                    "id": 453,
                    "chance": 0.004
                }
            ],
            "combat_level": 90
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 110,
            "total_strength": 50,
            "total_accuracy": 110
        },
        "locations": {
            "Narwa": 28
        }
    },
    {
        "id": 73,
        "n": "Snow Gungan Lord",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 0,
            "y": 8
        },
        "params": {
            "health": 120,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 99,
                    "chance": 0.02
                },
                {
                    "id": 143,
                    "chance": 0.05
                },
                {
                    "id": 275,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 228,
                    "chance": 0.05
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 176,
                    "chance": 0.005
                }
            ],
            "combat_level": 130
        },
        "temp": {
            "health": 120,
            "busy": false,
            "total_defense": 150,
            "total_strength": 90,
            "total_accuracy": 160
        },
        "locations": {
            "Narwa": 15
        }
    },
    {
        "id": 74,
        "n": "Baby Elemental Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 7,
            "y": 0
        },
        "params": {
            "health": 120,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 101,
                    "chance": 0.02
                },
                {
                    "id": 255,
                    "chance": 0.01
                },
                {
                    "id": 229,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 262,
                    "chance": 0.001
                },
                {
                    "id": 301,
                    "chance": 0.01
                }
            ],
            "combat_level": 130
        },
        "temp": {
            "health": 120,
            "busy": false,
            "total_defense": 120,
            "total_strength": 100,
            "total_accuracy": 180
        },
        "locations": {
            "Narwa": 16
        }
    },
    {
        "id": 75,
        "n": "Adult Elemental Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 7,
            "y": 2
        },
        "params": {
            "health": 160,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 101,
                    "chance": 0.05
                },
                {
                    "id": 255,
                    "chance": 0.02
                },
                {
                    "id": 229,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 262,
                    "chance": 0.01
                },
                {
                    "id": 397,
                    "chance": 0.0025
                },
                {
                    "id": 267,
                    "chance": 0.05
                },
                {
                    "id": 151,
                    "chance": 0.01
                }
            ],
            "combat_level": 190
        },
        "temp": {
            "health": 160,
            "busy": false,
            "total_defense": 250,
            "total_strength": 100,
            "total_accuracy": 250
        },
        "locations": {
            "Narwa": 10
        }
    },
    {
        "id": 76,
        "n": "King Elemental Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 7,
            "y": 3
        },
        "params": {
            "health": 350,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 101,
                    "chance": 0.02
                },
                {
                    "id": 256,
                    "chance": 0.03
                },
                {
                    "id": 229,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.05
                },
                {
                    "id": 262,
                    "chance": 0.01
                },
                {
                    "id": 399,
                    "chance": 0.0025
                },
                {
                    "id": 436,
                    "chance": 0.0025
                },
                {
                    "id": 267,
                    "chance": 0.05
                },
                {
                    "id": 616,
                    "chance": 0.0025
                },
                {
                    "id": 905,
                    "chance": 0.0025
                },
                {
                    "id": 183,
                    "chance": 0.0025
                },
                {
                    "id": 128,
                    "chance": 0.0025
                }
            ],
            "combat_level": 300
        },
        "temp": {
            "health": 350,
            "busy": false,
            "total_defense": 330,
            "total_strength": 170,
            "total_accuracy": 350
        },
        "locations": {
            "Narwa": 9
        }
    },
    {
        "id": 87,
        "n": "Flame Phoenix",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 8,
            "y": 5
        },
        "params": {
            "health": 180,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 157,
                    "chance": 0.0025
                },
                {
                    "id": 371,
                    "chance": 0.01
                },
                {
                    "id": 165,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 652,
                    "chance": 0.0025
                },
                {
                    "id": 421,
                    "chance": 0.01
                }
            ],
            "combat_level": 195
        },
        "temp": {
            "health": 180,
            "busy": false,
            "total_defense": 200,
            "total_strength": 100,
            "total_accuracy": 300
        },
        "locations": {
            "Blood River": 14,
            "Hell": 21,
            "Heaven": 10,
            "Pernau": 1
        }
    },
    {
        "id": 88,
        "n": "Fire Behemoth",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 136,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 401,
                    "chance": 0.01
                },
                {
                    "id": 89,
                    "chance": 0.01
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 866,
                    "chance": 0.0025
                },
                {
                    "id": 340,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 276,
                    "chance": 0.005
                },
                {
                    "id": 135,
                    "chance": 0.0035
                }
            ],
            "combat_level": 134
        },
        "temp": {
            "health": 136,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Blood River": 11,
            "Hell": 31
        }
    },
    {
        "id": 89,
        "n": "Flaming Giant",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 0,
            "y": 2
        },
        "params": {
            "health": 110,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 83,
                    "chance": 0.02
                },
                {
                    "id": 207,
                    "chance": 0.05
                },
                {
                    "id": 222,
                    "chance": 0.003
                },
                {
                    "id": 259,
                    "chance": 0.1
                },
                {
                    "id": 129,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 115
        },
        "temp": {
            "health": 110,
            "busy": false,
            "total_defense": 120,
            "total_strength": 80,
            "total_accuracy": 150
        },
        "locations": {
            "Hell": 25
        }
    },
    {
        "id": 90,
        "n": "Blood Lizard",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 180,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 103,
                    "chance": 0.02
                },
                {
                    "id": 207,
                    "chance": 0.05
                },
                {
                    "id": 147,
                    "chance": 0.01
                },
                {
                    "id": 259,
                    "chance": 0.1
                },
                {
                    "id": 342,
                    "chance": 0.0025
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 145
        },
        "temp": {
            "health": 180,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Blood River": 3,
            "Hell": 56
        }
    },
    {
        "id": 91,
        "n": "Hell Angel",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 2,
            "y": 6
        },
        "params": {
            "health": 156,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 369,
                    "chance": 0.02
                },
                {
                    "id": 180,
                    "chance": 0.005
                },
                {
                    "id": 163,
                    "chance": 0.0025
                },
                {
                    "id": 103,
                    "chance": 0.05
                },
                {
                    "id": 221,
                    "chance": 0.01
                }
            ],
            "combat_level": 139
        },
        "temp": {
            "health": 156,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Hell": 12
        }
    },
    {
        "id": 93,
        "n": "Battlemage",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 86,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 457,
                    "chance": 0.0025
                },
                {
                    "id": 455,
                    "chance": 0.0025
                },
                {
                    "id": 438,
                    "chance": 0.0025
                },
                {
                    "id": 79,
                    "chance": 0.05
                },
                {
                    "id": 412,
                    "chance": 0.01
                }
            ],
            "combat_level": 84
        },
        "temp": {
            "health": 86,
            "busy": false,
            "total_defense": 100,
            "total_strength": 50,
            "total_accuracy": 100
        },
        "locations": {
            "Heaven": 24
        }
    },
    {
        "id": 94,
        "n": "Dwarf Battlemage",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 1,
            "y": 5
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 457,
                    "chance": 0.0025
                },
                {
                    "id": 455,
                    "chance": 0.0025
                },
                {
                    "id": 273,
                    "chance": 0.05
                }
            ],
            "combat_level": 88
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 100,
            "total_strength": 60,
            "total_accuracy": 100
        },
        "locations": {
            "Heaven": 19
        }
    },
    {
        "id": 95,
        "n": "Confused Merlin",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 126,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 450,
                    "chance": 0.0025
                },
                {
                    "id": 456,
                    "chance": 0.0025
                },
                {
                    "id": 413,
                    "chance": 0.01
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 414,
                    "chance": 0.01
                },
                {
                    "id": 430,
                    "chance": 0.0025
                }
            ],
            "combat_level": 114
        },
        "temp": {
            "health": 126,
            "busy": false,
            "total_defense": 50,
            "total_strength": 150,
            "total_accuracy": 130
        },
        "locations": {
            "Heaven": 17
        }
    },
    {
        "id": 96,
        "n": "Merlin",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 6,
            "y": 3
        },
        "params": {
            "health": 136,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 450,
                    "chance": 0.0025
                },
                {
                    "id": 456,
                    "chance": 0.0025
                },
                {
                    "id": 415,
                    "chance": 0.01
                },
                {
                    "id": 414,
                    "chance": 0.01
                },
                {
                    "id": 445,
                    "chance": 0.0025
                }
            ],
            "combat_level": 134
        },
        "temp": {
            "health": 136,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Heaven": 5
        }
    },
    {
        "id": 97,
        "n": "Young Gandalf",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 2,
            "y": 1
        },
        "params": {
            "health": 186,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 451,
                    "chance": 0.0025
                },
                {
                    "id": 432,
                    "chance": 0.0025
                },
                {
                    "id": 416,
                    "chance": 0.01
                },
                {
                    "id": 417,
                    "chance": 0.01
                },
                {
                    "id": 445,
                    "chance": 0.0025
                }
            ],
            "combat_level": 154
        },
        "temp": {
            "health": 186,
            "busy": false,
            "total_defense": 150,
            "total_strength": 130,
            "total_accuracy": 150
        },
        "locations": {
            "Heaven": 28
        }
    },
    {
        "id": 98,
        "n": "Gandalf The Grey",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 186,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 451,
                    "chance": 0.0025
                },
                {
                    "id": 454,
                    "chance": 0.0025
                },
                {
                    "id": 418,
                    "chance": 0.01
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 420,
                    "chance": 0.005
                },
                {
                    "id": 445,
                    "chance": 0.0025
                }
            ],
            "combat_level": 184
        },
        "temp": {
            "health": 186,
            "busy": false,
            "total_defense": 200,
            "total_strength": 150,
            "total_accuracy": 200
        },
        "locations": {
            "Heaven": 27
        }
    },
    {
        "id": 99,
        "n": "Zeus",
        "t": "4",
        "img": {
            "sheet": "25",
            "x": 4,
            "y": 11
        },
        "params": {
            "health": 200,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 463,
                    "chance": 0.0025
                },
                {
                    "id": 454,
                    "chance": 0.0025
                },
                {
                    "id": 981,
                    "chance": 0.003
                },
                {
                    "id": 52,
                    "chance": 0.0025
                },
                {
                    "id": 458,
                    "chance": 0.005
                },
                {
                    "id": 1012,
                    "chance": 0.01
                },
                {
                    "id": 855,
                    "chance": 0.0025
                },
                {
                    "id": 460,
                    "chance": 0.0025
                },
                {
                    "id": 446,
                    "chance": 0.0025
                }
            ],
            "combat_level": 200
        },
        "temp": {
            "health": 200,
            "busy": false,
            "total_defense": 250,
            "total_strength": 100,
            "total_accuracy": 250
        },
        "locations": {
            "Clouds": 4,
            "Heaven": 18
        }
    },
    {
        "id": 100,
        "n": "Chicken",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 1,
            "y": 0
        },
        "params": {
            "health": 2,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 3,
                    "chance": 0.25
                },
                {
                    "id": 1302,
                    "chance": 0.0025
                },
                {
                    "id": 492,
                    "chance": 0.25
                }
            ],
            "combat_level": 1
        },
        "temp": {
            "health": 2,
            "busy": false,
            "total_defense": 1,
            "total_strength": 1,
            "total_accuracy": 1
        },
        "locations": {
            "Dorpat": 11
        }
    },
    {
        "id": 101,
        "n": "Hen",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 2,
            "y": 0
        },
        "params": {
            "health": 5,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 3,
                    "chance": 0.25
                },
                {
                    "id": 7,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1302,
                    "chance": 0.0025
                },
                {
                    "id": 492,
                    "chance": 0.25
                }
            ],
            "combat_level": 2
        },
        "temp": {
            "health": 5,
            "busy": false,
            "total_defense": 1,
            "total_strength": 1,
            "total_accuracy": 1
        },
        "locations": {
            "Dorpat": 9
        }
    },
    {
        "id": 102,
        "n": "Cow",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 3,
            "y": 0
        },
        "params": {
            "health": 8,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 494,
                    "chance": 0.15
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 5,
                    "chance": 0.01
                }
            ],
            "combat_level": 7
        },
        "temp": {
            "health": 8,
            "busy": false,
            "total_defense": 5,
            "total_strength": 5,
            "total_accuracy": 10
        },
        "locations": {
            "Dorpat": 12
        }
    },
    {
        "id": 103,
        "n": "Deer",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 18,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 494,
                    "chance": 0.1
                },
                {
                    "id": 204,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 424,
                    "chance": 0.0025
                }
            ],
            "combat_level": 18
        },
        "temp": {
            "health": 18,
            "busy": false,
            "total_defense": 17,
            "total_strength": 17,
            "total_accuracy": 20
        },
        "locations": {
            "Whiland": 84
        }
    },
    {
        "id": 104,
        "n": "Bear",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 4,
            "y": 0
        },
        "params": {
            "health": 38,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 270,
                    "chance": 0.1
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 41,
                    "chance": 0.01
                }
            ],
            "combat_level": 34
        },
        "temp": {
            "health": 38,
            "busy": false,
            "total_defense": 30,
            "total_strength": 38,
            "total_accuracy": 30
        },
        "locations": {
            "Narwa": 7,
            "Whiland": 65
        }
    },
    {
        "id": 105,
        "n": "Death Angel",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 3,
            "y": 6
        },
        "params": {
            "health": 220,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 369,
                    "chance": 0.05
                },
                {
                    "id": 347,
                    "chance": 0.0025
                },
                {
                    "id": 661,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 440,
                    "chance": 0.0025
                },
                {
                    "id": 415,
                    "chance": 0.01
                },
                {
                    "id": 376,
                    "chance": 0.0025
                }
            ],
            "combat_level": 180
        },
        "temp": {
            "health": 220,
            "busy": false,
            "total_defense": 170,
            "total_strength": 130,
            "total_accuracy": 200
        },
        "locations": {
            "Heaven": 13
        }
    },
    {
        "id": 106,
        "n": "Griffin Baby",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 5,
            "y": 9
        },
        "params": {
            "health": 28,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 423,
                    "chance": 0.01
                },
                {
                    "id": 234,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 13,
                    "chance": 0.01
                }
            ],
            "combat_level": 22
        },
        "temp": {
            "health": 28,
            "busy": false,
            "total_defense": 30,
            "total_strength": 10,
            "total_accuracy": 20
        },
        "locations": {
            "Clouds": 18
        }
    },
    {
        "id": 107,
        "n": "Griffin",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 4,
            "y": 1
        },
        "params": {
            "health": 54,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 27,
                    "chance": 0.01
                },
                {
                    "id": 234,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 55,
                    "chance": 0.0025
                }
            ],
            "combat_level": 46
        },
        "temp": {
            "health": 54,
            "busy": false,
            "total_defense": 45,
            "total_strength": 40,
            "total_accuracy": 45
        },
        "locations": {
            "Clouds": 13
        }
    },
    {
        "id": 108,
        "n": "King Black Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 7,
            "y": 5
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 169,
                    "chance": 0.0025
                },
                {
                    "id": 181,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 702,
                    "chance": 0.0025
                },
                {
                    "id": 257,
                    "chance": 0.0025
                },
                {
                    "id": 364,
                    "chance": 0.0025
                }
            ],
            "combat_level": 200
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 150,
            "total_strength": 150,
            "total_accuracy": 250
        },
        "locations": {
            "Clouds": 3,
            "Heaven": 14,
            "Dragon's Lair": 16
        }
    },
    {
        "id": 109,
        "n": "Naga",
        "t": "4",
        "img": {
            "sheet": "61",
            "x": 6,
            "y": 0
        },
        "params": {
            "health": 58,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 275,
                    "chance": 0.05
                },
                {
                    "id": 1257,
                    "chance": 0.002
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 299,
                    "chance": 0.003
                }
            ],
            "combat_level": 62
        },
        "temp": {
            "health": 58,
            "busy": false,
            "total_defense": 50,
            "total_strength": 50,
            "total_accuracy": 90
        },
        "locations": {
            "Clouds": 14,
            "Cesis": 28,
            "Fellin": 29
        }
    },
    {
        "id": 110,
        "n": "Royal Griffin",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 74,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 219,
                    "chance": 0.0025
                },
                {
                    "id": 54,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 695,
                    "chance": 0.0025
                },
                {
                    "id": 79,
                    "chance": 0.01
                }
            ],
            "combat_level": 76
        },
        "temp": {
            "health": 74,
            "busy": false,
            "total_defense": 70,
            "total_strength": 70,
            "total_accuracy": 90
        },
        "locations": {
            "Clouds": 35
        }
    },
    {
        "id": 111,
        "n": "Adult Sapphire Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 0,
            "y": 3
        },
        "params": {
            "health": 140,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 95,
                    "chance": 0.05
                },
                {
                    "id": 250,
                    "chance": 0.005
                },
                {
                    "id": 216,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 263,
                    "chance": 0.01
                },
                {
                    "id": 35,
                    "chance": 0.0025
                },
                {
                    "id": 397,
                    "chance": 0.0025
                },
                {
                    "id": 267,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.0025
                }
            ],
            "combat_level": 110
        },
        "temp": {
            "health": 140,
            "busy": false,
            "total_defense": 110,
            "total_strength": 80,
            "total_accuracy": 110
        },
        "locations": {
            "Clouds": 4,
            "Heaven": 22
        }
    },
    {
        "id": 112,
        "n": "King Sapphire Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 1,
            "y": 4
        },
        "params": {
            "health": 160,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 95,
                    "chance": 0.05
                },
                {
                    "id": 250,
                    "chance": 0.01
                },
                {
                    "id": 216,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 263,
                    "chance": 0.01
                },
                {
                    "id": 397,
                    "chance": 0.0025
                },
                {
                    "id": 267,
                    "chance": 0.05
                },
                {
                    "id": 165,
                    "chance": 0.0025
                }
            ],
            "combat_level": 140
        },
        "temp": {
            "health": 160,
            "busy": false,
            "total_defense": 160,
            "total_strength": 100,
            "total_accuracy": 140
        },
        "locations": {
            "Clouds": 6,
            "Heaven": 35
        }
    },
    {
        "id": 113,
        "n": "Beholder King",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 0,
            "y": 2
        },
        "params": {
            "health": 66,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 45,
                    "chance": 0.0025
                },
                {
                    "id": 53,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 682,
                    "chance": 0.0025
                },
                {
                    "id": 59,
                    "chance": 0.008
                }
            ],
            "combat_level": 84
        },
        "temp": {
            "health": 66,
            "busy": false,
            "total_defense": 70,
            "total_strength": 120,
            "total_accuracy": 80
        },
        "locations": {
            "Clouds": 29
        }
    },
    {
        "id": 114,
        "n": "Beholder",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 54,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 77,
                    "chance": 0.05
                },
                {
                    "id": 861,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 64,
                    "chance": 0.005
                }
            ],
            "combat_level": 74
        },
        "temp": {
            "health": 54,
            "busy": false,
            "total_defense": 82,
            "total_strength": 80,
            "total_accuracy": 80
        },
        "locations": {
            "Clouds": 17
        }
    },
    {
        "id": 115,
        "n": "Ettin",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 4,
            "y": 4
        },
        "params": {
            "health": 82,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 366,
                    "chance": 0.0025
                },
                {
                    "id": 368,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 426,
                    "chance": 0.0025
                }
            ],
            "combat_level": 83
        },
        "temp": {
            "health": 82,
            "busy": false,
            "total_defense": 75,
            "total_strength": 100,
            "total_accuracy": 75
        },
        "locations": {
            "Clouds": 8
        }
    },
    {
        "id": 116,
        "n": "Blood Battlemage",
        "t": "4",
        "img": {
            "sheet": "2",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 106,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 457,
                    "chance": 0.0025
                },
                {
                    "id": 455,
                    "chance": 0.0025
                },
                {
                    "id": 438,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 79,
                    "chance": 0.05
                },
                {
                    "id": 412,
                    "chance": 0.01
                }
            ],
            "combat_level": 94
        },
        "temp": {
            "health": 106,
            "busy": false,
            "total_defense": 100,
            "total_strength": 50,
            "total_accuracy": 120
        },
        "locations": {
            "Clouds": 9
        }
    },
    {
        "id": 119,
        "n": "Apeman",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 24,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 47,
                    "chance": 0.001
                },
                {
                    "id": 37,
                    "chance": 0.001
                },
                {
                    "id": 20,
                    "chance": 0.001
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 124,
                    "chance": 0.0025
                },
                {
                    "id": 473,
                    "chance": 0.0025
                },
                {
                    "id": 9,
                    "chance": 0.005
                }
            ],
            "combat_level": 21
        },
        "temp": {
            "health": 24,
            "busy": false,
            "total_defense": 20,
            "total_strength": 20,
            "total_accuracy": 20
        },
        "locations": {
            "Dorpat": 20
        }
    },
    {
        "id": 120,
        "n": "Dragonfly",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 1,
            "y": 7
        },
        "params": {
            "health": 20,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 5,
                    "chance": 0.003
                },
                {
                    "id": 21,
                    "chance": 0.004
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 0,
                    "chance": 0.007
                },
                {
                    "id": 38,
                    "chance": 0.005
                }
            ],
            "combat_level": 20
        },
        "temp": {
            "health": 20,
            "busy": false,
            "total_defense": 20,
            "total_strength": 20,
            "total_accuracy": 20
        },
        "locations": {
            "Dorpat": 24,
            "Fellin": 21
        }
    },
    {
        "id": 124,
        "n": "[BOSS] Orc Overlord",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 7,
            "y": 0
        },
        "params": {
            "health": 1100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.05
                },
                {
                    "id": 178,
                    "chance": 0.05
                },
                {
                    "id": 1127,
                    "chance": 0.05
                },
                {
                    "id": 1305,
                    "chance": 0.05
                },
                {
                    "id": 363,
                    "chance": 0.05
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 167,
                    "chance": 0.05
                },
                {
                    "id": 651,
                    "chance": 0.03
                },
                {
                    "id": 481,
                    "chance": 0.06
                },
                {
                    "id": 497,
                    "chance": 0.07
                },
                {
                    "id": 710,
                    "chance": 0.02
                },
                {
                    "id": 593,
                    "chance": 0.03
                },
                {
                    "id": 476,
                    "chance": 0.05
                }
            ],
            "combat_level": 450
        },
        "temp": {
            "health": 1100,
            "busy": false,
            "total_defense": 250,
            "total_strength": 100,
            "total_accuracy": 350
        },
        "locations": {
            "Reval": 1
        }
    },
    {
        "id": 125,
        "n": "Baby Emerald Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 0
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 91,
                    "chance": 0.05
                },
                {
                    "id": 254,
                    "chance": 0.0025
                },
                {
                    "id": 64,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 231,
                    "chance": 0.0025
                },
                {
                    "id": 198,
                    "chance": 0.005
                },
                {
                    "id": 141,
                    "chance": 0.01
                }
            ],
            "combat_level": 80
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 80,
            "total_strength": 60,
            "total_accuracy": 80
        },
        "locations": {
            "Cesis": 35
        }
    },
    {
        "id": 126,
        "n": "Emerald Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 120,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 93,
                    "chance": 0.05
                },
                {
                    "id": 254,
                    "chance": 0.0035
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 231,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 198,
                    "chance": 0.008
                },
                {
                    "id": 67,
                    "chance": 0.0025
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 120,
            "busy": false,
            "total_defense": 100,
            "total_strength": 60,
            "total_accuracy": 100
        },
        "locations": {
            "Rakblood": 22,
            "Cesis": 44,
            "Dragon's Lair": 5
        }
    },
    {
        "id": 127,
        "n": "Adult Emerald Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 3
        },
        "params": {
            "health": 145,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 93,
                    "chance": 0.05
                },
                {
                    "id": 254,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 231,
                    "chance": 0.0075
                },
                {
                    "id": 198,
                    "chance": 0.01
                },
                {
                    "id": 149,
                    "chance": 0.0025
                }
            ],
            "combat_level": 115
        },
        "temp": {
            "health": 145,
            "busy": false,
            "total_defense": 115,
            "total_strength": 70,
            "total_accuracy": 130
        },
        "locations": {
            "Cesis": 30,
            "Dragon's Lair": 16
        }
    },
    {
        "id": 128,
        "n": "King Emerald Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 4,
            "y": 4
        },
        "params": {
            "health": 160,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 99,
                    "chance": 0.05
                },
                {
                    "id": 254,
                    "chance": 0.008
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 231,
                    "chance": 0.01
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 198,
                    "chance": 0.015
                },
                {
                    "id": 706,
                    "chance": 0.0025
                },
                {
                    "id": 139,
                    "chance": 0.0025
                }
            ],
            "combat_level": 145
        },
        "temp": {
            "health": 160,
            "busy": false,
            "total_defense": 140,
            "total_strength": 100,
            "total_accuracy": 180
        },
        "locations": {
            "Cesis": 16,
            "Dragon's Lair": 15
        }
    },
    {
        "id": 129,
        "n": "Moss Wyvern",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 3,
            "y": 10
        },
        "params": {
            "health": 220,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 364,
                    "chance": 0.0025
                },
                {
                    "id": 462,
                    "chance": 0.0025
                },
                {
                    "id": 698,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 248,
                    "chance": 0.05
                },
                {
                    "id": 199,
                    "chance": 0.03
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 139,
                    "chance": 0.0025
                }
            ],
            "combat_level": 190
        },
        "temp": {
            "health": 220,
            "busy": false,
            "total_defense": 200,
            "total_strength": 140,
            "total_accuracy": 200
        },
        "locations": {
            "Cesis": 5
        }
    },
    {
        "id": 130,
        "n": "Grass Snake",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 0,
            "y": 4
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 406,
                    "chance": 0.05
                },
                {
                    "id": 60,
                    "chance": 0.0025
                },
                {
                    "id": 127,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1358,
                    "chance": 0.0025
                },
                {
                    "id": 307,
                    "chance": 0.03
                },
                {
                    "id": 64,
                    "chance": 0.005
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 659,
                    "chance": 0.0025
                },
                {
                    "id": 75,
                    "chance": 0.05
                }
            ],
            "combat_level": 90
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 100,
            "total_strength": 60,
            "total_accuracy": 100
        },
        "locations": {
            "Cesis": 57,
            "Fellin": 23
        }
    },
    {
        "id": 131,
        "n": "Barbarian Ghost",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 3,
            "y": 9
        },
        "params": {
            "health": 140,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 374,
                    "chance": 0.001
                },
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 686,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 319,
                    "chance": 0.05
                },
                {
                    "id": 475,
                    "chance": 0.0025
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 87,
                    "chance": 0.05
                }
            ],
            "combat_level": 120
        },
        "temp": {
            "health": 140,
            "busy": false,
            "total_defense": 140,
            "total_strength": 60,
            "total_accuracy": 140
        },
        "locations": {
            "Cesis": 38,
            "Fellin": 28
        }
    },
    {
        "id": 132,
        "n": "Barbarian Shaman",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 0,
            "y": 8
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 449,
                    "chance": 0.05
                },
                {
                    "id": 453,
                    "chance": 0.04
                },
                {
                    "id": 166,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 475,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 87,
                    "chance": 0.05
                }
            ],
            "combat_level": 100
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 120,
            "total_strength": 60,
            "total_accuracy": 120
        },
        "locations": {
            "Cesis": 19,
            "Fellin": 15
        }
    },
    {
        "id": 133,
        "n": "Barbarian Berserker",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 0,
            "y": 9
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 45,
                    "chance": 0.0025
                },
                {
                    "id": 143,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 28,
                    "chance": 0.0025
                },
                {
                    "id": 307,
                    "chance": 0.01
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 87,
                    "chance": 0.05
                }
            ],
            "combat_level": 100
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 120,
            "total_strength": 60,
            "total_accuracy": 120
        },
        "locations": {
            "Cesis": 18,
            "Fellin": 30
        }
    },
    {
        "id": 134,
        "n": "Shadow Ghost",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 6,
            "y": 2
        },
        "params": {
            "health": 45,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 17,
                    "chance": 0.1
                },
                {
                    "id": 402,
                    "chance": 0.04
                },
                {
                    "id": 25,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 233,
                    "chance": 0.05
                }
            ],
            "combat_level": 45
        },
        "temp": {
            "health": 45,
            "busy": false,
            "total_defense": 40,
            "total_strength": 40,
            "total_accuracy": 55
        },
        "locations": {
            "Walco": 35
        }
    },
    {
        "id": 135,
        "n": "Spirit",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 45,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 17,
                    "chance": 0.1
                },
                {
                    "id": 303,
                    "chance": 0.025
                },
                {
                    "id": 51,
                    "chance": 0.03
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 864,
                    "chance": 0.0025
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 233,
                    "chance": 0.05
                }
            ],
            "combat_level": 50
        },
        "temp": {
            "health": 45,
            "busy": false,
            "total_defense": 60,
            "total_strength": 45,
            "total_accuracy": 50
        },
        "locations": {
            "Dungeon": 3,
            "Walco": 66
        }
    },
    {
        "id": 136,
        "n": "Poltergeist",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 4,
            "y": 2
        },
        "params": {
            "health": 31,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 17,
                    "chance": 0.1
                },
                {
                    "id": 24,
                    "chance": 0.015
                },
                {
                    "id": 59,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 233,
                    "chance": 0.05
                }
            ],
            "combat_level": 30
        },
        "temp": {
            "health": 31,
            "busy": false,
            "total_defense": 32,
            "total_strength": 28,
            "total_accuracy": 32
        },
        "locations": {
            "Walco": 70
        }
    },
    {
        "id": 137,
        "n": "Energy Ghost",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 4,
            "y": 0
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 17,
                    "chance": 0.1
                },
                {
                    "id": 48,
                    "chance": 0.025
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 233,
                    "chance": 0.05
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 75,
            "total_strength": 75,
            "total_accuracy": 130
        },
        "locations": {
            "Dungeon": 1,
            "Walco": 73
        }
    },
    {
        "id": 138,
        "n": "Skeleton Assassin",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 4,
            "y": 6
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 89,
                    "chance": 0.05
                },
                {
                    "id": 154,
                    "chance": 0.0025
                },
                {
                    "id": 60,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1359,
                    "chance": 0.0025
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 233,
                    "chance": 0.05
                }
            ],
            "combat_level": 115
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 100,
            "total_strength": 70,
            "total_accuracy": 160
        },
        "locations": {
            "Walco": 45
        }
    },
    {
        "id": 152,
        "n": "[BOSS] The Reaper",
        "t": "4",
        "img": {
            "sheet": "44",
            "x": 7,
            "y": 0
        },
        "params": {
            "health": 1600,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.06
                },
                {
                    "id": 178,
                    "chance": 0.06
                },
                {
                    "id": 1127,
                    "chance": 0.06
                },
                {
                    "id": 1305,
                    "chance": 0.06
                },
                {
                    "id": 451,
                    "chance": 0.07
                },
                {
                    "id": 361,
                    "chance": 0.05
                },
                {
                    "id": 144,
                    "chance": 0.07
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 432,
                    "chance": 0.05
                },
                {
                    "id": 182,
                    "chance": 0.04
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 169,
                    "chance": 0.04
                },
                {
                    "id": 593,
                    "chance": 0.03
                }
            ],
            "combat_level": 600
        },
        "temp": {
            "health": 1600,
            "busy": false,
            "total_defense": 300,
            "total_strength": 150,
            "total_accuracy": 350
        },
        "locations": {
            "Walco": 1
        }
    },
    {
        "id": 153,
        "n": "[BOSS] Ancient Hydra",
        "t": "4",
        "img": {
            "sheet": "44",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 3250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.06
                },
                {
                    "id": 178,
                    "chance": 0.06
                },
                {
                    "id": 1127,
                    "chance": 0.06
                },
                {
                    "id": 1305,
                    "chance": 0.06
                },
                {
                    "id": 622,
                    "chance": 0.03
                },
                {
                    "id": 465,
                    "chance": 0.03
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 710,
                    "chance": 0.02
                },
                {
                    "id": 138,
                    "chance": 0.08
                },
                {
                    "id": 134,
                    "chance": 0.08
                },
                {
                    "id": 664,
                    "chance": 0.03
                },
                {
                    "id": 454,
                    "chance": 0.07
                },
                {
                    "id": 593,
                    "chance": 0.03
                },
                {
                    "id": 1341,
                    "chance": 0.005
                }
            ],
            "combat_level": 1000
        },
        "temp": {
            "health": 3250,
            "busy": false,
            "total_defense": 300,
            "total_strength": 100,
            "total_accuracy": 350
        },
        "locations": {
            "Cesis": 1,
            "Minigames": 1
        }
    },
    {
        "id": 154,
        "n": "[BOSS] Acid Dragon Lord",
        "t": "4",
        "img": {
            "sheet": "44",
            "x": 1,
            "y": 0
        },
        "params": {
            "health": 14900,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.06
                },
                {
                    "id": 179,
                    "chance": 0.06
                },
                {
                    "id": 1128,
                    "chance": 0.06
                },
                {
                    "id": 1306,
                    "chance": 0.06
                },
                {
                    "id": 183,
                    "chance": 0.03
                },
                {
                    "id": 478,
                    "chance": 0.05
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 584,
                    "chance": 0.03
                },
                {
                    "id": 624,
                    "chance": 0.02
                },
                {
                    "id": 649,
                    "chance": 0.03
                },
                {
                    "id": 593,
                    "chance": 0.05
                }
            ],
            "combat_level": 3987
        },
        "temp": {
            "health": 14900,
            "busy": false,
            "total_defense": 430,
            "total_strength": 170,
            "total_accuracy": 450
        },
        "locations": {
            "Clouds": 1,
            "Minigames": 2
        }
    },
    {
        "id": 155,
        "n": "[BOSS] Diablo",
        "t": "4",
        "img": {
            "sheet": "56",
            "x": 1,
            "y": 0
        },
        "params": {
            "health": 2400,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.06
                },
                {
                    "id": 178,
                    "chance": 0.06
                },
                {
                    "id": 1127,
                    "chance": 0.06
                },
                {
                    "id": 1305,
                    "chance": 0.06
                },
                {
                    "id": 160,
                    "chance": 0.05
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 169,
                    "chance": 0.04
                },
                {
                    "id": 710,
                    "chance": 0.02
                },
                {
                    "id": 145,
                    "chance": 0.08
                },
                {
                    "id": 133,
                    "chance": 0.08
                },
                {
                    "id": 364,
                    "chance": 0.04
                },
                {
                    "id": 363,
                    "chance": 0.03
                },
                {
                    "id": 593,
                    "chance": 0.03
                }
            ],
            "combat_level": 800
        },
        "temp": {
            "health": 2400,
            "busy": false,
            "total_defense": 300,
            "total_strength": 100,
            "total_accuracy": 400
        },
        "locations": {
            "Hell": 1
        }
    },
    {
        "id": 156,
        "n": "[BOSS] Demon Portal",
        "t": "4",
        "img": {
            "sheet": "44",
            "x": 6,
            "y": 0
        },
        "params": {
            "health": 5000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.04
                },
                {
                    "id": 179,
                    "chance": 0.04
                },
                {
                    "id": 1128,
                    "chance": 0.04
                },
                {
                    "id": 1306,
                    "chance": 0.04
                },
                {
                    "id": 391,
                    "chance": 0.03
                },
                {
                    "id": 489,
                    "chance": 0.03
                },
                {
                    "id": 361,
                    "chance": 0.02
                },
                {
                    "id": 190,
                    "chance": 0.08
                },
                {
                    "id": 340,
                    "chance": 0.05
                },
                {
                    "id": 475,
                    "chance": 0.06
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 618,
                    "chance": 0.05
                },
                {
                    "id": 593,
                    "chance": 0.03
                }
            ],
            "combat_level": 1500
        },
        "temp": {
            "health": 5000,
            "busy": false,
            "total_defense": 400,
            "total_strength": 170,
            "total_accuracy": 430
        },
        "locations": {
            "Heaven": 1
        }
    },
    {
        "id": 157,
        "n": "Sand Centipede",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 5,
            "y": 4
        },
        "params": {
            "health": 75,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 140,
                    "chance": 0.0015
                },
                {
                    "id": 152,
                    "chance": 0.0025
                },
                {
                    "id": 406,
                    "chance": 0.01
                },
                {
                    "id": 188,
                    "chance": 0.0025
                },
                {
                    "id": 339,
                    "chance": 0.0015
                }
            ],
            "combat_level": 70
        },
        "temp": {
            "health": 75,
            "busy": false,
            "total_defense": 80,
            "total_strength": 45,
            "total_accuracy": 80
        },
        "locations": {
            "Pernau": 19
        }
    },
    {
        "id": 158,
        "n": "Rock Centipede",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 0,
            "y": 4
        },
        "params": {
            "health": 85,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 90,
                    "chance": 0.05
                },
                {
                    "id": 64,
                    "chance": 0.005
                },
                {
                    "id": 294,
                    "chance": 0.0025
                },
                {
                    "id": 865,
                    "chance": 0.0025
                },
                {
                    "id": 52,
                    "chance": 0.0025
                },
                {
                    "id": 53,
                    "chance": 0.0025
                },
                {
                    "id": 150,
                    "chance": 0.0015
                },
                {
                    "id": 294,
                    "chance": 0.0025
                },
                {
                    "id": 141,
                    "chance": 0.01
                }
            ],
            "combat_level": 80
        },
        "temp": {
            "health": 85,
            "busy": false,
            "total_defense": 90,
            "total_strength": 55,
            "total_accuracy": 90
        },
        "locations": {
            "Pernau": 23
        }
    },
    {
        "id": 159,
        "n": "Fire Centipede",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 4,
            "y": 4
        },
        "params": {
            "health": 95,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 442,
                    "chance": 0.0015
                },
                {
                    "id": 410,
                    "chance": 0.01
                },
                {
                    "id": 86,
                    "chance": 0.04
                },
                {
                    "id": 298,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 474,
                    "chance": 0.0025
                },
                {
                    "id": 144,
                    "chance": 0.0025
                }
            ],
            "combat_level": 90
        },
        "temp": {
            "health": 95,
            "busy": false,
            "total_defense": 100,
            "total_strength": 65,
            "total_accuracy": 100
        },
        "locations": {
            "Blood River": 11,
            "Pernau": 13
        }
    },
    {
        "id": 160,
        "n": "Skeletal dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 0,
            "y": 6
        },
        "params": {
            "health": 152,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 363,
                    "chance": 0.0025
                },
                {
                    "id": 58,
                    "chance": 0.0025
                },
                {
                    "id": 46,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 94,
                    "chance": 0.05
                },
                {
                    "id": 153,
                    "chance": 0.0025
                }
            ],
            "combat_level": 138
        },
        "temp": {
            "health": 152,
            "busy": false,
            "total_defense": 160,
            "total_strength": 80,
            "total_accuracy": 160
        },
        "locations": {
            "Pernau": 9,
            "Fellin": 26,
            "Dragon's Lair": 21
        }
    },
    {
        "id": 161,
        "n": "DarkElf Mage",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 3,
            "y": 3
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 82,
                    "chance": 0.05
                },
                {
                    "id": 616,
                    "chance": 0.0015
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 120,
            "total_strength": 40,
            "total_accuracy": 120
        },
        "locations": {
            "Pernau": 4
        }
    },
    {
        "id": 162,
        "n": "Sand Golem",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 50,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 187,
                    "chance": 0.04
                },
                {
                    "id": 24,
                    "chance": 0.0025
                },
                {
                    "id": 147,
                    "chance": 0.0025
                },
                {
                    "id": 339,
                    "chance": 0.0025
                },
                {
                    "id": 76,
                    "chance": 0.03
                }
            ],
            "combat_level": 60
        },
        "temp": {
            "health": 50,
            "busy": false,
            "total_defense": 80,
            "total_strength": 40,
            "total_accuracy": 70
        },
        "locations": {
            "Dorpat": 1,
            "Reval": 3,
            "Pernau": 13
        }
    },
    {
        "id": 163,
        "n": "Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 7,
            "y": 6
        },
        "params": {
            "health": 40,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 426,
                    "chance": 0.0025
                },
                {
                    "id": 408,
                    "chance": 0.02
                },
                {
                    "id": 368,
                    "chance": 0.0025
                },
                {
                    "id": 474,
                    "chance": 0.0025
                },
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 78,
                    "chance": 0.02
                },
                {
                    "id": 438,
                    "chance": 0.0015
                }
            ],
            "combat_level": 50
        },
        "temp": {
            "health": 40,
            "busy": false,
            "total_defense": 60,
            "total_strength": 30,
            "total_accuracy": 70
        },
        "locations": {
            "Pernau": 28
        }
    },
    {
        "id": 164,
        "n": "Rotting Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 0,
            "y": 6
        },
        "params": {
            "health": 50,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 426,
                    "chance": 0.0025
                },
                {
                    "id": 408,
                    "chance": 0.02
                },
                {
                    "id": 128,
                    "chance": 0.0025
                },
                {
                    "id": 368,
                    "chance": 0.0025
                },
                {
                    "id": 474,
                    "chance": 0.0025
                },
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 78,
                    "chance": 0.02
                },
                {
                    "id": 438,
                    "chance": 0.0015
                }
            ],
            "combat_level": 60
        },
        "temp": {
            "health": 50,
            "busy": false,
            "total_defense": 70,
            "total_strength": 40,
            "total_accuracy": 80
        },
        "locations": {
            "Pernau": 25
        }
    },
    {
        "id": 165,
        "n": "Ice Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 5,
            "y": 6
        },
        "params": {
            "health": 70,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 49,
                    "chance": 0.0025
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 430,
                    "chance": 0.0025
                },
                {
                    "id": 146,
                    "chance": 0.0025
                },
                {
                    "id": 84,
                    "chance": 0.04
                }
            ],
            "combat_level": 70
        },
        "temp": {
            "health": 70,
            "busy": false,
            "total_defense": 70,
            "total_strength": 70,
            "total_accuracy": 70
        },
        "locations": {
            "Pernau": 24
        }
    },
    {
        "id": 166,
        "n": "Emerald Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 2,
            "y": 6
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 87,
                    "chance": 0.02
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 272,
                    "chance": 0.05
                },
                {
                    "id": 130,
                    "chance": 0.0025
                },
                {
                    "id": 131,
                    "chance": 0.0025
                },
                {
                    "id": 259,
                    "chance": 0.01
                },
                {
                    "id": 284,
                    "chance": 0.05
                },
                {
                    "id": 302,
                    "chance": 0.01
                }
            ],
            "combat_level": 80
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 100,
            "total_strength": 30,
            "total_accuracy": 100
        },
        "locations": {
            "Pernau": 24
        }
    },
    {
        "id": 167,
        "n": "Gilded Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 3,
            "y": 6
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 442,
                    "chance": 0.0015
                },
                {
                    "id": 410,
                    "chance": 0.01
                },
                {
                    "id": 86,
                    "chance": 0.04
                },
                {
                    "id": 298,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 474,
                    "chance": 0.0025
                },
                {
                    "id": 144,
                    "chance": 0.0025
                }
            ],
            "combat_level": 90
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 100,
            "total_strength": 50,
            "total_accuracy": 110
        },
        "locations": {
            "Pernau": 21
        }
    },
    {
        "id": 168,
        "n": "Amethyst Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 4,
            "y": 6
        },
        "params": {
            "health": 140,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 190,
                    "chance": 0.0015
                },
                {
                    "id": 92,
                    "chance": 0.04
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 385,
                    "chance": 0.0015
                },
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 46,
                    "chance": 0.0025
                },
                {
                    "id": 156,
                    "chance": 0.0015
                },
                {
                    "id": 163,
                    "chance": 0.0015
                }
            ],
            "combat_level": 110
        },
        "temp": {
            "health": 140,
            "busy": false,
            "total_defense": 120,
            "total_strength": 60,
            "total_accuracy": 120
        },
        "locations": {
            "Pernau": 13
        }
    },
    {
        "id": 169,
        "n": "Diamond Mummy",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 1,
            "y": 6
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 108,
                    "chance": 0.03
                },
                {
                    "id": 350,
                    "chance": 0.0015
                },
                {
                    "id": 149,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 616,
                    "chance": 0.0015
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 120
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 150,
            "total_strength": 70,
            "total_accuracy": 130
        },
        "locations": {
            "Pernau": 25
        }
    },
    {
        "id": 170,
        "n": "Phantom Skull",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 2,
            "y": 5
        },
        "params": {
            "health": 200,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 393,
                    "chance": 0.0025
                },
                {
                    "id": 112,
                    "chance": 0.04
                },
                {
                    "id": 498,
                    "chance": 0.0015
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 482,
                    "chance": 0.0025
                },
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 342,
                    "chance": 0.0025
                },
                {
                    "id": 440,
                    "chance": 0.0025
                }
            ],
            "combat_level": 160
        },
        "temp": {
            "health": 200,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 190
        },
        "locations": {
            "Pernau": 1
        }
    },
    {
        "id": 171,
        "n": "Deathstalker Scorpion",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 2,
            "y": 12
        },
        "params": {
            "health": 115,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 138,
                    "chance": 0.0025
                },
                {
                    "id": 86,
                    "chance": 0.04
                },
                {
                    "id": 299,
                    "chance": 0.0015
                },
                {
                    "id": 191,
                    "chance": 0.0025
                },
                {
                    "id": 1176,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 128,
                    "chance": 0.0025
                },
                {
                    "id": 150,
                    "chance": 0.0025
                }
            ],
            "combat_level": 115
        },
        "temp": {
            "health": 115,
            "busy": false,
            "total_defense": 70,
            "total_strength": 115,
            "total_accuracy": 160
        },
        "locations": {
            "Pernau": 13
        }
    },
    {
        "id": 172,
        "n": "Emperor Scorpion",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 1,
            "y": 12
        },
        "params": {
            "health": 140,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 165,
                    "chance": 0.0015
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 140,
                    "chance": 0.0025
                },
                {
                    "id": 1176,
                    "chance": 0.0025
                },
                {
                    "id": 866,
                    "chance": 0.0025
                },
                {
                    "id": 1075,
                    "chance": 0.0025
                },
                {
                    "id": 462,
                    "chance": 0.0015
                },
                {
                    "id": 190,
                    "chance": 0.0025
                }
            ],
            "combat_level": 135
        },
        "temp": {
            "health": 140,
            "busy": false,
            "total_defense": 50,
            "total_strength": 150,
            "total_accuracy": 200
        },
        "locations": {
            "Pernau": 11
        }
    },
    {
        "id": 173,
        "n": "War Elephant",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 7,
            "y": 7
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 189,
                    "chance": 0.0025
                },
                {
                    "id": 131,
                    "chance": 0.0015
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 140,
                    "chance": 0.0025
                },
                {
                    "id": 193,
                    "chance": 0.0015
                },
                {
                    "id": 96,
                    "chance": 0.03
                }
            ],
            "combat_level": 85
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 110,
            "total_strength": 50,
            "total_accuracy": 90
        },
        "locations": {
            "Pernau": 19
        }
    },
    {
        "id": 174,
        "n": "Chaos Vortex",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 2,
            "y": 7
        },
        "params": {
            "health": 300,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 110,
                    "chance": 0.04
                },
                {
                    "id": 378,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 482,
                    "chance": 0.0025
                },
                {
                    "id": 618,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 200
        },
        "temp": {
            "health": 300,
            "busy": false,
            "total_defense": 100,
            "total_strength": 100,
            "total_accuracy": 300
        },
        "locations": {
            "Reval": 7,
            "Clouds": 21
        }
    },
    {
        "id": 175,
        "n": "Skeleton King",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 8,
            "y": 7
        },
        "params": {
            "health": 148,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 90,
                    "chance": 0.03
                },
                {
                    "id": 163,
                    "chance": 0.0025
                },
                {
                    "id": 145,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 692,
                    "chance": 0.0025
                },
                {
                    "id": 467,
                    "chance": 0.0015
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 137
        },
        "temp": {
            "health": 148,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Pernau": 11
        }
    },
    {
        "id": 176,
        "n": "Skeleton Lord",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 2,
            "y": 6
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 102,
                    "chance": 0.05
                },
                {
                    "id": 154,
                    "chance": 0.0025
                },
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 1359,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 67,
                    "chance": 0.0025
                },
                {
                    "id": 140,
                    "chance": 0.0025
                },
                {
                    "id": 475,
                    "chance": 0.0025
                }
            ],
            "combat_level": 105
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 120,
            "total_strength": 80,
            "total_accuracy": 120
        },
        "locations": {
            "Dungeon": 1,
            "Pernau": 21
        }
    },
    {
        "id": 177,
        "n": "Skeleton Mage",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 0,
            "y": 7
        },
        "params": {
            "health": 45,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 78,
                    "chance": 0.005
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 56,
                    "chance": 0.0025
                },
                {
                    "id": 864,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 18,
                    "chance": 0.0025
                },
                {
                    "id": 46,
                    "chance": 0.0025
                },
                {
                    "id": 188,
                    "chance": 0.0025
                },
                {
                    "id": 480,
                    "chance": 0.0025
                },
                {
                    "id": 295,
                    "chance": 0.001
                }
            ],
            "combat_level": 50
        },
        "temp": {
            "health": 45,
            "busy": false,
            "total_defense": 55,
            "total_strength": 50,
            "total_accuracy": 50
        },
        "locations": {
            "Dungeon": 5,
            "Pernau": 21
        }
    },
    {
        "id": 179,
        "n": "White Wall",
        "t": "4",
        "img": {
            "sheet": "42",
            "x": 14,
            "y": 9
        },
        "params": {
            "health": 75,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 31,
                    "chance": 0.005
                },
                {
                    "id": 50,
                    "chance": 0.001
                }
            ],
            "combat_level": 78
        },
        "temp": {
            "health": 75,
            "busy": false,
            "total_defense": 90,
            "total_strength": 60,
            "total_accuracy": 90
        },
        "locations": {
            "Pernau": 4
        }
    },
    {
        "id": 180,
        "n": "White Hard Wall",
        "t": "4",
        "img": {
            "sheet": "42",
            "x": 14,
            "y": 9
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 31,
                    "chance": 0.005
                },
                {
                    "id": 50,
                    "chance": 0.01
                }
            ],
            "combat_level": 132
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 150,
            "total_strength": 100,
            "total_accuracy": 150
        },
        "locations": {
            "Pernau": 4
        }
    },
    {
        "id": 181,
        "n": "Flame Wyvern",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 3,
            "y": 11
        },
        "params": {
            "health": 220,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 364,
                    "chance": 0.0025
                },
                {
                    "id": 462,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 700,
                    "chance": 0.0025
                },
                {
                    "id": 248,
                    "chance": 0.05
                },
                {
                    "id": 199,
                    "chance": 0.03
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 139,
                    "chance": 0.0025
                }
            ],
            "combat_level": 210
        },
        "temp": {
            "health": 220,
            "busy": false,
            "total_defense": 250,
            "total_strength": 130,
            "total_accuracy": 240
        },
        "locations": {
            "Blood River": 19,
            "Hell": 20,
            "Pernau": 9
        }
    },
    {
        "id": 184,
        "n": "Adult Ruby Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 5,
            "y": 3
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 252,
                    "chance": 0.0035
                },
                {
                    "id": 258,
                    "chance": 0.0025
                },
                {
                    "id": 396,
                    "chance": 0.0015
                },
                {
                    "id": 224,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 95,
                    "chance": 0.05
                },
                {
                    "id": 300,
                    "chance": 0.0025
                },
                {
                    "id": 166,
                    "chance": 0.0025
                },
                {
                    "id": 612,
                    "chance": 0.0015
                }
            ],
            "combat_level": 120
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 120,
            "total_strength": 80,
            "total_accuracy": 150
        },
        "locations": {
            "Dungeon": 6,
            "Blood River": 23,
            "Hell": 27,
            "Dragon's Lair": 16
        }
    },
    {
        "id": 185,
        "n": "Thief",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 9,
            "y": 3
        },
        "params": {
            "health": 22,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 37,
                    "chance": 0.0025
                },
                {
                    "id": 43,
                    "chance": 0.0025
                },
                {
                    "id": 47,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 994,
                    "chance": 0.0025
                },
                {
                    "id": 16,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 41,
                    "chance": 0.0025
                },
                {
                    "id": 762,
                    "chance": 0.02
                },
                {
                    "id": 403,
                    "chance": 0.02
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 7,
                    "chance": 0.01
                }
            ],
            "combat_level": 25
        },
        "temp": {
            "health": 22,
            "busy": false,
            "total_defense": 30,
            "total_strength": 18,
            "total_accuracy": 30
        },
        "locations": {
            "Dorpat": 7,
            "Rakblood": 15
        }
    },
    {
        "id": 186,
        "n": "Assassin",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 5,
            "y": 3
        },
        "params": {
            "health": 26,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 473,
                    "chance": 0.0025
                },
                {
                    "id": 479,
                    "chance": 0.0025
                },
                {
                    "id": 304,
                    "chance": 0.02
                },
                {
                    "id": 28,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 22,
                    "chance": 0.0025
                },
                {
                    "id": 0,
                    "chance": 0.0025
                }
            ],
            "combat_level": 31
        },
        "temp": {
            "health": 26,
            "busy": false,
            "total_defense": 40,
            "total_strength": 18,
            "total_accuracy": 40
        },
        "locations": {
            "Rakblood": 32
        }
    },
    {
        "id": 187,
        "n": "Explorer",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 3,
            "y": 4
        },
        "params": {
            "health": 38,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 473,
                    "chance": 0.0025
                },
                {
                    "id": 2,
                    "chance": 0.0025
                },
                {
                    "id": 21,
                    "chance": 0.0025
                },
                {
                    "id": 856,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 996,
                    "chance": 0.0025
                },
                {
                    "id": 20,
                    "chance": 0.0025
                },
                {
                    "id": 26,
                    "chance": 0.0025
                },
                {
                    "id": 72,
                    "chance": 0.02
                }
            ],
            "combat_level": 38
        },
        "temp": {
            "health": 38,
            "busy": false,
            "total_defense": 45,
            "total_strength": 24,
            "total_accuracy": 45
        },
        "locations": {
            "Dorpat": 10,
            "Rakblood": 26
        }
    },
    {
        "id": 188,
        "n": "Grizzly Bear",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 5,
            "y": 0
        },
        "params": {
            "health": 50,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 14,
                    "chance": 0.02
                },
                {
                    "id": 260,
                    "chance": 0.01
                },
                {
                    "id": 227,
                    "chance": 0.01
                },
                {
                    "id": 27,
                    "chance": 0.0025
                },
                {
                    "id": 39,
                    "chance": 0.0025
                },
                {
                    "id": 54,
                    "chance": 0.0025
                },
                {
                    "id": 38,
                    "chance": 0.0025
                }
            ],
            "combat_level": 45
        },
        "temp": {
            "health": 50,
            "busy": false,
            "total_defense": 50,
            "total_strength": 30,
            "total_accuracy": 50
        },
        "locations": {
            "Whiland": 69,
            "Lost Woods": 81
        }
    },
    {
        "id": 189,
        "n": "Polar Bear",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 7,
            "y": 0
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 14,
                    "chance": 0.02
                },
                {
                    "id": 260,
                    "chance": 0.01
                },
                {
                    "id": 67,
                    "chance": 0.0025
                },
                {
                    "id": 141,
                    "chance": 0.0025
                },
                {
                    "id": 408,
                    "chance": 0.01
                },
                {
                    "id": 128,
                    "chance": 0.0025
                },
                {
                    "id": 38,
                    "chance": 0.0025
                }
            ],
            "combat_level": 82
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 100,
            "total_strength": 38,
            "total_accuracy": 100
        },
        "locations": {
            "Narwa": 17
        }
    },
    {
        "id": 190,
        "n": "Lion",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 6,
            "y": 0
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 133,
                    "chance": 0.0025
                },
                {
                    "id": 481,
                    "chance": 0.0025
                },
                {
                    "id": 375,
                    "chance": 0.0025
                },
                {
                    "id": 12,
                    "chance": 0.03
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1175,
                    "chance": 0.0025
                },
                {
                    "id": 187,
                    "chance": 0.01
                },
                {
                    "id": 125,
                    "chance": 0.0025
                },
                {
                    "id": 60,
                    "chance": 0.0045
                }
            ],
            "combat_level": 94
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 100,
            "total_strength": 56,
            "total_accuracy": 130
        },
        "locations": {
            "Reval": 8,
            "Pernau": 17
        }
    },
    {
        "id": 191,
        "n": "Fire Spirit",
        "t": "4",
        "img": {
            "sheet": "25",
            "x": 3,
            "y": 4
        },
        "params": {
            "health": 180,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 129,
                    "chance": 0.0025
                },
                {
                    "id": 421,
                    "chance": 0.01
                },
                {
                    "id": 467,
                    "chance": 0.0025
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 1304,
                    "chance": 0.005
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 377,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 481,
                    "chance": 0.0025
                },
                {
                    "id": 167,
                    "chance": 0.0025
                }
            ],
            "combat_level": 187
        },
        "temp": {
            "health": 180,
            "busy": false,
            "total_defense": 100,
            "total_strength": 168,
            "total_accuracy": 300
        },
        "locations": {
            "Hell": 10
        }
    },
    {
        "id": 193,
        "n": "Poisonous Behemoth",
        "t": "4",
        "img": {
            "sheet": "20",
            "x": 5,
            "y": 5
        },
        "params": {
            "health": 180,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 656,
                    "chance": 0.0025
                },
                {
                    "id": 135,
                    "chance": 0.0025
                },
                {
                    "id": 145,
                    "chance": 0.0025
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 818,
                    "chance": 0.0025
                },
                {
                    "id": 813,
                    "chance": 0.0025
                },
                {
                    "id": 481,
                    "chance": 0.0025
                },
                {
                    "id": 167,
                    "chance": 0.0025
                }
            ],
            "combat_level": 170
        },
        "temp": {
            "health": 180,
            "busy": false,
            "total_defense": 200,
            "total_strength": 50,
            "total_accuracy": 250
        },
        "locations": {
            "Cesis": 17,
            "Fellin": 22
        }
    },
    {
        "id": 194,
        "n": "Emerald Plant",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 6,
            "y": 3
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 342,
                    "chance": 0.0025
                },
                {
                    "id": 46,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 480,
                    "chance": 0.0025
                },
                {
                    "id": 86,
                    "chance": 0.03
                },
                {
                    "id": 198,
                    "chance": 0.0025
                },
                {
                    "id": 790,
                    "chance": 0.01
                },
                {
                    "id": 787,
                    "chance": 0.01
                }
            ],
            "combat_level": 147
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 200,
            "total_strength": 88,
            "total_accuracy": 200
        },
        "locations": {
            "Cesis": 13,
            "Ancient Dungeon": 4
        }
    },
    {
        "id": 195,
        "n": "Grass Killer",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 3,
            "y": 15
        },
        "params": {
            "health": 80,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 787,
                    "chance": 0.01
                },
                {
                    "id": 777,
                    "chance": 0.03
                },
                {
                    "id": 286,
                    "chance": 0.0025
                },
                {
                    "id": 225,
                    "chance": 0.005
                },
                {
                    "id": 1358,
                    "chance": 0.0025
                },
                {
                    "id": 86,
                    "chance": 0.03
                },
                {
                    "id": 198,
                    "chance": 0.0025
                },
                {
                    "id": 817,
                    "chance": 0.0025
                },
                {
                    "id": 794,
                    "chance": 0.01
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 80,
            "busy": false,
            "total_defense": 120,
            "total_strength": 60,
            "total_accuracy": 120
        },
        "locations": {
            "Cesis": 33,
            "Ancient Dungeon": 67
        }
    },
    {
        "id": 196,
        "n": "Cave Bat",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 5,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 220,
                    "chance": 0.05
                },
                {
                    "id": 5,
                    "chance": 0.0025
                },
                {
                    "id": 1281,
                    "chance": 0.0015
                },
                {
                    "id": 3,
                    "chance": 0.1
                },
                {
                    "id": 0,
                    "chance": 0.0025
                },
                {
                    "id": 1,
                    "chance": 0.0025
                },
                {
                    "id": 21,
                    "chance": 0.0025
                }
            ],
            "combat_level": 3
        },
        "temp": {
            "health": 5,
            "busy": false,
            "total_defense": 2,
            "total_strength": 2,
            "total_accuracy": 3
        },
        "locations": {
            "Dungeon": 11
        }
    },
    {
        "id": 197,
        "n": "Cave Worm",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 7,
            "y": 2
        },
        "params": {
            "health": 12,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 204,
                    "chance": 0.05
                },
                {
                    "id": 5,
                    "chance": 0.0025
                },
                {
                    "id": 37,
                    "chance": 0.0025
                },
                {
                    "id": 39,
                    "chance": 0.0025
                },
                {
                    "id": 187,
                    "chance": 0.09
                }
            ],
            "combat_level": 9
        },
        "temp": {
            "health": 12,
            "busy": false,
            "total_defense": 8,
            "total_strength": 6,
            "total_accuracy": 10
        },
        "locations": {
            "Dungeon": 9
        }
    },
    {
        "id": 198,
        "n": "Skeleton Fighter",
        "t": "4",
        "img": {
            "sheet": "13",
            "x": 5,
            "y": 5
        },
        "params": {
            "health": 44,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 10,
                    "chance": 0.05
                },
                {
                    "id": 5,
                    "chance": 0.0025
                },
                {
                    "id": 37,
                    "chance": 0.0025
                },
                {
                    "id": 44,
                    "chance": 0.0025
                },
                {
                    "id": 1269,
                    "chance": 0.0015
                },
                {
                    "id": 1359,
                    "chance": 0.0015
                },
                {
                    "id": 27,
                    "chance": 0.0025
                },
                {
                    "id": 19,
                    "chance": 0.0025
                },
                {
                    "id": 1125,
                    "chance": 0.005
                },
                {
                    "id": 4,
                    "chance": 0.01
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 1303,
                    "chance": 0.005
                },
                {
                    "id": 274,
                    "chance": 0.09
                }
            ],
            "combat_level": 41
        },
        "temp": {
            "health": 44,
            "busy": false,
            "total_defense": 50,
            "total_strength": 20,
            "total_accuracy": 50
        },
        "locations": {}
    },
    {
        "id": 199,
        "n": "Gnoll Mage",
        "t": "4",
        "img": {
            "sheet": "6",
            "x": 1,
            "y": 12
        },
        "params": {
            "health": 62,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 448,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 479,
                    "chance": 0.0025
                },
                {
                    "id": 424,
                    "chance": 0.0025
                },
                {
                    "id": 435,
                    "chance": 0.0025
                },
                {
                    "id": 404,
                    "chance": 0.04
                }
            ],
            "combat_level": 56
        },
        "temp": {
            "health": 62,
            "busy": false,
            "total_defense": 50,
            "total_strength": 54,
            "total_accuracy": 60
        },
        "locations": {
            "Dungeon": 8
        }
    },
    {
        "id": 200,
        "n": "Crusader",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 2,
            "y": 6
        },
        "params": {
            "health": 80,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 271,
                    "chance": 0.05
                },
                {
                    "id": 188,
                    "chance": 0.0025
                },
                {
                    "id": 52,
                    "chance": 0.0025
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 805,
                    "chance": 0.0025
                },
                {
                    "id": 815,
                    "chance": 0.0025
                },
                {
                    "id": 141,
                    "chance": 0.0025
                },
                {
                    "id": 74,
                    "chance": 0.04
                }
            ],
            "combat_level": 75
        },
        "temp": {
            "health": 80,
            "busy": false,
            "total_defense": 70,
            "total_strength": 70,
            "total_accuracy": 80
        },
        "locations": {
            "Dungeon": 14
        }
    },
    {
        "id": 201,
        "n": "Ridder",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 3,
            "y": 6
        },
        "params": {
            "health": 76,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 271,
                    "chance": 0.05
                },
                {
                    "id": 804,
                    "chance": 0.0025
                },
                {
                    "id": 188,
                    "chance": 0.0025
                },
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 142,
                    "chance": 0.0025
                },
                {
                    "id": 474,
                    "chance": 0.0025
                },
                {
                    "id": 74,
                    "chance": 0.04
                }
            ],
            "combat_level": 69
        },
        "temp": {
            "health": 76,
            "busy": false,
            "total_defense": 70,
            "total_strength": 60,
            "total_accuracy": 70
        },
        "locations": {
            "Dorpat": 1,
            "Dungeon": 10
        }
    },
    {
        "id": 202,
        "n": "Scholar",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 4,
            "y": 6
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 271,
                    "chance": 0.05
                },
                {
                    "id": 440,
                    "chance": 0.0015
                },
                {
                    "id": 453,
                    "chance": 0.0025
                },
                {
                    "id": 449,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 480,
                    "chance": 0.0025
                },
                {
                    "id": 430,
                    "chance": 0.0015
                },
                {
                    "id": 411,
                    "chance": 0.04
                }
            ],
            "combat_level": 96
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 84,
            "total_strength": 100,
            "total_accuracy": 100
        },
        "locations": {
            "Dungeon": 8
        }
    },
    {
        "id": 204,
        "n": "Enchanter",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 5,
            "y": 6
        },
        "params": {
            "health": 122,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 271,
                    "chance": 0.05
                },
                {
                    "id": 432,
                    "chance": 0.0015
                },
                {
                    "id": 442,
                    "chance": 0.0025
                },
                {
                    "id": 455,
                    "chance": 0.0025
                },
                {
                    "id": 457,
                    "chance": 0.0025
                },
                {
                    "id": 1001,
                    "chance": 0.0025
                },
                {
                    "id": 481,
                    "chance": 0.0015
                },
                {
                    "id": 416,
                    "chance": 0.03
                }
            ],
            "combat_level": 113
        },
        "temp": {
            "health": 122,
            "busy": false,
            "total_defense": 90,
            "total_strength": 80,
            "total_accuracy": 160
        },
        "locations": {
            "Dungeon": 9
        }
    },
    {
        "id": 244,
        "n": "King Gilded Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 5,
            "y": 4
        },
        "params": {
            "health": 220,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 101,
                    "chance": 0.02
                },
                {
                    "id": 253,
                    "chance": 0.03
                },
                {
                    "id": 616,
                    "chance": 0.025
                },
                {
                    "id": 459,
                    "chance": 0.005
                },
                {
                    "id": 153,
                    "chance": 0.0025
                },
                {
                    "id": 155,
                    "chance": 0.0025
                },
                {
                    "id": 1359,
                    "chance": 0.005
                },
                {
                    "id": 399,
                    "chance": 0.0015
                },
                {
                    "id": 267,
                    "chance": 0.05
                },
                {
                    "id": 381,
                    "chance": 0.0025
                },
                {
                    "id": 182,
                    "chance": 0.0025
                }
            ],
            "combat_level": 220
        },
        "temp": {
            "health": 220,
            "busy": false,
            "total_defense": 200,
            "total_strength": 150,
            "total_accuracy": 310
        },
        "locations": {
            "Heaven": 17,
            "Dragon's Lair": 16
        }
    },
    {
        "id": 245,
        "n": "Unicorn",
        "t": "4",
        "img": {
            "sheet": "45",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 180,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 911,
                    "chance": 0.025
                },
                {
                    "id": 114,
                    "chance": 0.05
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 160,
                    "chance": 0.0015
                },
                {
                    "id": 821,
                    "chance": 0.0025
                },
                {
                    "id": 866,
                    "chance": 0.0025
                }
            ],
            "combat_level": 194
        },
        "temp": {
            "health": 180,
            "busy": false,
            "total_defense": 200,
            "total_strength": 96,
            "total_accuracy": 300
        },
        "locations": {
            "Heaven": 15,
            "Ancient Dungeon": 14
        }
    },
    {
        "id": 248,
        "n": "Gilded Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 6,
            "y": 2
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 99,
                    "chance": 0.01
                },
                {
                    "id": 190,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0035
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 253,
                    "chance": 0.01
                }
            ],
            "combat_level": 130
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 150,
            "total_strength": 90,
            "total_accuracy": 150
        },
        "locations": {
            "Fellin": 17,
            "Dragon's Lair": 16
        }
    },
    {
        "id": 249,
        "n": "Adult Black Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 4,
            "y": 3
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 99,
                    "chance": 0.01
                },
                {
                    "id": 190,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0035
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 165,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 115
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 120,
            "total_strength": 90,
            "total_accuracy": 120
        },
        "locations": {
            "Dragon's Lair": 7
        }
    },
    {
        "id": 250,
        "n": "Adult Gilded Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 6,
            "y": 3
        },
        "params": {
            "health": 160,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 102,
                    "chance": 0.01
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 398,
                    "chance": 0.0025
                },
                {
                    "id": 394,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 430,
                    "chance": 0.0025
                },
                {
                    "id": 379,
                    "chance": 0.0025
                },
                {
                    "id": 487,
                    "chance": 0.0025
                },
                {
                    "id": 154,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 253,
                    "chance": 0.01
                }
            ],
            "combat_level": 170
        },
        "temp": {
            "health": 160,
            "busy": false,
            "total_defense": 150,
            "total_strength": 120,
            "total_accuracy": 250
        },
        "locations": {
            "Dragon's Lair": 11
        }
    },
    {
        "id": 251,
        "n": "Earth Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 3,
            "y": 5
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 116,
                    "chance": 0.02
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 158,
                    "chance": 0.0025
                },
                {
                    "id": 181,
                    "chance": 0.0025
                },
                {
                    "id": 618,
                    "chance": 0.0025
                },
                {
                    "id": 468,
                    "chance": 0.0025
                },
                {
                    "id": 257,
                    "chance": 0.0025
                },
                {
                    "id": 866,
                    "chance": 0.0025
                },
                {
                    "id": 1075,
                    "chance": 0.0025
                },
                {
                    "id": 613,
                    "chance": 0.0025
                },
                {
                    "id": 500,
                    "chance": 0.0025
                }
            ],
            "combat_level": 240
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 300,
            "total_strength": 110,
            "total_accuracy": 300
        },
        "locations": {
            "Pernau": 10,
            "Dragon's Lair": 14,
            "Ancient Dungeon": 35
        }
    },
    {
        "id": 252,
        "n": "Metal Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 1,
            "y": 5
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 120,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 613,
                    "chance": 0.0025
                },
                {
                    "id": 622,
                    "chance": 0.0025
                },
                {
                    "id": 395,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 477,
                    "chance": 0.0025
                },
                {
                    "id": 475,
                    "chance": 0.005
                },
                {
                    "id": 189,
                    "chance": 0.005
                },
                {
                    "id": 501,
                    "chance": 0.0025
                },
                {
                    "id": 469,
                    "chance": 0.0025
                },
                {
                    "id": 384,
                    "chance": 0.01
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 250
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 320,
            "total_strength": 110,
            "total_accuracy": 320
        },
        "locations": {
            "Dragon's Lair": 22
        }
    },
    {
        "id": 253,
        "n": "Fire Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 5,
            "y": 5
        },
        "params": {
            "health": 260,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 120,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 169,
                    "chance": 0.0025
                },
                {
                    "id": 180,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 440,
                    "chance": 0.0025
                },
                {
                    "id": 668,
                    "chance": 0.0025
                },
                {
                    "id": 188,
                    "chance": 0.0025
                },
                {
                    "id": 159,
                    "chance": 0.0025
                },
                {
                    "id": 664,
                    "chance": 0.0025
                },
                {
                    "id": 665,
                    "chance": 0.0025
                },
                {
                    "id": 177,
                    "chance": 0.005
                }
            ],
            "combat_level": 257
        },
        "temp": {
            "health": 260,
            "busy": false,
            "total_defense": 320,
            "total_strength": 130,
            "total_accuracy": 320
        },
        "locations": {
            "Hell": 32,
            "Pernau": 13,
            "Dragon's Lair": 24
        }
    },
    {
        "id": 254,
        "n": "Void Dragon",
        "t": "4",
        "img": {
            "sheet": "16",
            "x": 5,
            "y": 6
        },
        "params": {
            "health": 300,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 122,
                    "chance": 0.04
                },
                {
                    "id": 169,
                    "chance": 0.0025
                },
                {
                    "id": 666,
                    "chance": 0.0025
                },
                {
                    "id": 380,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 158,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 193,
                    "chance": 0.005
                },
                {
                    "id": 66,
                    "chance": 0.005
                },
                {
                    "id": 183,
                    "chance": 0.0025
                },
                {
                    "id": 821,
                    "chance": 0.0025
                },
                {
                    "id": 944,
                    "chance": 0.0025
                },
                {
                    "id": 470,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                }
            ],
            "combat_level": 285
        },
        "temp": {
            "health": 300,
            "busy": false,
            "total_defense": 350,
            "total_strength": 140,
            "total_accuracy": 350
        },
        "locations": {
            "Pernau": 8,
            "Dragon's Lair": 24
        }
    },
    {
        "id": 255,
        "n": "[BOSS] Pharaoh",
        "t": "4",
        "img": {
            "sheet": "44",
            "x": 11,
            "y": 0
        },
        "params": {
            "health": 4240,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.05
                },
                {
                    "id": 1306,
                    "chance": 0.05
                },
                {
                    "id": 391,
                    "chance": 0.02
                },
                {
                    "id": 1354,
                    "chance": 0.02
                },
                {
                    "id": 666,
                    "chance": 0.05
                },
                {
                    "id": 863,
                    "chance": 0.03
                },
                {
                    "id": 1077,
                    "chance": 0.03
                },
                {
                    "id": 859,
                    "chance": 0.03
                },
                {
                    "id": 934,
                    "chance": 0.05
                },
                {
                    "id": 905,
                    "chance": 0.04
                },
                {
                    "id": 820,
                    "chance": 0.05
                },
                {
                    "id": 593,
                    "chance": 0.04
                },
                {
                    "id": 477,
                    "chance": 0.05
                }
            ],
            "combat_level": 1300
        },
        "temp": {
            "health": 4240,
            "busy": false,
            "total_defense": 400,
            "total_strength": 160,
            "total_accuracy": 400
        },
        "locations": {
            "Pernau": 1
        }
    },
    {
        "id": 256,
        "n": "[BOSS] Chaotic Dragon",
        "t": "4",
        "img": {
            "sheet": "56",
            "x": 2,
            "y": 0
        },
        "params": {
            "health": 7350,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.05
                },
                {
                    "id": 1306,
                    "chance": 0.05
                },
                {
                    "id": 665,
                    "chance": 0.04
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 1354,
                    "chance": 0.02
                },
                {
                    "id": 146,
                    "chance": 0.05
                },
                {
                    "id": 450,
                    "chance": 0.05
                },
                {
                    "id": 465,
                    "chance": 0.04
                },
                {
                    "id": 620,
                    "chance": 0.04
                },
                {
                    "id": 867,
                    "chance": 0.03
                },
                {
                    "id": 1077,
                    "chance": 0.03
                },
                {
                    "id": 653,
                    "chance": 0.04
                },
                {
                    "id": 593,
                    "chance": 0.04
                },
                {
                    "id": 378,
                    "chance": 0.05
                },
                {
                    "id": 477,
                    "chance": 0.05
                }
            ],
            "combat_level": 2100
        },
        "temp": {
            "health": 7350,
            "busy": false,
            "total_defense": 440,
            "total_strength": 160,
            "total_accuracy": 450
        },
        "locations": {
            "Dragon's Lair": 1
        }
    },
    {
        "id": 257,
        "n": "[BOSS] Nephilim Warrior",
        "t": "4",
        "img": {
            "sheet": "56",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 10920,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.06
                },
                {
                    "id": 179,
                    "chance": 0.06
                },
                {
                    "id": 1128,
                    "chance": 0.06
                },
                {
                    "id": 1306,
                    "chance": 0.06
                },
                {
                    "id": 947,
                    "chance": 0.1
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 171,
                    "chance": 0.03
                },
                {
                    "id": 347,
                    "chance": 0.04
                },
                {
                    "id": 1354,
                    "chance": 0.02
                },
                {
                    "id": 593,
                    "chance": 0.04
                },
                {
                    "id": 501,
                    "chance": 0.05
                },
                {
                    "id": 262,
                    "chance": 0.1
                },
                {
                    "id": 478,
                    "chance": 0.05
                },
                {
                    "id": 1340,
                    "chance": 0.005
                }
            ],
            "combat_level": 3000
        },
        "temp": {
            "health": 10920,
            "busy": false,
            "total_defense": 450,
            "total_strength": 180,
            "total_accuracy": 450
        },
        "locations": {
            "Heaven": 1
        }
    },
    {
        "id": 258,
        "n": "Thunder Bird",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 7,
            "y": 1
        },
        "params": {
            "health": 150,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 219,
                    "chance": 0.0025
                },
                {
                    "id": 950,
                    "chance": 0.0025
                },
                {
                    "id": 340,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 379,
                    "chance": 0.0025
                },
                {
                    "id": 138,
                    "chance": 0.0025
                },
                {
                    "id": 104,
                    "chance": 0.01
                }
            ],
            "combat_level": 176
        },
        "temp": {
            "health": 150,
            "busy": false,
            "total_defense": 200,
            "total_strength": 104,
            "total_accuracy": 250
        },
        "locations": {
            "Heaven": 13
        }
    },
    {
        "id": 259,
        "n": "Ice Wyvern",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 0,
            "y": 12
        },
        "params": {
            "health": 110,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 949,
                    "chance": 0.0025
                },
                {
                    "id": 858,
                    "chance": 0.0025
                },
                {
                    "id": 1075,
                    "chance": 0.0025
                },
                {
                    "id": 1126,
                    "chance": 0.005
                },
                {
                    "id": 268,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 285,
                    "chance": 0.03
                }
            ],
            "combat_level": 110
        },
        "temp": {
            "health": 110,
            "busy": false,
            "total_defense": 100,
            "total_strength": 80,
            "total_accuracy": 150
        },
        "locations": {
            "Narwa": 20
        }
    },
    {
        "id": 269,
        "n": "Thunder Angel",
        "t": "4",
        "img": {
            "sheet": "18",
            "x": 3,
            "y": 9
        },
        "params": {
            "health": 172,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 369,
                    "chance": 0.0025
                },
                {
                    "id": 950,
                    "chance": 0.0025
                },
                {
                    "id": 340,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 379,
                    "chance": 0.0025
                },
                {
                    "id": 661,
                    "chance": 0.0025
                },
                {
                    "id": 138,
                    "chance": 0.0025
                },
                {
                    "id": 104,
                    "chance": 0.01
                }
            ],
            "combat_level": 193
        },
        "temp": {
            "health": 172,
            "busy": false,
            "total_defense": 230,
            "total_strength": 70,
            "total_accuracy": 300
        },
        "locations": {
            "Heaven": 15
        }
    },
    {
        "id": 271,
        "n": "Novice Knight",
        "t": "4",
        "img": {
            "hash": "18 0 27 10 3 2 1 22 140 48 11 6"
        },
        "params": {
            "health": 40,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 976,
                    "chance": 0.0025
                },
                {
                    "id": 3,
                    "chance": 0.05
                },
                {
                    "id": 43,
                    "chance": 0.025
                },
                {
                    "id": 799,
                    "chance": 0.025
                }
            ],
            "combat_level": 30
        },
        "temp": {
            "health": 40,
            "busy": false,
            "total_defense": 30,
            "total_strength": 20,
            "total_accuracy": 30
        },
        "locations": {
            "No Man's Land": 29
        }
    },
    {
        "id": 272,
        "n": "Knight",
        "t": "4",
        "img": {
            "hash": "18 0 44 26 3 3 1 22 101 13 0 6"
        },
        "params": {
            "health": 65,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 426,
                    "chance": 0.0025
                },
                {
                    "id": 66,
                    "chance": 0.0025
                },
                {
                    "id": 474,
                    "chance": 0.0025
                },
                {
                    "id": 65,
                    "chance": 0.0025
                },
                {
                    "id": 78,
                    "chance": 0.02
                },
                {
                    "id": 438,
                    "chance": 0.0015
                }
            ],
            "combat_level": 53
        },
        "temp": {
            "health": 65,
            "busy": false,
            "total_defense": 60,
            "total_strength": 30,
            "total_accuracy": 60
        },
        "locations": {
            "No Man's Land": 39
        }
    },
    {
        "id": 273,
        "n": "Baron",
        "t": "4",
        "img": {
            "hash": "18 0 68 46 13 1 0 54 69 22 0 6"
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 764,
                    "chance": 0.0015
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 442,
                    "chance": 0.0025
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 301,
                    "chance": 0.01
                }
            ],
            "combat_level": 86
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 100,
            "total_strength": 45,
            "total_accuracy": 100
        },
        "locations": {
            "No Man's Land": 45
        }
    },
    {
        "id": 274,
        "n": "Earl",
        "t": "4",
        "img": {
            "hash": "18 0 88 52 30 2 1 33 125 17 11 6"
        },
        "params": {
            "health": 150,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 97,
                    "chance": 0.02
                },
                {
                    "id": 1006,
                    "chance": 0.0025
                },
                {
                    "id": 764,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 862,
                    "chance": 0.0025
                },
                {
                    "id": 259,
                    "chance": 0.01
                },
                {
                    "id": 268,
                    "chance": 0.05
                },
                {
                    "id": 155,
                    "chance": 0.0025
                }
            ],
            "combat_level": 127
        },
        "temp": {
            "health": 150,
            "busy": false,
            "total_defense": 150,
            "total_strength": 60,
            "total_accuracy": 150
        },
        "locations": {
            "No Man's Land": 45
        }
    },
    {
        "id": 275,
        "n": "Marquis",
        "t": "4",
        "img": {
            "hash": "18 0 15 28 44 2 1 25 108 46 0 6"
        },
        "params": {
            "health": 190,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 89,
                    "chance": 0.02
                },
                {
                    "id": 298,
                    "chance": 0.05
                },
                {
                    "id": 299,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.0025
                },
                {
                    "id": 180,
                    "chance": 0.0025
                },
                {
                    "id": 217,
                    "chance": 0.05
                },
                {
                    "id": 177,
                    "chance": 0.005
                },
                {
                    "id": 363,
                    "chance": 0.0025
                }
            ],
            "combat_level": 160
        },
        "temp": {
            "health": 190,
            "busy": false,
            "total_defense": 190,
            "total_strength": 70,
            "total_accuracy": 190
        },
        "locations": {
            "No Man's Land": 12
        }
    },
    {
        "id": 276,
        "n": "Prince",
        "t": "4",
        "img": {
            "hash": "18 0 87 57 36 2 1 33 148 43 11 6"
        },
        "params": {
            "health": 210,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 145,
                    "chance": 0.0025
                },
                {
                    "id": 764,
                    "chance": 0.0025
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 818,
                    "chance": 0.0025
                },
                {
                    "id": 813,
                    "chance": 0.0025
                },
                {
                    "id": 481,
                    "chance": 0.0025
                },
                {
                    "id": 167,
                    "chance": 0.0025
                }
            ],
            "combat_level": 180
        },
        "temp": {
            "health": 210,
            "busy": false,
            "total_defense": 200,
            "total_strength": 110,
            "total_accuracy": 200
        },
        "locations": {
            "No Man's Land": 22
        }
    },
    {
        "id": 277,
        "n": "King",
        "t": "4",
        "img": {
            "hash": "18 0 92 61 28 2 1 33 173 51 11 6"
        },
        "params": {
            "health": 290,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 183,
                    "chance": 0.0025
                },
                {
                    "id": 477,
                    "chance": 0.0025
                },
                {
                    "id": 6,
                    "chance": 0.05
                },
                {
                    "id": 169,
                    "chance": 0.0025
                },
                {
                    "id": 378,
                    "chance": 0.0025
                },
                {
                    "id": 363,
                    "chance": 0.0025
                },
                {
                    "id": 467,
                    "chance": 0.0025
                },
                {
                    "id": 248,
                    "chance": 0.05
                },
                {
                    "id": 907,
                    "chance": 0.0015
                }
            ],
            "combat_level": 275
        },
        "temp": {
            "health": 290,
            "busy": false,
            "total_defense": 350,
            "total_strength": 110,
            "total_accuracy": 350
        },
        "locations": {
            "No Man's Land": 16
        }
    },
    {
        "id": 278,
        "n": "[BOSS] World Tree",
        "t": "4",
        "img": {
            "sheet": "58",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 14000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.06
                },
                {
                    "id": 179,
                    "chance": 0.06
                },
                {
                    "id": 907,
                    "chance": 0.06
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 171,
                    "chance": 0.03
                },
                {
                    "id": 587,
                    "chance": 0.05
                },
                {
                    "id": 347,
                    "chance": 0.04
                },
                {
                    "id": 1354,
                    "chance": 0.04
                },
                {
                    "id": 593,
                    "chance": 0.05
                },
                {
                    "id": 501,
                    "chance": 0.05
                },
                {
                    "id": 262,
                    "chance": 0.1
                },
                {
                    "id": 478,
                    "chance": 0.05
                },
                {
                    "id": 1343,
                    "chance": 0.005
                }
            ],
            "combat_level": 3775
        },
        "temp": {
            "health": 14000,
            "busy": false,
            "total_defense": 150,
            "total_strength": 50,
            "total_accuracy": 900
        },
        "locations": {
            "No Man's Land": 1
        }
    },
    {
        "id": 280,
        "n": "Moth",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 0,
            "y": 7
        },
        "params": {
            "health": 5,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 3,
                    "chance": 0.25
                },
                {
                    "id": 0,
                    "chance": 0.05
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 21,
                    "chance": 0.05
                },
                {
                    "id": 5,
                    "chance": 0.05
                }
            ],
            "combat_level": 1
        },
        "temp": {
            "health": 5,
            "busy": false,
            "total_defense": 0,
            "total_strength": 1,
            "total_accuracy": 1
        },
        "locations": {
            "Dorpat": 14,
            "Dungeon": 9
        }
    },
    {
        "id": 281,
        "n": "Blood Spirit",
        "t": "4",
        "img": {
            "sheet": "25",
            "x": 2,
            "y": 5
        },
        "params": {
            "health": 160,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 128,
                    "chance": 0.0025
                },
                {
                    "id": 145,
                    "chance": 0.0025
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 818,
                    "chance": 0.0025
                },
                {
                    "id": 813,
                    "chance": 0.0025
                },
                {
                    "id": 481,
                    "chance": 0.0025
                },
                {
                    "id": 167,
                    "chance": 0.0025
                }
            ],
            "combat_level": 170
        },
        "temp": {
            "health": 160,
            "busy": false,
            "total_defense": 230,
            "total_strength": 70,
            "total_accuracy": 220
        },
        "locations": {
            "Ancient Dungeon": 36
        }
    },
    {
        "id": 282,
        "n": "Queen Lizard",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 9,
            "y": 7
        },
        "params": {
            "health": 165,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 102,
                    "chance": 0.01
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 394,
                    "chance": 0.0025
                },
                {
                    "id": 430,
                    "chance": 0.0025
                },
                {
                    "id": 339,
                    "chance": 0.0025
                },
                {
                    "id": 487,
                    "chance": 0.0025
                },
                {
                    "id": 154,
                    "chance": 0.0025
                },
                {
                    "id": 61,
                    "chance": 0.0025
                },
                {
                    "id": 1012,
                    "chance": 0.006
                }
            ],
            "combat_level": 175
        },
        "temp": {
            "health": 165,
            "busy": false,
            "total_defense": 220,
            "total_strength": 80,
            "total_accuracy": 235
        },
        "locations": {
            "Ancient Dungeon": 18
        }
    },
    {
        "id": 283,
        "n": "Pyrohydra",
        "t": "4",
        "img": {
            "sheet": "17",
            "x": 5,
            "y": 6
        },
        "params": {
            "health": 190,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 364,
                    "chance": 0.0025
                },
                {
                    "id": 157,
                    "chance": 0.0025
                },
                {
                    "id": 981,
                    "chance": 0.003
                },
                {
                    "id": 52,
                    "chance": 0.0025
                },
                {
                    "id": 152,
                    "chance": 0.0025
                },
                {
                    "id": 1012,
                    "chance": 0.01
                },
                {
                    "id": 327,
                    "chance": 0.0025
                },
                {
                    "id": 324,
                    "chance": 0.0025
                },
                {
                    "id": 446,
                    "chance": 0.0025
                }
            ],
            "combat_level": 210
        },
        "temp": {
            "health": 190,
            "busy": false,
            "total_defense": 250,
            "total_strength": 150,
            "total_accuracy": 250
        },
        "locations": {
            "Ancient Dungeon": 16
        }
    },
    {
        "id": 284,
        "n": "Earthstorm",
        "t": "4",
        "img": {
            "sheet": "25",
            "x": 5,
            "y": 3
        },
        "params": {
            "health": 220,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 116,
                    "chance": 0.02
                },
                {
                    "id": 189,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 158,
                    "chance": 0.0025
                },
                {
                    "id": 181,
                    "chance": 0.0025
                },
                {
                    "id": 618,
                    "chance": 0.0025
                },
                {
                    "id": 468,
                    "chance": 0.0025
                },
                {
                    "id": 1013,
                    "chance": 0.0025
                },
                {
                    "id": 866,
                    "chance": 0.0025
                },
                {
                    "id": 19,
                    "chance": 0.0025
                },
                {
                    "id": 156,
                    "chance": 0.0025
                }
            ],
            "combat_level": 240
        },
        "temp": {
            "health": 220,
            "busy": false,
            "total_defense": 300,
            "total_strength": 140,
            "total_accuracy": 300
        },
        "locations": {
            "Ancient Dungeon": 15
        }
    },
    {
        "id": 285,
        "n": "Diamond Plant",
        "t": "4",
        "img": {
            "sheet": "24",
            "x": 5,
            "y": 3
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 52,
                    "chance": 0.0025
                },
                {
                    "id": 659,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 480,
                    "chance": 0.0025
                },
                {
                    "id": 86,
                    "chance": 0.03
                },
                {
                    "id": 194,
                    "chance": 0.004
                },
                {
                    "id": 195,
                    "chance": 0.0025
                },
                {
                    "id": 1014,
                    "chance": 0.0025
                },
                {
                    "id": 1015,
                    "chance": 0.01
                },
                {
                    "id": 787,
                    "chance": 0.01
                }
            ],
            "combat_level": 270
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 350,
            "total_strength": 130,
            "total_accuracy": 350
        },
        "locations": {
            "Ancient Dungeon": 20
        }
    },
    {
        "id": 286,
        "n": "Hydra Dragon",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 8,
            "y": 3
        },
        "params": {
            "health": 290,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 101,
                    "chance": 0.02
                },
                {
                    "id": 702,
                    "chance": 0.0025
                },
                {
                    "id": 229,
                    "chance": 0.05
                },
                {
                    "id": 1015,
                    "chance": 0.05
                },
                {
                    "id": 436,
                    "chance": 0.0025
                },
                {
                    "id": 267,
                    "chance": 0.05
                },
                {
                    "id": 981,
                    "chance": 0.003
                },
                {
                    "id": 1014,
                    "chance": 0.0025
                },
                {
                    "id": 616,
                    "chance": 0.0025
                },
                {
                    "id": 905,
                    "chance": 0.0025
                },
                {
                    "id": 183,
                    "chance": 0.0025
                },
                {
                    "id": 669,
                    "chance": 0.0025
                }
            ],
            "combat_level": 298
        },
        "temp": {
            "health": 290,
            "busy": false,
            "total_defense": 382,
            "total_strength": 170,
            "total_accuracy": 350
        },
        "locations": {
            "Ancient Dungeon": 11
        }
    },
    {
        "id": 288,
        "n": "Beholder Overseer",
        "t": "4",
        "img": {
            "sheet": "21",
            "x": 1,
            "y": 7
        },
        "params": {
            "health": 230,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 153,
                    "chance": 0.0025
                },
                {
                    "id": 268,
                    "chance": 0.1
                },
                {
                    "id": 983,
                    "chance": 0.003
                },
                {
                    "id": 981,
                    "chance": 0.003
                },
                {
                    "id": 188,
                    "chance": 0.0025
                },
                {
                    "id": 161,
                    "chance": 0.0025
                },
                {
                    "id": 376,
                    "chance": 0.0025
                },
                {
                    "id": 682,
                    "chance": 0.0025
                },
                {
                    "id": 266,
                    "chance": 0.0025
                },
                {
                    "id": 173,
                    "chance": 0.005
                },
                {
                    "id": 59,
                    "chance": 0.008
                }
            ],
            "combat_level": 230
        },
        "temp": {
            "health": 230,
            "busy": false,
            "total_defense": 250,
            "total_strength": 90,
            "total_accuracy": 350
        },
        "locations": {
            "Ancient Dungeon": 18
        }
    },
    {
        "id": 291,
        "n": "Rudolph",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 8,
            "y": 0
        },
        "params": {
            "health": 18,
            "radius": 9,
            "no_dungeon": true,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 494,
                    "chance": 0.1
                },
                {
                    "id": 204,
                    "chance": 0.02
                },
                {
                    "id": 200,
                    "chance": 0.02
                },
                {
                    "id": 198,
                    "chance": 0.02
                },
                {
                    "id": 196,
                    "chance": 0.02
                },
                {
                    "id": 1144,
                    "chance": 0.0025
                },
                {
                    "id": 384,
                    "chance": 0.025
                },
                {
                    "id": 383,
                    "chance": 0.025
                },
                {
                    "id": 1146,
                    "chance": 0.0025
                },
                {
                    "id": 424,
                    "chance": 0.0025
                }
            ]
        },
        "temp": {
            "health": 18,
            "busy": false,
            "total_defense": 17,
            "total_strength": 17,
            "total_accuracy": 20
        },
        "locations": {}
    },
    {
        "id": 292,
        "n": "Snowman",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 9,
            "y": 0
        },
        "params": {
            "health": 18,
            "radius": 9,
            "no_dungeon": true,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 494,
                    "chance": 0.1
                },
                {
                    "id": 784,
                    "chance": 0.02
                },
                {
                    "id": 200,
                    "chance": 0.02
                },
                {
                    "id": 198,
                    "chance": 0.02
                },
                {
                    "id": 196,
                    "chance": 0.02
                },
                {
                    "id": 384,
                    "chance": 0.025
                },
                {
                    "id": 383,
                    "chance": 0.025
                },
                {
                    "id": 1145,
                    "chance": 0.0025
                },
                {
                    "id": 1146,
                    "chance": 0.0025
                },
                {
                    "id": 424,
                    "chance": 0.0025
                }
            ]
        },
        "temp": {
            "health": 18,
            "busy": false,
            "total_defense": 17,
            "total_strength": 17,
            "total_accuracy": 20
        },
        "locations": {}
    },
    {
        "id": 293,
        "n": "Unhappy Cupid",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 6,
            "y": 6
        },
        "params": {
            "health": 18,
            "radius": 9,
            "no_dungeon": true,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 1158,
                    "chance": 0.025
                },
                {
                    "id": 320,
                    "chance": 0.05
                },
                {
                    "id": 200,
                    "chance": 0.02
                },
                {
                    "id": 198,
                    "chance": 0.02
                },
                {
                    "id": 196,
                    "chance": 0.02
                },
                {
                    "id": 384,
                    "chance": 0.025
                },
                {
                    "id": 383,
                    "chance": 0.025
                },
                {
                    "id": 1154,
                    "chance": 0.0055
                },
                {
                    "id": 1156,
                    "chance": 0.0025
                },
                {
                    "id": 424,
                    "chance": 0.0025
                }
            ]
        },
        "temp": {
            "health": 18,
            "busy": false,
            "total_defense": 17,
            "total_strength": 17,
            "total_accuracy": 20
        },
        "locations": {}
    },
    {
        "id": 294,
        "n": "[BOSS] Cannibal Plant",
        "t": "4",
        "img": {
            "sheet": "58",
            "x": 3,
            "y": 0
        },
        "params": {
            "health": 7350,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.06
                },
                {
                    "id": 1306,
                    "chance": 0.06
                },
                {
                    "id": 664,
                    "chance": 0.04
                },
                {
                    "id": 710,
                    "chance": 0.03
                },
                {
                    "id": 147,
                    "chance": 0.07
                },
                {
                    "id": 143,
                    "chance": 0.04
                },
                {
                    "id": 450,
                    "chance": 0.05
                },
                {
                    "id": 465,
                    "chance": 0.04
                },
                {
                    "id": 620,
                    "chance": 0.04
                },
                {
                    "id": 867,
                    "chance": 0.03
                },
                {
                    "id": 1077,
                    "chance": 0.03
                },
                {
                    "id": 653,
                    "chance": 0.04
                },
                {
                    "id": 593,
                    "chance": 0.03
                },
                {
                    "id": 378,
                    "chance": 0.05
                },
                {
                    "id": 477,
                    "chance": 0.05
                }
            ],
            "combat_level": 2100
        },
        "temp": {
            "health": 7350,
            "busy": false,
            "total_defense": 400,
            "total_strength": 180,
            "total_accuracy": 470
        },
        "locations": {
            "Ancient Dungeon": 1
        }
    },
    {
        "id": 295,
        "n": "Leprechaun",
        "t": "4",
        "img": {
            "sheet": "45",
            "x": 10,
            "y": 2
        },
        "params": {
            "health": 18,
            "radius": 9,
            "no_dungeon": true,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 1172,
                    "chance": 0.025
                },
                {
                    "id": 1173,
                    "chance": 0.005
                },
                {
                    "id": 1024,
                    "chance": 0.03
                },
                {
                    "id": 200,
                    "chance": 0.0025
                },
                {
                    "id": 247,
                    "chance": 0.1
                },
                {
                    "id": 20,
                    "chance": 0.15
                },
                {
                    "id": 27,
                    "chance": 0.05
                },
                {
                    "id": 198,
                    "chance": 0.0025
                },
                {
                    "id": 196,
                    "chance": 0.0025
                },
                {
                    "id": 185,
                    "chance": 0.03
                },
                {
                    "id": 184,
                    "chance": 0.01
                }
            ]
        },
        "temp": {
            "health": 18,
            "busy": false,
            "total_defense": 17,
            "total_strength": 17,
            "total_accuracy": 20
        },
        "locations": {}
    },
    {
        "id": 303,
        "n": "Giant Troll",
        "t": "4",
        "img": {
            "sheet": "44",
            "x": 4,
            "y": 2
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 200,
                    "chance": 0.005
                },
                {
                    "id": 270,
                    "chance": 0.1
                },
                {
                    "id": 264,
                    "chance": 0.1
                },
                {
                    "id": 230,
                    "chance": 0.05
                },
                {
                    "id": 1197,
                    "chance": 0.002
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 0,
                    "chance": 0.02
                },
                {
                    "id": 185,
                    "chance": 0.01
                },
                {
                    "id": 184,
                    "chance": 0.005
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 146,
                    "chance": 0.0025
                }
            ],
            "combat_level": 108
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 130,
            "total_strength": 70,
            "total_accuracy": 140
        },
        "locations": {
            "Rakblood": 19
        }
    },
    {
        "id": 304,
        "n": "Kobalos",
        "t": "4",
        "img": {
            "sheet": "45",
            "x": 11,
            "y": 2
        },
        "params": {
            "health": 23,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 14,
                    "chance": 0.05
                },
                {
                    "id": 15,
                    "chance": 0.1
                },
                {
                    "id": 213,
                    "chance": 0.02
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 1170,
                    "chance": 0.0025
                },
                {
                    "id": 19,
                    "chance": 0.01
                }
            ],
            "combat_level": 20
        },
        "temp": {
            "health": 23,
            "busy": false,
            "total_defense": 20,
            "total_strength": 20,
            "total_accuracy": 20
        },
        "locations": {
            "Reval": 14
        }
    },
    {
        "id": 305,
        "n": "Training Dummy",
        "t": "4",
        "img": {
            "sheet": "22",
            "x": 4,
            "y": 7
        },
        "params": {
            "health": 4,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [],
            "combat_level": 1
        },
        "temp": {
            "health": 4,
            "busy": false,
            "total_defense": 0,
            "total_strength": 0,
            "total_accuracy": 0
        },
        "locations": {
            "Tutorial Island": 10
        }
    },
    {
        "id": 308,
        "n": "[BOSS] Giant Cyclops",
        "t": "4",
        "img": {
            "sheet": "58",
            "x": 2,
            "y": 0
        },
        "params": {
            "health": 1100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.05
                },
                {
                    "id": 178,
                    "chance": 0.05
                },
                {
                    "id": 1127,
                    "chance": 0.05
                },
                {
                    "id": 1305,
                    "chance": 0.05
                },
                {
                    "id": 363,
                    "chance": 0.05
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 167,
                    "chance": 0.05
                },
                {
                    "id": 651,
                    "chance": 0.03
                },
                {
                    "id": 481,
                    "chance": 0.06
                },
                {
                    "id": 497,
                    "chance": 0.07
                },
                {
                    "id": 710,
                    "chance": 0.02
                },
                {
                    "id": 593,
                    "chance": 0.03
                },
                {
                    "id": 476,
                    "chance": 0.05
                }
            ],
            "combat_level": 450
        },
        "temp": {
            "health": 1100,
            "busy": false,
            "total_defense": 250,
            "total_strength": 100,
            "total_accuracy": 350
        },
        "locations": {
            "Lost Woods": 1
        }
    },
    {
        "id": 309,
        "n": "[BOSS] Cave Crawler",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.05
                },
                {
                    "id": 178,
                    "chance": 0.05
                },
                {
                    "id": 1127,
                    "chance": 0.05
                },
                {
                    "id": 1305,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.05
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 167,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.03
                },
                {
                    "id": 455,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.07
                },
                {
                    "id": 339,
                    "chance": 0.06
                },
                {
                    "id": 710,
                    "chance": 0.02
                },
                {
                    "id": 593,
                    "chance": 0.03
                },
                {
                    "id": 476,
                    "chance": 0.05
                }
            ],
            "combat_level": 435
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 260,
            "total_strength": 120,
            "total_accuracy": 360
        },
        "locations": {
            "Lost Woods": 1
        }
    },
    {
        "id": 310,
        "n": "[BOSS] Venus Flytrap",
        "t": "4",
        "img": {
            "sheet": "41",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 1400,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 174,
                    "chance": 0.05
                },
                {
                    "id": 178,
                    "chance": 0.05
                },
                {
                    "id": 1127,
                    "chance": 0.05
                },
                {
                    "id": 1305,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.05
                },
                {
                    "id": 982,
                    "chance": 0.05
                },
                {
                    "id": 167,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.03
                },
                {
                    "id": 130,
                    "chance": 0.05
                },
                {
                    "id": 806,
                    "chance": 0.04
                },
                {
                    "id": 803,
                    "chance": 0.07
                },
                {
                    "id": 1070,
                    "chance": 0.06
                },
                {
                    "id": 710,
                    "chance": 0.02
                },
                {
                    "id": 593,
                    "chance": 0.03
                },
                {
                    "id": 476,
                    "chance": 0.05
                }
            ],
            "combat_level": 545
        },
        "temp": {
            "health": 1400,
            "busy": false,
            "total_defense": 280,
            "total_strength": 120,
            "total_accuracy": 380
        },
        "locations": {
            "Lost Woods": 1
        }
    },
    {
        "id": 314,
        "n": "Earth Elemental",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 5,
            "y": 3
        },
        "params": {
            "health": 45,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 200,
                    "chance": 0.005
                },
                {
                    "id": 30,
                    "chance": 0.1
                },
                {
                    "id": 31,
                    "chance": 0.05
                },
                {
                    "id": 205,
                    "chance": 0.1
                },
                {
                    "id": 212,
                    "chance": 0.05
                },
                {
                    "id": 419,
                    "chance": 0.0025
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 457,
                    "chance": 0.0025
                },
                {
                    "id": 285,
                    "chance": 0.005
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 48,
                    "chance": 0.005
                },
                {
                    "id": 146,
                    "chance": 0.0025
                }
            ],
            "combat_level": 50
        },
        "temp": {
            "health": 45,
            "busy": false,
            "total_defense": 55,
            "total_strength": 20,
            "total_accuracy": 80
        },
        "locations": {
            "Broceliande Forest": 6,
            "Devil's Triangle": 28
        }
    },
    {
        "id": 315,
        "n": "Water Elemental",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 6,
            "y": 3
        },
        "params": {
            "health": 55,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 200,
                    "chance": 0.005
                },
                {
                    "id": 30,
                    "chance": 0.1
                },
                {
                    "id": 31,
                    "chance": 0.05
                },
                {
                    "id": 205,
                    "chance": 0.1
                },
                {
                    "id": 212,
                    "chance": 0.05
                },
                {
                    "id": 420,
                    "chance": 0.0025
                },
                {
                    "id": 856,
                    "chance": 0.0025
                },
                {
                    "id": 857,
                    "chance": 0.0025
                },
                {
                    "id": 285,
                    "chance": 0.005
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 48,
                    "chance": 0.005
                },
                {
                    "id": 426,
                    "chance": 0.0025
                }
            ],
            "combat_level": 85
        },
        "temp": {
            "health": 55,
            "busy": false,
            "total_defense": 80,
            "total_strength": 45,
            "total_accuracy": 160
        },
        "locations": {
            "Broceliande Forest": 7,
            "Devil's Triangle": 19
        }
    },
    {
        "id": 316,
        "n": "Ice Elemental",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 7,
            "y": 3
        },
        "params": {
            "health": 75,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 196,
                    "chance": 0.005
                },
                {
                    "id": 30,
                    "chance": 0.1
                },
                {
                    "id": 31,
                    "chance": 0.05
                },
                {
                    "id": 205,
                    "chance": 0.1
                },
                {
                    "id": 212,
                    "chance": 0.05
                },
                {
                    "id": 420,
                    "chance": 0.0025
                },
                {
                    "id": 450,
                    "chance": 0.0015
                },
                {
                    "id": 455,
                    "chance": 0.0025
                },
                {
                    "id": 285,
                    "chance": 0.005
                },
                {
                    "id": 249,
                    "chance": 0.05
                },
                {
                    "id": 48,
                    "chance": 0.005
                },
                {
                    "id": 436,
                    "chance": 0.0025
                }
            ],
            "combat_level": 130
        },
        "temp": {
            "health": 75,
            "busy": false,
            "total_defense": 120,
            "total_strength": 25,
            "total_accuracy": 300
        },
        "locations": {
            "Broceliande Forest": 20,
            "Devil's Triangle": 27
        }
    },
    {
        "id": 317,
        "n": "Rock Golem",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 8,
            "y": 3
        },
        "params": {
            "health": 120,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 153,
                    "chance": 0.0025
                },
                {
                    "id": 862,
                    "chance": 0.0015
                },
                {
                    "id": 655,
                    "chance": 0.0025
                },
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 193,
                    "chance": 0.0025
                },
                {
                    "id": 430,
                    "chance": 0.0025
                },
                {
                    "id": 1351,
                    "chance": 0.0025
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 855,
                    "chance": 0.002
                },
                {
                    "id": 440,
                    "chance": 0.0025
                },
                {
                    "id": 156,
                    "chance": 0.003
                }
            ],
            "combat_level": 220
        },
        "temp": {
            "health": 120,
            "busy": false,
            "total_defense": 450,
            "total_strength": 60,
            "total_accuracy": 250
        },
        "locations": {
            "Broceliande Forest": 16,
            "Devil's Triangle": 20
        }
    },
    {
        "id": 318,
        "n": "Draman",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 2,
            "y": 3
        },
        "params": {
            "health": 60,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 198,
                    "chance": 0.005
                },
                {
                    "id": 200,
                    "chance": 0.005
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 265,
                    "chance": 0.005
                },
                {
                    "id": 1072,
                    "chance": 0.0025
                },
                {
                    "id": 993,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 100
        },
        "temp": {
            "health": 60,
            "busy": false,
            "total_defense": 0,
            "total_strength": 40,
            "total_accuracy": 300
        },
        "locations": {
            "Broceliande Forest": 18,
            "Devil's Triangle": 11
        }
    },
    {
        "id": 319,
        "n": "Raaz",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 3,
            "y": 3
        },
        "params": {
            "health": 88,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 198,
                    "chance": 0.005
                },
                {
                    "id": 200,
                    "chance": 0.005
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 992,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 122
        },
        "temp": {
            "health": 88,
            "busy": false,
            "total_defense": 0,
            "total_strength": 50,
            "total_accuracy": 350
        },
        "locations": {
            "Broceliande Forest": 4,
            "Devil's Triangle": 8
        }
    },
    {
        "id": 320,
        "n": "Gor-gin",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 4,
            "y": 3
        },
        "params": {
            "health": 90,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 198,
                    "chance": 0.005
                },
                {
                    "id": 196,
                    "chance": 0.005
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 130
        },
        "temp": {
            "health": 90,
            "busy": false,
            "total_defense": 0,
            "total_strength": 40,
            "total_accuracy": 390
        },
        "locations": {
            "Broceliande Forest": 18,
            "Devil's Triangle": 4
        }
    },
    {
        "id": 321,
        "n": "Verme",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 60,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 198,
                    "chance": 0.005
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 203,
                    "chance": 0.005
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 125
        },
        "temp": {
            "health": 60,
            "busy": false,
            "total_defense": 0,
            "total_strength": 40,
            "total_accuracy": 400
        },
        "locations": {
            "Broceliande Forest": 17,
            "Devil's Triangle": 9
        }
    },
    {
        "id": 322,
        "n": "Iphar",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 8,
            "y": 2
        },
        "params": {
            "health": 72,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 203,
                    "chance": 0.005
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 125
        },
        "temp": {
            "health": 72,
            "busy": false,
            "total_defense": 0,
            "total_strength": 30,
            "total_accuracy": 400
        },
        "locations": {
            "Broceliande Forest": 9,
            "Devil's Triangle": 8
        }
    },
    {
        "id": 323,
        "n": "Ent",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 130,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 203,
                    "chance": 0.005
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 595,
                    "chance": 0.005
                },
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 1073,
                    "chance": 0.0025
                },
                {
                    "id": 996,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 200
        },
        "temp": {
            "health": 130,
            "busy": false,
            "total_defense": 300,
            "total_strength": 70,
            "total_accuracy": 300
        },
        "locations": {
            "Broceliande Forest": 25
        }
    },
    {
        "id": 324,
        "n": "Summoned Skull",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 4,
            "y": 0
        },
        "params": {
            "health": 140,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 657,
                    "chance": 0.0015
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 497,
                    "chance": 0.0025
                },
                {
                    "id": 664,
                    "chance": 0.0015
                },
                {
                    "id": 996,
                    "chance": 0.0025
                },
                {
                    "id": 452,
                    "chance": 0.0025
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 210
        },
        "temp": {
            "health": 140,
            "busy": false,
            "total_defense": 300,
            "total_strength": 50,
            "total_accuracy": 350
        },
        "locations": {
            "Broceliande Forest": 14,
            "Devil's Triangle": 18
        }
    },
    {
        "id": 325,
        "n": "Ancient Golem",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 5,
            "y": 0
        },
        "params": {
            "health": 140,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 202,
                    "chance": 0.005
                },
                {
                    "id": 657,
                    "chance": 0.0015
                },
                {
                    "id": 266,
                    "chance": 0.005
                },
                {
                    "id": 498,
                    "chance": 0.0025
                },
                {
                    "id": 994,
                    "chance": 0.0025
                },
                {
                    "id": 465,
                    "chance": 0.0015
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 250
        },
        "temp": {
            "health": 140,
            "busy": false,
            "total_defense": 450,
            "total_strength": 60,
            "total_accuracy": 350
        },
        "locations": {
            "Broceliande Forest": 19,
            "Devil's Triangle": 25
        }
    },
    {
        "id": 326,
        "n": "Alligator",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 3,
            "y": 0
        },
        "params": {
            "health": 60,
            "radius": 9,
            "move_radius": 10,
            "aggressive": true,
            "speed": 100,
            "drops": [
                {
                    "id": 93,
                    "chance": 0.05
                },
                {
                    "id": 994,
                    "chance": 0.0035
                },
                {
                    "id": 176,
                    "chance": 0.005
                },
                {
                    "id": 231,
                    "chance": 0.005
                },
                {
                    "id": 1031,
                    "chance": 0.0025
                },
                {
                    "id": 198,
                    "chance": 0.008
                },
                {
                    "id": 188,
                    "chance": 0.0025
                }
            ],
            "combat_level": 95
        },
        "temp": {
            "health": 60,
            "busy": false,
            "total_defense": 120,
            "total_strength": 20,
            "total_accuracy": 180
        },
        "locations": {
            "Devil's Triangle": 13
        }
    },
    {
        "id": 327,
        "n": "Necromancer",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 1,
            "y": 0
        },
        "params": {
            "health": 80,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 291,
                    "chance": 0.005
                },
                {
                    "id": 657,
                    "chance": 0.0015
                },
                {
                    "id": 1013,
                    "chance": 0.0025
                },
                {
                    "id": 498,
                    "chance": 0.0025
                },
                {
                    "id": 994,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 432,
                    "chance": 0.0015
                },
                {
                    "id": 283,
                    "chance": 0.05
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 435,
                    "chance": 0.0025
                }
            ],
            "combat_level": 165
        },
        "temp": {
            "health": 80,
            "busy": false,
            "total_defense": 230,
            "total_strength": 50,
            "total_accuracy": 300
        },
        "locations": {
            "Broceliande Forest": 6,
            "Devil's Triangle": 18
        }
    },
    {
        "id": 328,
        "n": "Gravekeeper",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 2,
            "y": 0
        },
        "params": {
            "health": 92,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.0025
                },
                {
                    "id": 291,
                    "chance": 0.005
                },
                {
                    "id": 186,
                    "chance": 0.0035
                },
                {
                    "id": 1013,
                    "chance": 0.0025
                },
                {
                    "id": 498,
                    "chance": 0.0025
                },
                {
                    "id": 994,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 432,
                    "chance": 0.0015
                },
                {
                    "id": 692,
                    "chance": 0.0025
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 467,
                    "chance": 0.0025
                }
            ],
            "combat_level": 108
        },
        "temp": {
            "health": 92,
            "busy": false,
            "total_defense": 130,
            "total_strength": 70,
            "total_accuracy": 140
        },
        "locations": {
            "Broceliande Forest": 6,
            "Devil's Triangle": 10
        }
    },
    {
        "id": 329,
        "n": "Undead Paladin",
        "t": "4",
        "img": {
            "sheet": "19",
            "x": 6,
            "y": 0
        },
        "params": {
            "health": 100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "drops": [
                {
                    "id": 194,
                    "chance": 0.008
                },
                {
                    "id": 291,
                    "chance": 0.005
                },
                {
                    "id": 186,
                    "chance": 0.0035
                },
                {
                    "id": 133,
                    "chance": 0.0025
                },
                {
                    "id": 39,
                    "chance": 0.0025
                },
                {
                    "id": 994,
                    "chance": 0.0025
                },
                {
                    "id": 995,
                    "chance": 0.0025
                },
                {
                    "id": 163,
                    "chance": 0.0015
                },
                {
                    "id": 692,
                    "chance": 0.0025
                },
                {
                    "id": 247,
                    "chance": 0.05
                },
                {
                    "id": 40,
                    "chance": 0.0025
                }
            ],
            "combat_level": 200
        },
        "temp": {
            "health": 100,
            "busy": false,
            "total_defense": 250,
            "total_strength": 50,
            "total_accuracy": 400
        },
        "locations": {
            "Broceliande Forest": 18,
            "Devil's Triangle": 9
        }
    },
    {
        "id": 333,
        "n": "[Boss] Air Priest",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 0
        },
        "params": {
            "health": 650,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 15,
            "no_dungeon": true,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 190,
                    "chance": 0.1
                },
                {
                    "id": 173,
                    "chance": 0.1
                },
                {
                    "id": 177,
                    "chance": 0.1
                },
                {
                    "id": 193,
                    "chance": 0.1
                },
                {
                    "id": 1304,
                    "chance": 0.1
                },
                {
                    "id": 1126,
                    "chance": 0.1
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 437,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.07
                },
                {
                    "id": 18,
                    "chance": 0.05
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ],
            "next_cathedral_npc_id": 352,
            "respawn_time": 5
        },
        "temp": {
            "health": 650,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 8
                }
            ],
            "magic": 70,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 65
        },
        "locations": {
            "Cathedral": 6
        }
    },
    {
        "id": 334,
        "n": "[Boss] Earth Priestess",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 0
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 360,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 190,
                    "chance": 0.1
                },
                {
                    "id": 173,
                    "chance": 0.1
                },
                {
                    "id": 177,
                    "chance": 0.1
                },
                {
                    "id": 193,
                    "chance": 0.1
                },
                {
                    "id": 1304,
                    "chance": 0.1
                },
                {
                    "id": 1126,
                    "chance": 0.1
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 437,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.07
                },
                {
                    "id": 18,
                    "chance": 0.05
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 10
                }
            ],
            "magic": 66,
            "cooldown": 0.6,
            "total_strength": 1,
            "total_accuracy": 70
        },
        "locations": {
            "Cathedral": 6
        }
    },
    {
        "id": 335,
        "n": "[Boss] Water Priest",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 0
        },
        "params": {
            "health": 1050,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "no_dungeon": true,
            "next_cathedral_npc_id": 369,
            "speed": 100,
            "magic_block": 25,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 342,
                    "chance": 0.05
                },
                {
                    "id": 426,
                    "chance": 0.05
                },
                {
                    "id": 455,
                    "chance": 0.05
                },
                {
                    "id": 424,
                    "chance": 0.05
                },
                {
                    "id": 457,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 1298,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 441,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1050,
            "busy": false,
            "total_defense": 222,
            "magics": [
                {
                    "id": 9
                }
            ],
            "magic": 84,
            "cooldown": 0.6,
            "total_strength": 1,
            "total_accuracy": 70
        },
        "locations": {
            "Cathedral": 6
        }
    },
    {
        "id": 336,
        "n": "[Boss] Fire Priestess",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 0
        },
        "params": {
            "health": 1300,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 378,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 342,
                    "chance": 0.05
                },
                {
                    "id": 426,
                    "chance": 0.05
                },
                {
                    "id": 455,
                    "chance": 0.05
                },
                {
                    "id": 424,
                    "chance": 0.05
                },
                {
                    "id": 457,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 1298,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 441,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1300,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 11
                }
            ],
            "magic": 94,
            "cooldown": 0.6,
            "total_strength": 1,
            "total_accuracy": 70
        },
        "locations": {
            "Cathedral": 6
        }
    },
    {
        "id": 337,
        "n": "[Boss] Cathedral Guardian",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 4,
            "y": 0
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 387,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 154,
                    "chance": 0.05
                },
                {
                    "id": 155,
                    "chance": 0.05
                },
                {
                    "id": 302,
                    "chance": 0.05
                },
                {
                    "id": 143,
                    "chance": 0.05
                },
                {
                    "id": 144,
                    "chance": 0.05
                },
                {
                    "id": 303,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 200,
            "total_strength": 60,
            "total_accuracy": 369
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 338,
        "n": "[Boss] God's Eye",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 0
        },
        "params": {
            "health": 1800,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "magic_block": 30,
            "next_cathedral_npc_id": 396,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 154,
                    "chance": 0.05
                },
                {
                    "id": 155,
                    "chance": 0.05
                },
                {
                    "id": 302,
                    "chance": 0.05
                },
                {
                    "id": 143,
                    "chance": 0.05
                },
                {
                    "id": 144,
                    "chance": 0.05
                },
                {
                    "id": 303,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1800,
            "busy": false,
            "total_defense": 300,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 80,
            "cooldown": 0.6,
            "total_strength": 1,
            "total_accuracy": 270
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 339,
        "n": "[Boss] Zombie Lord",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 0
        },
        "params": {
            "health": 2000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "magic_block": 30,
            "next_cathedral_npc_id": 405,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 363,
                    "chance": 0.05
                },
                {
                    "id": 932,
                    "chance": 0.05
                },
                {
                    "id": 936,
                    "chance": 0.05
                },
                {
                    "id": 1271,
                    "chance": 0.05
                },
                {
                    "id": 200,
                    "chance": 0.05
                },
                {
                    "id": 198,
                    "chance": 0.05
                },
                {
                    "id": 450,
                    "chance": 0.05
                },
                {
                    "id": 456,
                    "chance": 0.05
                },
                {
                    "id": 482,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1306,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.05
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 1066,
                    "chance": 0.05
                },
                {
                    "id": 962,
                    "chance": 0.05
                },
                {
                    "id": 969,
                    "chance": 0.05
                },
                {
                    "id": 977,
                    "chance": 0.05
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 1080,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 2000,
            "busy": false,
            "total_defense": 325,
            "total_strength": 40,
            "total_accuracy": 405
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 340,
        "n": "[Boss] Holy Knight",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 7,
            "y": 0
        },
        "params": {
            "health": 2000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 30,
            "no_dungeon": true,
            "next_cathedral_npc_id": 414,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 363,
                    "chance": 0.05
                },
                {
                    "id": 932,
                    "chance": 0.05
                },
                {
                    "id": 936,
                    "chance": 0.05
                },
                {
                    "id": 1271,
                    "chance": 0.05
                },
                {
                    "id": 200,
                    "chance": 0.05
                },
                {
                    "id": 198,
                    "chance": 0.05
                },
                {
                    "id": 450,
                    "chance": 0.05
                },
                {
                    "id": 456,
                    "chance": 0.05
                },
                {
                    "id": 482,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1306,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.05
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.05
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 1066,
                    "chance": 0.05
                },
                {
                    "id": 962,
                    "chance": 0.05
                },
                {
                    "id": 969,
                    "chance": 0.05
                },
                {
                    "id": 977,
                    "chance": 0.05
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 1080,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 2000,
            "busy": false,
            "total_defense": 320,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 94,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 290
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 341,
        "n": "[Boss] Saint Richard",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 0
        },
        "params": {
            "health": 3000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "magic_block": 35,
            "next_cathedral_npc_id": 423,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 483,
                    "chance": 0.05
                },
                {
                    "id": 451,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 462,
                    "chance": 0.05
                },
                {
                    "id": 664,
                    "chance": 0.05
                },
                {
                    "id": 661,
                    "chance": 0.05
                },
                {
                    "id": 379,
                    "chance": 0.08
                },
                {
                    "id": 440,
                    "chance": 0.05
                },
                {
                    "id": 394,
                    "chance": 0.05
                },
                {
                    "id": 430,
                    "chance": 0.05
                },
                {
                    "id": 375,
                    "chance": 0.08
                },
                {
                    "id": 618,
                    "chance": 0.05
                },
                {
                    "id": 666,
                    "chance": 0.05
                },
                {
                    "id": 968,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.08
                },
                {
                    "id": 179,
                    "chance": 0.08
                },
                {
                    "id": 1306,
                    "chance": 0.08
                },
                {
                    "id": 1128,
                    "chance": 0.08
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 364,
                    "chance": 0.05
                },
                {
                    "id": 974,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 1032,
                    "chance": 0.1
                },
                {
                    "id": 392,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.08
                },
                {
                    "id": 812,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.08
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 1080,
                    "chance": 0.08
                },
                {
                    "id": 972,
                    "chance": 0.1
                }
            ]
        },
        "temp": {
            "health": 3000,
            "busy": false,
            "total_defense": 550,
            "total_strength": 70,
            "total_accuracy": 480
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 342,
        "n": "[Boss] High Priest",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 0
        },
        "params": {
            "health": 3000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "magic_block": 35,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 434,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 483,
                    "chance": 0.05
                },
                {
                    "id": 451,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 462,
                    "chance": 0.05
                },
                {
                    "id": 664,
                    "chance": 0.05
                },
                {
                    "id": 661,
                    "chance": 0.05
                },
                {
                    "id": 379,
                    "chance": 0.08
                },
                {
                    "id": 440,
                    "chance": 0.05
                },
                {
                    "id": 394,
                    "chance": 0.05
                },
                {
                    "id": 430,
                    "chance": 0.05
                },
                {
                    "id": 375,
                    "chance": 0.08
                },
                {
                    "id": 618,
                    "chance": 0.05
                },
                {
                    "id": 666,
                    "chance": 0.05
                },
                {
                    "id": 968,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.08
                },
                {
                    "id": 179,
                    "chance": 0.08
                },
                {
                    "id": 1306,
                    "chance": 0.08
                },
                {
                    "id": 1128,
                    "chance": 0.08
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 364,
                    "chance": 0.05
                },
                {
                    "id": 974,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 1032,
                    "chance": 0.1
                },
                {
                    "id": 392,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.08
                },
                {
                    "id": 812,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.08
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 1080,
                    "chance": 0.08
                },
                {
                    "id": 972,
                    "chance": 0.1
                }
            ]
        },
        "temp": {
            "health": 3000,
            "busy": false,
            "total_defense": 508,
            "magics": [
                {
                    "id": 24
                },
                {
                    "id": 22
                }
            ],
            "magic": 78,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 492
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 343,
        "n": "Harpy 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 344,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 160,
            "total_strength": 20,
            "total_accuracy": 200,
            "magic_block": 50
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 344,
        "n": "Harpy 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 345,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 162,
            "total_strength": 20,
            "total_accuracy": 203
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 345,
        "n": "Harpy 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 346,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 165,
            "total_strength": 20,
            "total_accuracy": 205
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 346,
        "n": "Harpy 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 347,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 175,
            "total_strength": 20,
            "total_accuracy": 209
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 347,
        "n": "[Elite] Lion Turtle",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 1
        },
        "params": {
            "health": 450,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 15,
            "no_dungeon": true,
            "next_cathedral_npc_id": 348,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 190,
                    "chance": 0.1
                },
                {
                    "id": 173,
                    "chance": 0.1
                },
                {
                    "id": 177,
                    "chance": 0.1
                },
                {
                    "id": 193,
                    "chance": 0.1
                },
                {
                    "id": 1304,
                    "chance": 0.1
                },
                {
                    "id": 1126,
                    "chance": 0.1
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 437,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.07
                },
                {
                    "id": 18,
                    "chance": 0.05
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 450,
            "busy": false,
            "total_defense": 205,
            "total_strength": 10,
            "total_accuracy": 220
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 348,
        "n": "Harpy 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 349,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 2
                }
            ],
            "magic": 80,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 60
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 349,
        "n": "Harpy 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 350,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 2
                }
            ],
            "magic": 85,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 58
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 350,
        "n": "Harpy 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 351,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 2
                }
            ],
            "magic": 88,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 55
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 351,
        "n": "Harpy 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 1
        },
        "params": {
            "health": 250,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 333,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 250,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 2
                }
            ],
            "magic": 89,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 60
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 352,
        "n": "Dragonbat 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 353,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 3
                }
            ],
            "magic": 74,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 60
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 353,
        "n": "Dragonbat 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 354,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 3
                }
            ],
            "magic": 77,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 60
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 354,
        "n": "Dragonbat 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 355,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 3
                }
            ],
            "magic": 78,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 62
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 355,
        "n": "Dragonbat 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 356,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 3
                }
            ],
            "magic": 78,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 65
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 356,
        "n": "[Elite] Capricorn",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 7,
            "y": 1
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 15,
            "no_dungeon": true,
            "next_cathedral_npc_id": 357,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 190,
                    "chance": 0.1
                },
                {
                    "id": 173,
                    "chance": 0.1
                },
                {
                    "id": 177,
                    "chance": 0.1
                },
                {
                    "id": 193,
                    "chance": 0.1
                },
                {
                    "id": 1304,
                    "chance": 0.1
                },
                {
                    "id": 1126,
                    "chance": 0.1
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 437,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.07
                },
                {
                    "id": 18,
                    "chance": 0.05
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 5
                }
            ],
            "magic": 78,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 65
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 357,
        "n": "Dragonbat 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 358,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 185,
            "total_strength": 18,
            "total_accuracy": 220
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 358,
        "n": "Dragonbat 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 359,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 188,
            "total_strength": 20,
            "total_accuracy": 223
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 359,
        "n": "Dragonbat 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 432,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 192,
            "total_strength": 20,
            "total_accuracy": 226
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 360,
        "n": "Ogre 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 361,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 222,
            "total_strength": 22,
            "total_accuracy": 241
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 361,
        "n": "Ogre 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 362,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 228,
            "total_strength": 22,
            "total_accuracy": 247
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 362,
        "n": "Ogre 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 363,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 235,
            "total_strength": 22,
            "total_accuracy": 255
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 363,
        "n": "Ogre 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 364,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 239,
            "total_strength": 22,
            "total_accuracy": 260
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 364,
        "n": "[Elite] Giant",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 4,
            "y": 1
        },
        "params": {
            "health": 750,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 365,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 342,
                    "chance": 0.05
                },
                {
                    "id": 426,
                    "chance": 0.05
                },
                {
                    "id": 455,
                    "chance": 0.05
                },
                {
                    "id": 424,
                    "chance": 0.05
                },
                {
                    "id": 457,
                    "chance": 0.05
                },
                {
                    "id": 1298,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 441,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 750,
            "busy": false,
            "total_defense": 242,
            "total_strength": 22,
            "total_accuracy": 268
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 365,
        "n": "Ogre 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 366,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 192,
            "magics": [
                {
                    "id": 4
                }
            ],
            "magic": 90,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 65
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 366,
        "n": "Ogre 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 367,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 212,
            "magics": [
                {
                    "id": 4
                }
            ],
            "magic": 90,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 74
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 367,
        "n": "Ogre 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 368,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 222,
            "magics": [
                {
                    "id": 4
                }
            ],
            "magic": 93,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 74
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 368,
        "n": "Ogre 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 2,
            "y": 2
        },
        "params": {
            "health": 410,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 335,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 410,
            "busy": false,
            "total_defense": 229,
            "magics": [
                {
                    "id": 4
                }
            ],
            "magic": 94,
            "cooldown": 0.5,
            "total_strength": 1,
            "total_accuracy": 74
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 369,
        "n": "Water Elf 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 370,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 269,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 90,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 172
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 370,
        "n": "Water Elf 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 371,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 269,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 95,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 172
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 371,
        "n": "Water Elf 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 372,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 269,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 100,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 172
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 372,
        "n": "Water Elf 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 373,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 272,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 100,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 186
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 373,
        "n": "[Elite] Spider Queen",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 4,
            "y": 2
        },
        "params": {
            "health": 900,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 374,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 342,
                    "chance": 0.05
                },
                {
                    "id": 426,
                    "chance": 0.05
                },
                {
                    "id": 455,
                    "chance": 0.05
                },
                {
                    "id": 424,
                    "chance": 0.05
                },
                {
                    "id": 457,
                    "chance": 0.05
                },
                {
                    "id": 1298,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 387,
                    "chance": 0.05
                },
                {
                    "id": 441,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 497,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 139,
                    "chance": 0.05
                },
                {
                    "id": 138,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 900,
            "busy": false,
            "total_defense": 250,
            "magics": [
                {
                    "id": 8
                }
            ],
            "magic": 90,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 186
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 374,
        "n": "Water Elf 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 375,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 272,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 105,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 186
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 375,
        "n": "Water Elf 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 376,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 272,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 108,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 190
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 376,
        "n": "Water Elf 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 377,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 272,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 112,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 190
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 377,
        "n": "Water Elf 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 2
        },
        "params": {
            "health": 550,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 336,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 550,
            "busy": false,
            "total_defense": 272,
            "magics": [
                {
                    "id": 7
                }
            ],
            "magic": 115,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 190
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 378,
        "n": "Wisp 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 379,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 250,
            "total_strength": 50,
            "total_accuracy": 320
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 379,
        "n": "Wisp 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 380,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 260,
            "total_strength": 50,
            "total_accuracy": 330
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 380,
        "n": "Wisp 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 381,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 275,
            "total_strength": 50,
            "total_accuracy": 350
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 381,
        "n": "Wisp 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 382,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 275,
            "total_strength": 50,
            "total_accuracy": 360
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 382,
        "n": "[Elite] Poseidon",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 2
        },
        "params": {
            "health": 1100,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 35,
            "no_dungeon": true,
            "next_cathedral_npc_id": 383,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 154,
                    "chance": 0.05
                },
                {
                    "id": 155,
                    "chance": 0.05
                },
                {
                    "id": 302,
                    "chance": 0.05
                },
                {
                    "id": 143,
                    "chance": 0.05
                },
                {
                    "id": 144,
                    "chance": 0.05
                },
                {
                    "id": 303,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.05
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1100,
            "busy": false,
            "total_defense": 302,
            "magics": [
                {
                    "id": 15
                }
            ],
            "magic": 85,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 190
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 383,
        "n": "Wisp 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 384,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 285,
            "total_strength": 50,
            "total_accuracy": 362
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 384,
        "n": "Wisp 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 385,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 285,
            "total_strength": 50,
            "total_accuracy": 364
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 385,
        "n": "Wisp 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 386,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 285,
            "total_strength": 40,
            "total_accuracy": 367
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 386,
        "n": "Wisp 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 1
        },
        "params": {
            "health": 670,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 337,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 670,
            "busy": false,
            "total_defense": 289,
            "total_strength": 40,
            "total_accuracy": 369
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 387,
        "n": "Swamp Monkey 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 388,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 50,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 388,
        "n": "Swamp Monkey 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 389,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 54,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 389,
        "n": "Swamp Monkey 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 390,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 58,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 390,
        "n": "Swamp Monkey 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 391,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 62,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 391,
        "n": "[Elite] Headless Knight",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 2
        },
        "params": {
            "health": 1300,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 392,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 149,
                    "chance": 0.05
                },
                {
                    "id": 154,
                    "chance": 0.05
                },
                {
                    "id": 155,
                    "chance": 0.05
                },
                {
                    "id": 302,
                    "chance": 0.05
                },
                {
                    "id": 143,
                    "chance": 0.05
                },
                {
                    "id": 144,
                    "chance": 0.05
                },
                {
                    "id": 303,
                    "chance": 0.05
                },
                {
                    "id": 174,
                    "chance": 0.1
                },
                {
                    "id": 178,
                    "chance": 0.1
                },
                {
                    "id": 1305,
                    "chance": 0.1
                },
                {
                    "id": 1127,
                    "chance": 0.1
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1286,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 764,
                    "chance": 0.05
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 498,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1300,
            "busy": false,
            "total_defense": 308,
            "total_strength": 35,
            "total_accuracy": 370
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 392,
        "n": "Swamp Monkey 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 393,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 66,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 393,
        "n": "Swamp Monkey 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 394,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 70,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 394,
        "n": "Swamp Monkey 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 395,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 74,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 395,
        "n": "Swamp Monkey 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 3,
            "y": 1
        },
        "params": {
            "health": 630,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 338,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 630,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 14
                }
            ],
            "magic": 78,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 396,
        "n": "Basilisk 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 397,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 309,
            "total_strength": 40,
            "total_accuracy": 389
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 397,
        "n": "Basilisk 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 398,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 309,
            "total_strength": 40,
            "total_accuracy": 394
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 398,
        "n": "Basilisk 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 399,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 315,
            "total_strength": 40,
            "total_accuracy": 394
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 399,
        "n": "Basilisk 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 400,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 315,
            "total_strength": 40,
            "total_accuracy": 399
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 400,
        "n": "[Elite] Wood Elf",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 401,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 363,
                    "chance": 0.05
                },
                {
                    "id": 932,
                    "chance": 0.05
                },
                {
                    "id": 936,
                    "chance": 0.05
                },
                {
                    "id": 1271,
                    "chance": 0.05
                },
                {
                    "id": 200,
                    "chance": 0.05
                },
                {
                    "id": 198,
                    "chance": 0.05
                },
                {
                    "id": 450,
                    "chance": 0.05
                },
                {
                    "id": 456,
                    "chance": 0.05
                },
                {
                    "id": 482,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1306,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.05
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 1066,
                    "chance": 0.05
                },
                {
                    "id": 962,
                    "chance": 0.05
                },
                {
                    "id": 969,
                    "chance": 0.05
                },
                {
                    "id": 977,
                    "chance": 0.05
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 1080,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 325,
            "total_strength": 40,
            "total_accuracy": 405
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 401,
        "n": "Basilisk 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 402,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 320,
            "total_strength": 40,
            "total_accuracy": 404
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 402,
        "n": "Basilisk 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 403,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 320,
            "total_strength": 40,
            "total_accuracy": 409
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 403,
        "n": "Basilisk 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 404,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 328,
            "total_strength": 40,
            "total_accuracy": 409
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 404,
        "n": "Basilisk 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 2
        },
        "params": {
            "health": 790,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 339,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 790,
            "busy": false,
            "total_defense": 335,
            "total_strength": 40,
            "total_accuracy": 409
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 405,
        "n": "Crusader 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 406,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 300,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 78,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 406,
        "n": "Crusader 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 407,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 304,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 80,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 407,
        "n": "Crusader 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 408,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 307,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 83,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 408,
        "n": "Crusader 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 409,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 310,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 87,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 409,
        "n": "[Elite] Ice Golem",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 7,
            "y": 2
        },
        "params": {
            "health": 1300,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 35,
            "no_dungeon": true,
            "next_cathedral_npc_id": 410,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 363,
                    "chance": 0.05
                },
                {
                    "id": 932,
                    "chance": 0.05
                },
                {
                    "id": 936,
                    "chance": 0.05
                },
                {
                    "id": 1271,
                    "chance": 0.05
                },
                {
                    "id": 200,
                    "chance": 0.05
                },
                {
                    "id": 198,
                    "chance": 0.05
                },
                {
                    "id": 450,
                    "chance": 0.05
                },
                {
                    "id": 456,
                    "chance": 0.05
                },
                {
                    "id": 482,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.05
                },
                {
                    "id": 179,
                    "chance": 0.05
                },
                {
                    "id": 1306,
                    "chance": 0.05
                },
                {
                    "id": 1128,
                    "chance": 0.05
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 129,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 558,
                    "chance": 0.1
                },
                {
                    "id": 807,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.05
                },
                {
                    "id": 488,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.05
                },
                {
                    "id": 1066,
                    "chance": 0.05
                },
                {
                    "id": 962,
                    "chance": 0.05
                },
                {
                    "id": 969,
                    "chance": 0.05
                },
                {
                    "id": 977,
                    "chance": 0.05
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 1080,
                    "chance": 0.05
                },
                {
                    "id": 163,
                    "chance": 0.15
                }
            ]
        },
        "temp": {
            "health": 1300,
            "busy": false,
            "total_defense": 275,
            "magics": [
                {
                    "id": 23
                }
            ],
            "magic": 78,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 410,
        "n": "Crusader 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 411,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 310,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 89,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 411,
        "n": "Crusader 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 412,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 316,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 89,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 412,
        "n": "Crusader 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 413,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 316,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 92,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 413,
        "n": "Crusader 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 6,
            "y": 1
        },
        "params": {
            "health": 850,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 25,
            "no_dungeon": true,
            "next_cathedral_npc_id": 340,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 850,
            "busy": false,
            "total_defense": 318,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 94,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 414,
        "n": "Defender 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 415,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 530,
            "total_strength": 40,
            "total_accuracy": 430
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 415,
        "n": "Defender 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 416,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 535,
            "total_strength": 40,
            "total_accuracy": 435
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 416,
        "n": "Defender 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 417,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 540,
            "total_strength": 40,
            "total_accuracy": 440
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 417,
        "n": "Defender 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 418,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 540,
            "total_strength": 40,
            "total_accuracy": 455
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 418,
        "n": "[Elite] Lava Golem",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 0,
            "y": 2
        },
        "params": {
            "health": 1700,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 20,
            "no_dungeon": true,
            "next_cathedral_npc_id": 419,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 483,
                    "chance": 0.05
                },
                {
                    "id": 451,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 462,
                    "chance": 0.05
                },
                {
                    "id": 664,
                    "chance": 0.05
                },
                {
                    "id": 661,
                    "chance": 0.05
                },
                {
                    "id": 379,
                    "chance": 0.08
                },
                {
                    "id": 440,
                    "chance": 0.05
                },
                {
                    "id": 394,
                    "chance": 0.05
                },
                {
                    "id": 430,
                    "chance": 0.05
                },
                {
                    "id": 375,
                    "chance": 0.08
                },
                {
                    "id": 618,
                    "chance": 0.05
                },
                {
                    "id": 666,
                    "chance": 0.05
                },
                {
                    "id": 968,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.08
                },
                {
                    "id": 179,
                    "chance": 0.08
                },
                {
                    "id": 1306,
                    "chance": 0.08
                },
                {
                    "id": 1128,
                    "chance": 0.08
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 364,
                    "chance": 0.05
                },
                {
                    "id": 974,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 1032,
                    "chance": 0.1
                },
                {
                    "id": 392,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.08
                },
                {
                    "id": 812,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.08
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 1080,
                    "chance": 0.08
                },
                {
                    "id": 972,
                    "chance": 0.1
                }
            ]
        },
        "temp": {
            "health": 1700,
            "busy": false,
            "total_defense": 360,
            "magics": [
                {
                    "id": 21
                }
            ],
            "magic": 110,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 419,
        "n": "Defender 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 420,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 550,
            "total_strength": 40,
            "total_accuracy": 455
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 420,
        "n": "Defender 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 421,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 550,
            "total_strength": 40,
            "total_accuracy": 460
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 421,
        "n": "Defender 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 422,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 550,
            "total_strength": 45,
            "total_accuracy": 460
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 422,
        "n": "Defender 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 8,
            "y": 1
        },
        "params": {
            "health": 1000,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 50,
            "no_dungeon": true,
            "next_cathedral_npc_id": 341,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1000,
            "busy": false,
            "total_defense": 550,
            "total_strength": 50,
            "total_accuracy": 460
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 423,
        "n": "Gladiator 1",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 424,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 500,
            "total_strength": 60,
            "total_accuracy": 620
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 424,
        "n": "Gladiator 2",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 425,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 505,
            "total_strength": 62,
            "total_accuracy": 630
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 425,
        "n": "Gladiator 3",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 426,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 510,
            "total_strength": 64,
            "total_accuracy": 636
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 426,
        "n": "Gladiator 4",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 427,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 513,
            "total_strength": 64,
            "total_accuracy": 640
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 427,
        "n": "[Elite] Demon Unicorn",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 9,
            "y": 1
        },
        "params": {
            "health": 1900,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 40,
            "no_dungeon": true,
            "next_cathedral_npc_id": 428,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 483,
                    "chance": 0.05
                },
                {
                    "id": 451,
                    "chance": 0.05
                },
                {
                    "id": 454,
                    "chance": 0.05
                },
                {
                    "id": 462,
                    "chance": 0.05
                },
                {
                    "id": 664,
                    "chance": 0.05
                },
                {
                    "id": 661,
                    "chance": 0.05
                },
                {
                    "id": 379,
                    "chance": 0.08
                },
                {
                    "id": 440,
                    "chance": 0.05
                },
                {
                    "id": 394,
                    "chance": 0.05
                },
                {
                    "id": 430,
                    "chance": 0.05
                },
                {
                    "id": 375,
                    "chance": 0.08
                },
                {
                    "id": 618,
                    "chance": 0.05
                },
                {
                    "id": 666,
                    "chance": 0.05
                },
                {
                    "id": 968,
                    "chance": 0.05
                },
                {
                    "id": 175,
                    "chance": 0.08
                },
                {
                    "id": 179,
                    "chance": 0.08
                },
                {
                    "id": 1306,
                    "chance": 0.08
                },
                {
                    "id": 1128,
                    "chance": 0.08
                },
                {
                    "id": 952,
                    "chance": 0.05
                },
                {
                    "id": 1293,
                    "chance": 0.05
                },
                {
                    "id": 389,
                    "chance": 0.05
                },
                {
                    "id": 364,
                    "chance": 0.05
                },
                {
                    "id": 974,
                    "chance": 0.05
                },
                {
                    "id": 765,
                    "chance": 0.1
                },
                {
                    "id": 1032,
                    "chance": 0.1
                },
                {
                    "id": 392,
                    "chance": 0.05
                },
                {
                    "id": 808,
                    "chance": 0.08
                },
                {
                    "id": 812,
                    "chance": 0.05
                },
                {
                    "id": 500,
                    "chance": 0.08
                },
                {
                    "id": 182,
                    "chance": 0.08
                },
                {
                    "id": 1074,
                    "chance": 0.08
                },
                {
                    "id": 1080,
                    "chance": 0.08
                },
                {
                    "id": 972,
                    "chance": 0.1
                }
            ]
        },
        "temp": {
            "health": 1900,
            "busy": false,
            "total_defense": 360,
            "magics": [
                {
                    "id": 25
                }
            ],
            "magic": 110,
            "cooldown": 0.8,
            "total_strength": 1,
            "total_accuracy": 250
        },
        "locations": {
            "Cathedral": 3
        }
    },
    {
        "id": 428,
        "n": "Gladiator 5",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 429,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 513,
            "total_strength": 60,
            "total_accuracy": 650
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 429,
        "n": "Gladiator 6",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 430,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 513,
            "total_strength": 60,
            "total_accuracy": 660
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 430,
        "n": "Gladiator 7",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 431,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 513,
            "total_strength": 58,
            "total_accuracy": 665
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 431,
        "n": "Gladiator 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 1,
            "y": 2
        },
        "params": {
            "health": 1500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 342,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 1500,
            "busy": false,
            "total_defense": 513,
            "total_strength": 55,
            "total_accuracy": 670
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 432,
        "n": "Dragonbat 8",
        "t": "4",
        "img": {
            "sheet": "52",
            "x": 5,
            "y": 1
        },
        "params": {
            "health": 320,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "no_dungeon": true,
            "next_cathedral_npc_id": 334,
            "respawn_time": 5,
            "drops": []
        },
        "temp": {
            "health": 320,
            "busy": false,
            "total_defense": 195,
            "total_strength": 20,
            "total_accuracy": 229
        },
        "locations": {
            "Cathedral": 4
        }
    },
    {
        "id": 434,
        "n": "Gate",
        "t": "4",
        "img": {
            "sheet": "1",
            "x": 2,
            "y": 10
        },
        "params": {
            "health": 500,
            "radius": 9,
            "move_radius": 10,
            "aggressive": false,
            "speed": 100,
            "magic_block": 75,
            "no_dungeon": true,
            "respawn_time": 5,
            "drops": [
                {
                    "id": 1033,
                    "chance": 1
                }
            ]
        },
        "temp": {
            "health": 500,
            "busy": false,
            "total_defense": 500,
            "magics": [
                {
                    "id": 17
                }
            ],
            "magic": 89,
            "cooldown": 0.8,
            "total_accuracy": 999
        },
        "locations": {
            "Cathedral": 1
        }
    }
]
},{}],335:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , util = require('../util.js')
  , _mobs = require('./MobDB.js')
  , _store = []
  , _lastTerm = ''
  , _=require('lodash')
  , _filters = {
    show:false,
    map:-1,
    orderBy:['n'],
    levelMin: '',
    levelMax: '',
    strMin: '',
    strMax: '',
    accMin: '',
    accMax: '',
    defMin: '',
    defMax: '',
    HPMin: '',
    HPMax: '',

  }
;
var _search = function(term) {
  var re = new RegExp(term.toLowerCase(), 'i');
  _store = [];

  _mobs.map(function(item, idx){
    if (
      item && item.n && item.n.toLowerCase().match(re)
      && (_filters.map==-1 || item.locations[_filters.map])
      && (_filters.levelMin=='' || parseInt(_filters.levelMin) <= parseInt(util.calcLevel(item)))
      && (_filters.levelMax=='' || parseInt(_filters.levelMax) >= parseInt(util.calcLevel(item)))
      && (_filters.strMin=='' || parseInt(_filters.strMin) <= parseInt(item.temp.total_strength))
      && (_filters.strMax=='' || parseInt(_filters.strMax) >= parseInt(item.temp.total_strength))
      && (_filters.accMin=='' || parseInt(_filters.accMin) <= parseInt(item.temp.total_accuracy))
      && (_filters.accMax=='' || parseInt(_filters.accMax) >= parseInt(item.temp.total_accuracy))
      && (_filters.defMin=='' || parseInt(_filters.defMin) <= parseInt(item.temp.total_defense))
      && (_filters.defMax=='' || parseInt(_filters.defMax) >= parseInt(item.temp.total_defense))
      && (_filters.HPMin=='' || parseInt(_filters.HPMin) <= parseInt(item.params.health))
      && (_filters.HPMax=='' || parseInt(_filters.HPMax) >= parseInt(item.params.health))
    ) {
      _store.push(item);
    }
  });
  MobStore.emitChange()
};

var MobStore = assign({}, EventEmitter.prototype, {
  getResults: function() {
    return _store;
  },
  getFilters: function() {
    return _filters
  },
  get: function(id) {
    return _.findWhere(_mobs, {id:parseInt(id)});
  },
  init: function() {
    _search(_lastTerm);
  },

  findByItem: function(itemId) {
    var mobs = [];
    var id = parseInt(itemId);
    _mobs.map(function(mob, idx){
      var found = false
        , i = 0
        , maxI = mob.params.drops.length
        , chance = 0;

      while (!found && i<maxI) {
        if (mob.params.drops[i].id == id) {
          found = true;
          chance = mob.params.drops[i].chance;
        }
        i++;
      }

      if (found) {
        mobs.push({id:mob.id,n:mob.n,chance:chance,img:mob.img,locations:mob.locations});
      }

    });
    return mobs;
  },

  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },
  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },


  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;

    switch(action.actionType) {
      case AppConstants.ActionTypes.SEARCH:
        q = action.q.trim();
        _lastTerm = q;
        _search(q);
      break;
      case AppConstants.ActionTypes.TOGGLE_MOB_FILTERS:
        _filters.show = !_filters.show;
        MobStore.emitChange();
      break;
      case AppConstants.ActionTypes.SET_MOB_MAP:
        _filters.map = action.map.trim() || -1;
        _search(_lastTerm);
      break;
      case AppConstants.ActionTypes.SET_MOB_FILTERS:
        Object.keys(action.filters).map(function(k){
          if (k=='map') {
            _filters.map = action.filters.map || -1
          } else {
            _filters[k] = action.filters[k];  
          }
          
        })
        _search(_lastTerm);
      break;
    }


    return true; // No errors. Needed by promise in Dispatcher.
  })
});

module.exports = MobStore;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"../util.js":341,"./MobDB.js":334,"events":4,"lodash":6,"object-assign":8}],336:[function(require,module,exports){
module.exports = [
    {
        "id": 2,
        "n": "Dorpat Shopkeeper",
        "t": "4",
        "img_hash": "18 0 25 26 72 0 0 0 0 52 1 2",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 3,
                    "count": 50,
                    "spawn": true
                },
                {
                    "id": 491,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 493,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 6,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 5,
                    "count": 0
                },
                {
                    "id": 19,
                    "count": 0
                },
                {
                    "id": 47,
                    "count": 0
                },
                {
                    "id": 20,
                    "count": 0
                },
                {
                    "id": 21,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "25",
            "y": "25"
        }
    },
    {
        "id": 5,
        "n": "Dorpat Fishing Master",
        "t": "4",
        "img_hash": "0 0 43 25 72 2 0 0 80 48 1 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 7,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 124,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 68,
                    "count": 0
                },
                {
                    "id": 8,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 9,
                    "count": 0
                },
                {
                    "id": 10,
                    "count": 8,
                    "spawn": true
                },
                {
                    "id": 11,
                    "count": 0
                },
                {
                    "id": 72,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 73,
                    "count": 0
                },
                {
                    "id": 12,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 13,
                    "count": 0
                },
                {
                    "id": 74,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 75,
                    "count": 0
                },
                {
                    "id": 14,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 15,
                    "count": 0
                },
                {
                    "id": 16,
                    "count": 0
                },
                {
                    "id": 17,
                    "count": 0
                },
                {
                    "id": 70,
                    "count": 0
                },
                {
                    "id": 71,
                    "count": 0
                },
                {
                    "id": 76,
                    "count": 0
                },
                {
                    "id": 77,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "18",
            "y": "18"
        }
    },
    {
        "id": 12,
        "n": "Dorpat Outpost Trader",
        "t": "4",
        "img_hash": "18 0 15 16 72 2 1 33 133 17 6 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 22,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 36,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 286,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 4,
                    "count": 0
                },
                {
                    "id": 29,
                    "count": 0
                },
                {
                    "id": 491,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 493,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 6,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 3,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "85",
            "y": "85"
        }
    },
    {
        "id": 15,
        "n": "Dorpat Blacksmith",
        "t": "4",
        "img_hash": "0 0 17 61 72 0 1 33 0 17 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 36,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 32,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 33,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 34,
                    "count": 0
                },
                {
                    "id": 64,
                    "count": 0
                },
                {
                    "id": 176,
                    "count": 0
                },
                {
                    "id": 1303,
                    "count": 0
                },
                {
                    "id": 1125,
                    "count": 0
                },
                {
                    "id": 0,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 37,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 38,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 27,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 1,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 39,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 40,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 41,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 42,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 43,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 976,
                    "count": 0
                },
                {
                    "id": 473,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 366,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 368,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 801,
                    "count": 5,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "15",
            "y": "15"
        }
    },
    {
        "id": 42,
        "n": "Dorpat Jeweler",
        "t": "4",
        "img_hash": "18 0 69 22 72 0 0 0 0 32 12 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 297,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 582,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 292,
                    "count": 0
                },
                {
                    "id": 293,
                    "count": 0
                },
                {
                    "id": 30,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 185,
                    "count": 0
                },
                {
                    "id": 203,
                    "count": 0
                },
                {
                    "id": 200,
                    "count": 0
                },
                {
                    "id": 201,
                    "count": 0
                },
                {
                    "id": 198,
                    "count": 0
                },
                {
                    "id": 199,
                    "count": 0
                },
                {
                    "id": 196,
                    "count": 0
                },
                {
                    "id": 197,
                    "count": 0
                },
                {
                    "id": 194,
                    "count": 0
                },
                {
                    "id": 195,
                    "count": 0
                },
                {
                    "id": 385,
                    "count": 0
                },
                {
                    "id": 386,
                    "count": 0
                },
                {
                    "id": 387,
                    "count": 0
                },
                {
                    "id": 388,
                    "count": 0
                },
                {
                    "id": 389,
                    "count": 0
                },
                {
                    "id": 390,
                    "count": 0
                },
                {
                    "id": 294,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 295,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 302,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 303,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 48,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 803,
                    "count": 0
                },
                {
                    "id": 804,
                    "count": 0
                },
                {
                    "id": 300,
                    "count": 0
                },
                {
                    "id": 49,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 299,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 813,
                    "count": 0
                },
                {
                    "id": 814,
                    "count": 0
                },
                {
                    "id": 1085,
                    "count": 0
                },
                {
                    "id": 1086,
                    "count": 0
                },
                {
                    "id": 1087,
                    "count": 0
                },
                {
                    "id": 1088,
                    "count": 0
                },
                {
                    "id": 1105,
                    "count": 0
                },
                {
                    "id": 1106,
                    "count": 0
                },
                {
                    "id": 1107,
                    "count": 0
                },
                {
                    "id": 1108,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "21",
            "y": "21"
        }
    },
    {
        "id": 77,
        "n": "Reval Alchemist",
        "t": "4",
        "img_hash": "18 0 65 39 72 2 0 50 162 43 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1016,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 204,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 274,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 220,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 264,
                    "count": 0
                },
                {
                    "id": 215,
                    "count": 0
                },
                {
                    "id": 271,
                    "count": 0
                },
                {
                    "id": 230,
                    "count": 0
                },
                {
                    "id": 228,
                    "count": 0
                },
                {
                    "id": 283,
                    "count": 0
                },
                {
                    "id": 249,
                    "count": 0
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "13",
            "y": "13"
        }
    },
    {
        "id": 78,
        "n": "Whiland Mushroom Fanatic",
        "t": "4",
        "img_hash": "18 0 62 36 72 0 0 0 0 44 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 227,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 235,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 236,
                    "count": 0
                },
                {
                    "id": 237,
                    "count": 0
                },
                {
                    "id": 238,
                    "count": 0
                },
                {
                    "id": 239,
                    "count": 0
                },
                {
                    "id": 240,
                    "count": 0
                },
                {
                    "id": 241,
                    "count": 0
                },
                {
                    "id": 243,
                    "count": 0
                },
                {
                    "id": 245,
                    "count": 0
                },
                {
                    "id": 244,
                    "count": 0
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "27",
            "y": "27"
        }
    },
    {
        "id": 79,
        "n": "Reval Shopkeeper",
        "t": "4",
        "img_hash": "18 0 65 39 72 2 0 0 102 46 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 6,
                    "count": 35,
                    "spawn": true
                },
                {
                    "id": 5,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 21,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 286,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 47,
                    "count": 0
                },
                {
                    "id": 20,
                    "count": 0
                },
                {
                    "id": 187,
                    "count": 0
                },
                {
                    "id": 314,
                    "count": 0
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "17",
            "y": "17"
        }
    },
    {
        "id": 80,
        "n": "Reval Potion Master",
        "t": "4",
        "img_hash": "18 0 63 37 72 0 1 39 0 46 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 304,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 305,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 306,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 307,
                    "count": 0
                },
                {
                    "id": 308,
                    "count": 0
                },
                {
                    "id": 309,
                    "count": 0
                },
                {
                    "id": 310,
                    "count": 0
                },
                {
                    "id": 311,
                    "count": 0
                },
                {
                    "id": 795,
                    "count": 0
                },
                {
                    "id": 312,
                    "count": 0
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "21",
            "y": "21"
        }
    },
    {
        "id": 81,
        "n": "Rakblood Fishing Master",
        "t": "4",
        "img_hash": "18 0 15 28 72 2 0 0 80 39 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 125,
                    "count": 0
                },
                {
                    "id": 946,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1036,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 76,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 77,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 78,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 79,
                    "count": 0
                },
                {
                    "id": 80,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 81,
                    "count": 0
                },
                {
                    "id": 82,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 83,
                    "count": 0
                },
                {
                    "id": 84,
                    "count": 0
                },
                {
                    "id": 85,
                    "count": 0
                },
                {
                    "id": 86,
                    "count": 0
                },
                {
                    "id": 87,
                    "count": 0
                },
                {
                    "id": 88,
                    "count": 0
                },
                {
                    "id": 89,
                    "count": 0
                },
                {
                    "id": 90,
                    "count": 0
                },
                {
                    "id": 91,
                    "count": 0
                },
                {
                    "id": 92,
                    "count": 0
                },
                {
                    "id": 93,
                    "count": 0
                },
                {
                    "id": 94,
                    "count": 0
                },
                {
                    "id": 95,
                    "count": 0
                },
                {
                    "id": 96,
                    "count": 0
                },
                {
                    "id": 97,
                    "count": 0
                },
                {
                    "id": 98,
                    "count": 0
                },
                {
                    "id": 99,
                    "count": 0
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "47",
            "y": "47"
        }
    },
    {
        "id": 82,
        "n": "Dorpat Magician",
        "t": "4",
        "img_hash": "18 0 32 33 72 1 0 49 66 20 12 5",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 348,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 993,
                    "count": 0
                },
                {
                    "id": 992,
                    "count": 0
                },
                {
                    "id": 994,
                    "count": 0
                },
                {
                    "id": 995,
                    "count": 0
                },
                {
                    "id": 996,
                    "count": 0
                },
                {
                    "id": 452,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 448,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 479,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 444,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 434,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 422,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 402,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 403,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 404,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "12",
            "y": "12"
        }
    },
    {
        "id": 83,
        "n": "Reval Magician",
        "t": "4",
        "img_hash": "18 0 63 37 72 1 0 50 165 46 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 349,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 452,
                    "count": 0
                },
                {
                    "id": 448,
                    "count": 0
                },
                {
                    "id": 479,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 434,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 435,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 423,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 405,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 406,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 407,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "13",
            "y": "13"
        }
    },
    {
        "id": 84,
        "n": "Whiland Magician",
        "t": "4",
        "img_hash": "18 0 62 36 72 1 0 50 166 39 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 350,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 453,
                    "count": 0
                },
                {
                    "id": 449,
                    "count": 0
                },
                {
                    "id": 480,
                    "count": 0
                },
                {
                    "id": 424,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 425,
                    "count": 0
                },
                {
                    "id": 428,
                    "count": 0
                },
                {
                    "id": 429,
                    "count": 0
                },
                {
                    "id": 407,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 408,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 409,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "33",
            "y": "33"
        }
    },
    {
        "id": 85,
        "n": "Rakblood Magician",
        "t": "4",
        "img_hash": "18 0 64 38 72 2 0 50 72 17 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 351,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 453,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 449,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 480,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 424,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 425,
                    "count": 0
                },
                {
                    "id": 407,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 408,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 409,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "36",
            "y": "36"
        }
    },
    {
        "id": 86,
        "n": "Narwa Magician",
        "t": "4",
        "img_hash": "18 0 62 36 72 1 0 54 166 51 6 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 352,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 455,
                    "count": 0
                },
                {
                    "id": 457,
                    "count": 0
                },
                {
                    "id": 481,
                    "count": 0
                },
                {
                    "id": 426,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 427,
                    "count": 0
                },
                {
                    "id": 428,
                    "count": 0
                },
                {
                    "id": 429,
                    "count": 0
                },
                {
                    "id": 430,
                    "count": 0
                },
                {
                    "id": 431,
                    "count": 0
                },
                {
                    "id": 436,
                    "count": 0
                },
                {
                    "id": 437,
                    "count": 0
                },
                {
                    "id": 438,
                    "count": 0
                },
                {
                    "id": 439,
                    "count": 0
                },
                {
                    "id": 410,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 411,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 412,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "72",
            "y": "72"
        }
    },
    {
        "id": 92,
        "n": "Hell Keeper",
        "t": "4",
        "img_hash": "18 0 79 16 72 2 1 33 133 51 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 346,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 35,
                    "count": 0
                },
                {
                    "id": 133,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 163,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 173,
                    "count": 0
                },
                {
                    "id": 177,
                    "count": 0
                },
                {
                    "id": 1304,
                    "count": 0
                },
                {
                    "id": 365,
                    "count": 0
                },
                {
                    "id": 366,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 368,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 370,
                    "count": 0
                },
                {
                    "id": 371,
                    "count": 0
                }
            ]
        },
        "map": "Hell",
        "coords": {
            "x": "29",
            "y": "29"
        }
    },
    {
        "id": 117,
        "n": "Makeover Guy",
        "t": "4",
        "img_hash": "4 0 37 24 72 0 0 0 0 24 6 2",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Broceliande Forest",
        "coords": {
            "x": "54",
            "y": "54"
        }
    },
    {
        "id": 118,
        "n": "Dorpat Lumberjack",
        "t": "4",
        "img_hash": "4 0 43 25 72 2 1 7 35 0 1 2",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 29,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 313,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 22,
                    "count": 5,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "33",
            "y": "33"
        }
    },
    {
        "id": 121,
        "n": "Holy Guardian",
        "t": "4",
        "img_hash": "18 0 82 50 72 2 0 0 133 39 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 367,
                    "count": 5,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "44",
            "y": "44"
        }
    },
    {
        "id": 122,
        "n": "Dorpat Weapon Merchant",
        "t": "4",
        "img_hash": "0 0 17 25 72 2 0 0 125 43 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 505,
                    "count": 0
                },
                {
                    "id": 506,
                    "count": 0
                },
                {
                    "id": 509,
                    "count": 0
                },
                {
                    "id": 510,
                    "count": 0
                },
                {
                    "id": 798,
                    "count": 0
                },
                {
                    "id": 800,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "14",
            "y": "14"
        }
    },
    {
        "id": 123,
        "n": "Dorpat Armor Merchant",
        "t": "4",
        "img_hash": "0 0 44 26 72 0 1 39 0 1 6 2",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 555,
                    "count": 0
                },
                {
                    "id": 560,
                    "count": 0
                },
                {
                    "id": 562,
                    "count": 0
                },
                {
                    "id": 571,
                    "count": 0
                },
                {
                    "id": 572,
                    "count": 0
                },
                {
                    "id": 802,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "12",
            "y": "12"
        }
    },
    {
        "id": 139,
        "n": "Cesis Blacksmith",
        "t": "4",
        "img_hash": "18 0 47 57 72 2 1 41 135 39 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 36,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 581,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 186,
                    "count": 0
                },
                {
                    "id": 383,
                    "count": 0
                },
                {
                    "id": 384,
                    "count": 0
                },
                {
                    "id": 174,
                    "count": 0
                },
                {
                    "id": 178,
                    "count": 0
                },
                {
                    "id": 35,
                    "count": 0
                },
                {
                    "id": 340,
                    "count": 0
                },
                {
                    "id": 362,
                    "count": 0
                },
                {
                    "id": 498,
                    "count": 0
                },
                {
                    "id": 476,
                    "count": 0
                },
                {
                    "id": 163,
                    "count": 0
                },
                {
                    "id": 161,
                    "count": 0
                },
                {
                    "id": 165,
                    "count": 0
                },
                {
                    "id": 138,
                    "count": 0
                },
                {
                    "id": 393,
                    "count": 0
                },
                {
                    "id": 394,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "59",
            "y": "59"
        }
    },
    {
        "id": 140,
        "n": "Cesis Fishing Master",
        "t": "4",
        "img_hash": "18 0 47 27 72 2 0 0 80 42 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 125,
                    "count": 0
                },
                {
                    "id": 124,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 127,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 100,
                    "count": 0
                },
                {
                    "id": 101,
                    "count": 0
                },
                {
                    "id": 102,
                    "count": 0
                },
                {
                    "id": 103,
                    "count": 0
                },
                {
                    "id": 104,
                    "count": 0
                },
                {
                    "id": 105,
                    "count": 0
                },
                {
                    "id": 106,
                    "count": 0
                },
                {
                    "id": 107,
                    "count": 0
                },
                {
                    "id": 108,
                    "count": 0
                },
                {
                    "id": 109,
                    "count": 0
                },
                {
                    "id": 110,
                    "count": 0
                },
                {
                    "id": 111,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "54",
            "y": "54"
        }
    },
    {
        "id": 141,
        "n": "Cesis Magician",
        "t": "4",
        "img_hash": "18 0 88 52 72 2 0 54 171 44 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 598,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 455,
                    "count": 0
                },
                {
                    "id": 457,
                    "count": 0
                },
                {
                    "id": 481,
                    "count": 0
                },
                {
                    "id": 426,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 427,
                    "count": 0
                },
                {
                    "id": 438,
                    "count": 0
                },
                {
                    "id": 429,
                    "count": 0
                },
                {
                    "id": 413,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 414,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 412,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "61",
            "y": "61"
        }
    },
    {
        "id": 142,
        "n": "Walco Magician",
        "t": "4",
        "img_hash": "18 0 60 34 72 1 0 50 61 44 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 599,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 453,
                    "count": 0
                },
                {
                    "id": 449,
                    "count": 0
                },
                {
                    "id": 480,
                    "count": 0
                },
                {
                    "id": 424,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 425,
                    "count": 0
                },
                {
                    "id": 407,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 408,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 409,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Walco",
        "coords": {
            "x": "24",
            "y": "24"
        }
    },
    {
        "id": 143,
        "n": "Tutorial Instructor",
        "t": "4",
        "img_hash": "18 0 81 60 72 0 1 36 0 39 12 5",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "31",
            "y": "31"
        }
    },
    {
        "id": 144,
        "n": "Cooking Instructor",
        "t": "4",
        "img_hash": "14 0 44 40 72 0 0 0 0 0 12 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "40",
            "y": "40"
        }
    },
    {
        "id": 145,
        "n": "Fishing Instructor",
        "t": "4",
        "img_hash": "13 0 43 25 72 1 0 0 81 0 1 2",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "38",
            "y": "38"
        }
    },
    {
        "id": 146,
        "n": "Combat Instructor",
        "t": "4",
        "img_hash": "18 0 92 60 72 2 1 39 148 51 12 5",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "34",
            "y": "34"
        }
    },
    {
        "id": 147,
        "n": "Jewelry Instructor",
        "t": "4",
        "img_hash": "18 0 79 60 72 0 0 0 0 15 12 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "49",
            "y": "49"
        }
    },
    {
        "id": 148,
        "n": "Mining Instructor",
        "t": "4",
        "img_hash": "18 0 87 57 72 2 0 0 46 43 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "43",
            "y": "43"
        }
    },
    {
        "id": 149,
        "n": "Forging Instructor",
        "t": "4",
        "img_hash": "18 0 81 60 72 2 1 36 173 32 12 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "58",
            "y": "58"
        }
    },
    {
        "id": 150,
        "n": "Woodcutting Instructor",
        "t": "4",
        "img_hash": "18 0 81 60 72 2 0 0 47 32 1 2",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "70",
            "y": "70"
        }
    },
    {
        "id": 151,
        "n": "Chest Instructor",
        "t": "4",
        "img_hash": "18 0 25 25 72 0 0 0 0 0 12 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "79",
            "y": "79"
        }
    },
    {
        "id": 178,
        "n": "Dorpat Pet Trader",
        "t": "4",
        "img_hash": "13 0 63 37 72 0 0 0 0 44 12 5",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 670,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 674,
                    "count": 0
                },
                {
                    "id": 887,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1257,
                    "count": 0
                },
                {
                    "id": 676,
                    "count": 0
                },
                {
                    "id": 675,
                    "count": 10,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "26",
            "y": "26"
        }
    },
    {
        "id": 182,
        "n": "Dorpat Farmer",
        "t": "4",
        "img_hash": "18 0 25 50 72 2 1 39 160 39 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 779,
                    "count": 3,
                    "spawn": true
                },
                {
                    "id": 767,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1016,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 754,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 756,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 759,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 1034,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 755,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 777,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 761,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 763,
                    "count": 30,
                    "spawn": true
                },
                {
                    "id": 757,
                    "count": 0
                },
                {
                    "id": 758,
                    "count": 0
                },
                {
                    "id": 760,
                    "count": 0
                },
                {
                    "id": 762,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "32",
            "y": "32"
        }
    },
    {
        "id": 183,
        "n": "Santa",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 751,
                    "count": 10,
                    "spawn": true
                }
            ]
        }
    },
    {
        "id": 192,
        "n": "Dorpat Furniture Master",
        "t": "4",
        "img_hash": "18 0 43 25 72 0 0 0 0 15 1 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 730,
                    "count": 0
                },
                {
                    "id": 732,
                    "count": 0
                },
                {
                    "id": 733,
                    "count": 0
                },
                {
                    "id": 745,
                    "count": 0
                },
                {
                    "id": 734,
                    "count": 0
                },
                {
                    "id": 746,
                    "count": 0
                },
                {
                    "id": 735,
                    "count": 0
                },
                {
                    "id": 747,
                    "count": 0
                },
                {
                    "id": 736,
                    "count": 0
                },
                {
                    "id": 748,
                    "count": 0
                },
                {
                    "id": 737,
                    "count": 0
                },
                {
                    "id": 749,
                    "count": 0
                },
                {
                    "id": 738,
                    "count": 0
                },
                {
                    "id": 750,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "34",
            "y": "34"
        }
    },
    {
        "id": 203,
        "n": "Reval Jeweler",
        "t": "4",
        "img_hash": "18 0 90 54 72 2 0 0 108 39 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 297,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 582,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 292,
                    "count": 0
                },
                {
                    "id": 293,
                    "count": 0
                },
                {
                    "id": 30,
                    "count": 25,
                    "spawn": true
                },
                {
                    "id": 202,
                    "count": 0
                },
                {
                    "id": 184,
                    "count": 0
                },
                {
                    "id": 1300,
                    "count": 0
                },
                {
                    "id": 200,
                    "count": 0
                },
                {
                    "id": 201,
                    "count": 0
                },
                {
                    "id": 198,
                    "count": 0
                },
                {
                    "id": 199,
                    "count": 0
                },
                {
                    "id": 196,
                    "count": 0
                },
                {
                    "id": 197,
                    "count": 0
                },
                {
                    "id": 194,
                    "count": 0
                },
                {
                    "id": 195,
                    "count": 0
                },
                {
                    "id": 385,
                    "count": 0
                },
                {
                    "id": 386,
                    "count": 0
                },
                {
                    "id": 387,
                    "count": 0
                },
                {
                    "id": 388,
                    "count": 0
                },
                {
                    "id": 389,
                    "count": 0
                },
                {
                    "id": 390,
                    "count": 0
                },
                {
                    "id": 24,
                    "count": 0
                },
                {
                    "id": 28,
                    "count": 0
                },
                {
                    "id": 805,
                    "count": 0
                },
                {
                    "id": 298,
                    "count": 0
                },
                {
                    "id": 131,
                    "count": 0
                },
                {
                    "id": 806,
                    "count": 0
                },
                {
                    "id": 815,
                    "count": 0
                },
                {
                    "id": 816,
                    "count": 0
                },
                {
                    "id": 130,
                    "count": 0
                },
                {
                    "id": 301,
                    "count": 0
                },
                {
                    "id": 817,
                    "count": 0
                },
                {
                    "id": 1089,
                    "count": 0
                },
                {
                    "id": 1090,
                    "count": 0
                },
                {
                    "id": 1091,
                    "count": 0
                },
                {
                    "id": 1092,
                    "count": 0
                },
                {
                    "id": 1109,
                    "count": 0
                },
                {
                    "id": 1110,
                    "count": 0
                },
                {
                    "id": 1111,
                    "count": 0
                },
                {
                    "id": 1112,
                    "count": 0
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "18",
            "y": "18"
        }
    },
    {
        "id": 205,
        "n": "Reval Blacksmith",
        "t": "4",
        "img_hash": "18 0 87 57 72 0 0 0 137 51 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 36,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 31,
                    "count": 25,
                    "spawn": true
                },
                {
                    "id": 186,
                    "count": 0
                },
                {
                    "id": 50,
                    "count": 0
                },
                {
                    "id": 173,
                    "count": 0
                },
                {
                    "id": 177,
                    "count": 0
                },
                {
                    "id": 25,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 2,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 52,
                    "count": 0
                },
                {
                    "id": 58,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 53,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 51,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 61,
                    "count": 0
                },
                {
                    "id": 65,
                    "count": 0
                },
                {
                    "id": 66,
                    "count": 0
                },
                {
                    "id": 474,
                    "count": 0
                },
                {
                    "id": 44,
                    "count": 0
                },
                {
                    "id": 18,
                    "count": 0
                },
                {
                    "id": 54,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 55,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 56,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 57,
                    "count": 0
                },
                {
                    "id": 59,
                    "count": 0
                },
                {
                    "id": 60,
                    "count": 0
                },
                {
                    "id": 62,
                    "count": 0
                },
                {
                    "id": 67,
                    "count": 0
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "14",
            "y": "14"
        }
    },
    {
        "id": 206,
        "n": "Rakblood Alchemist",
        "t": "4",
        "img_hash": "18 0 64 38 72 1 0 0 166 0 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1016,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 205,
                    "count": 0
                },
                {
                    "id": 207,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 212,
                    "count": 0
                },
                {
                    "id": 259,
                    "count": 0
                },
                {
                    "id": 276,
                    "count": 0
                },
                {
                    "id": 369,
                    "count": 0
                },
                {
                    "id": 247,
                    "count": 0
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "34",
            "y": "34"
        }
    },
    {
        "id": 207,
        "n": "Rakblood Jeweler",
        "t": "4",
        "img_hash": "18 0 46 28 72 0 1 33 0 17 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 297,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 582,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 30,
                    "count": 30,
                    "spawn": true
                },
                {
                    "id": 484,
                    "count": 0
                },
                {
                    "id": 485,
                    "count": 0
                },
                {
                    "id": 200,
                    "count": 0
                },
                {
                    "id": 201,
                    "count": 0
                },
                {
                    "id": 198,
                    "count": 0
                },
                {
                    "id": 199,
                    "count": 0
                },
                {
                    "id": 196,
                    "count": 0
                },
                {
                    "id": 197,
                    "count": 0
                },
                {
                    "id": 194,
                    "count": 0
                },
                {
                    "id": 195,
                    "count": 0
                },
                {
                    "id": 385,
                    "count": 0
                },
                {
                    "id": 386,
                    "count": 0
                },
                {
                    "id": 387,
                    "count": 0
                },
                {
                    "id": 388,
                    "count": 0
                },
                {
                    "id": 389,
                    "count": 0
                },
                {
                    "id": 390,
                    "count": 0
                },
                {
                    "id": 487,
                    "count": 0
                },
                {
                    "id": 488,
                    "count": 0
                },
                {
                    "id": 807,
                    "count": 0
                },
                {
                    "id": 808,
                    "count": 0
                },
                {
                    "id": 809,
                    "count": 0
                },
                {
                    "id": 810,
                    "count": 0
                },
                {
                    "id": 486,
                    "count": 0
                },
                {
                    "id": 818,
                    "count": 0
                },
                {
                    "id": 819,
                    "count": 0
                },
                {
                    "id": 820,
                    "count": 0
                },
                {
                    "id": 821,
                    "count": 0
                },
                {
                    "id": 489,
                    "count": 0
                },
                {
                    "id": 1093,
                    "count": 0
                },
                {
                    "id": 1094,
                    "count": 0
                },
                {
                    "id": 1095,
                    "count": 0
                },
                {
                    "id": 1096,
                    "count": 0
                },
                {
                    "id": 1097,
                    "count": 0
                },
                {
                    "id": 1113,
                    "count": 0
                },
                {
                    "id": 1114,
                    "count": 0
                },
                {
                    "id": 1115,
                    "count": 0
                },
                {
                    "id": 1116,
                    "count": 0
                },
                {
                    "id": 1117,
                    "count": 0
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "36",
            "y": "36"
        }
    },
    {
        "id": 208,
        "n": "Rakblood Potion Master",
        "t": "4",
        "img_hash": "18 0 60 34 72 0 0 0 0 54 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 315,
                    "count": 0
                },
                {
                    "id": 316,
                    "count": 0
                },
                {
                    "id": 317,
                    "count": 0
                },
                {
                    "id": 318,
                    "count": 0
                },
                {
                    "id": 319,
                    "count": 0
                },
                {
                    "id": 320,
                    "count": 0
                },
                {
                    "id": 321,
                    "count": 0
                },
                {
                    "id": 322,
                    "count": 0
                },
                {
                    "id": 401,
                    "count": 0
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "31",
            "y": "31"
        }
    },
    {
        "id": 209,
        "n": "Rakblood Shopkeeper",
        "t": "4",
        "img_hash": "18 0 15 28 72 0 0 0 0 39 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 6,
                    "count": 35,
                    "spawn": true
                },
                {
                    "id": 5,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 21,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 286,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 612,
                    "count": 0
                },
                {
                    "id": 46,
                    "count": 0
                },
                {
                    "id": 32,
                    "count": 0
                },
                {
                    "id": 33,
                    "count": 0
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "38",
            "y": "38"
        }
    },
    {
        "id": 210,
        "n": "Rakblood Blacksmith",
        "t": "4",
        "img_hash": "18 0 92 28 72 0 0 0 113 51 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 36,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 31,
                    "count": 30,
                    "spawn": true
                },
                {
                    "id": 186,
                    "count": 0
                },
                {
                    "id": 291,
                    "count": 0
                },
                {
                    "id": 173,
                    "count": 0
                },
                {
                    "id": 177,
                    "count": 0
                },
                {
                    "id": 188,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 26,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 191,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 339,
                    "count": 0
                },
                {
                    "id": 497,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 166,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 189,
                    "count": 0
                },
                {
                    "id": 193,
                    "count": 0
                },
                {
                    "id": 190,
                    "count": 0
                },
                {
                    "id": 475,
                    "count": 0
                },
                {
                    "id": 139,
                    "count": 0
                },
                {
                    "id": 142,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 143,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 141,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 140,
                    "count": 0
                },
                {
                    "id": 144,
                    "count": 0
                },
                {
                    "id": 145,
                    "count": 0
                },
                {
                    "id": 146,
                    "count": 0
                },
                {
                    "id": 147,
                    "count": 0
                },
                {
                    "id": 148,
                    "count": 0
                },
                {
                    "id": 149,
                    "count": 0
                }
            ]
        },
        "map": "Rakblood",
        "coords": {
            "x": "30",
            "y": "30"
        }
    },
    {
        "id": 211,
        "n": "Cesis Alchemist",
        "t": "4",
        "img_hash": "18 0 64 38 72 1 0 0 61 0 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1016,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 260,
                    "count": 0
                },
                {
                    "id": 206,
                    "count": 0
                },
                {
                    "id": 233,
                    "count": 0
                },
                {
                    "id": 261,
                    "count": 0
                },
                {
                    "id": 269,
                    "count": 0
                },
                {
                    "id": 275,
                    "count": 0
                },
                {
                    "id": 246,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "54",
            "y": "54"
        }
    },
    {
        "id": 212,
        "n": "Cesis Weapon Merchant",
        "t": "4",
        "img_hash": "18 0 81 52 72 0 0 0 122 42 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 511,
                    "count": 0
                },
                {
                    "id": 512,
                    "count": 0
                },
                {
                    "id": 513,
                    "count": 0
                },
                {
                    "id": 508,
                    "count": 0
                },
                {
                    "id": 514,
                    "count": 0
                },
                {
                    "id": 515,
                    "count": 0
                },
                {
                    "id": 516,
                    "count": 0
                },
                {
                    "id": 517,
                    "count": 0
                },
                {
                    "id": 518,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "63",
            "y": "63"
        }
    },
    {
        "id": 213,
        "n": "Cesis Armor Merchant",
        "t": "4",
        "img_hash": "18 0 92 50 72 0 1 41 0 39 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 556,
                    "count": 0
                },
                {
                    "id": 561,
                    "count": 0
                },
                {
                    "id": 563,
                    "count": 0
                },
                {
                    "id": 573,
                    "count": 0
                },
                {
                    "id": 574,
                    "count": 0
                },
                {
                    "id": 559,
                    "count": 0
                },
                {
                    "id": 162,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "63",
            "y": "63"
        }
    },
    {
        "id": 214,
        "n": "Cesis Lumberjack",
        "t": "4",
        "img_hash": "18 0 87 38 72 2 0 0 35 17 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 296,
                    "count": 0
                },
                {
                    "id": 594,
                    "count": 0
                },
                {
                    "id": 596,
                    "count": 0
                },
                {
                    "id": 597,
                    "count": 0
                },
                {
                    "id": 22,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 152,
                    "count": 5,
                    "spawn": true
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "56",
            "y": "56"
        }
    },
    {
        "id": 215,
        "n": "Cesis Pet Trader",
        "t": "4",
        "img_hash": "18 0 87 52 72 0 0 0 0 42 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 669,
                    "count": 0
                },
                {
                    "id": 671,
                    "count": 0
                },
                {
                    "id": 672,
                    "count": 0
                },
                {
                    "id": 673,
                    "count": 0
                },
                {
                    "id": 698,
                    "count": 0
                },
                {
                    "id": 699,
                    "count": 0
                },
                {
                    "id": 702,
                    "count": 0
                },
                {
                    "id": 703,
                    "count": 0
                },
                {
                    "id": 704,
                    "count": 0
                },
                {
                    "id": 705,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "64",
            "y": "64"
        }
    },
    {
        "id": 216,
        "n": "Cesis Shopkeeper",
        "t": "4",
        "img_hash": "18 0 90 54 72 0 0 0 0 44 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 6,
                    "count": 35,
                    "spawn": true
                },
                {
                    "id": 5,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 21,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 612,
                    "count": 0
                },
                {
                    "id": 46,
                    "count": 0
                },
                {
                    "id": 493,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 491,
                    "count": 20,
                    "spawn": true
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "57",
            "y": "57"
        }
    },
    {
        "id": 217,
        "n": "Cesis Furniture Master",
        "t": "4",
        "img_hash": "18 0 60 34 72 2 0 0 47 44 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 730,
                    "count": 0
                },
                {
                    "id": 731,
                    "count": 0
                },
                {
                    "id": 732,
                    "count": 0
                },
                {
                    "id": 825,
                    "count": 0
                },
                {
                    "id": 830,
                    "count": 0
                },
                {
                    "id": 733,
                    "count": 0
                },
                {
                    "id": 739,
                    "count": 0
                },
                {
                    "id": 745,
                    "count": 0
                },
                {
                    "id": 768,
                    "count": 0
                },
                {
                    "id": 769,
                    "count": 0
                },
                {
                    "id": 734,
                    "count": 0
                },
                {
                    "id": 740,
                    "count": 0
                },
                {
                    "id": 746,
                    "count": 0
                },
                {
                    "id": 824,
                    "count": 0
                },
                {
                    "id": 829,
                    "count": 0
                },
                {
                    "id": 735,
                    "count": 0
                },
                {
                    "id": 741,
                    "count": 0
                },
                {
                    "id": 747,
                    "count": 0
                },
                {
                    "id": 826,
                    "count": 0
                },
                {
                    "id": 831,
                    "count": 0
                },
                {
                    "id": 736,
                    "count": 0
                },
                {
                    "id": 742,
                    "count": 0
                },
                {
                    "id": 748,
                    "count": 0
                },
                {
                    "id": 827,
                    "count": 0
                },
                {
                    "id": 832,
                    "count": 0
                },
                {
                    "id": 737,
                    "count": 0
                },
                {
                    "id": 743,
                    "count": 0
                },
                {
                    "id": 749,
                    "count": 0
                },
                {
                    "id": 828,
                    "count": 0
                },
                {
                    "id": 833,
                    "count": 0
                },
                {
                    "id": 738,
                    "count": 0
                },
                {
                    "id": 744,
                    "count": 0
                },
                {
                    "id": 750,
                    "count": 0
                },
                {
                    "id": 853,
                    "count": 0
                },
                {
                    "id": 834,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "58",
            "y": "58"
        }
    },
    {
        "id": 218,
        "n": "Walco Alchemist",
        "t": "4",
        "img_hash": "18 0 64 38 72 1 1 33 61 42 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1016,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 285,
                    "count": 0
                },
                {
                    "id": 221,
                    "count": 0
                },
                {
                    "id": 284,
                    "count": 0
                },
                {
                    "id": 222,
                    "count": 0
                },
                {
                    "id": 267,
                    "count": 0
                },
                {
                    "id": 229,
                    "count": 0
                },
                {
                    "id": 248,
                    "count": 0
                }
            ]
        },
        "map": "Walco",
        "coords": {
            "x": "26",
            "y": "26"
        }
    },
    {
        "id": 219,
        "n": "Walco Armor Merchant",
        "t": "4",
        "img_hash": "18 0 46 30 72 0 0 0 0 17 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 556,
                    "count": 0
                },
                {
                    "id": 192,
                    "count": 0
                },
                {
                    "id": 563,
                    "count": 0
                },
                {
                    "id": 575,
                    "count": 0
                },
                {
                    "id": 165,
                    "count": 0
                },
                {
                    "id": 168,
                    "count": 0
                }
            ]
        },
        "map": "Walco",
        "coords": {
            "x": "19",
            "y": "19"
        }
    },
    {
        "id": 220,
        "n": "Walco Weapon Merchant",
        "t": "4",
        "img_hash": "18 0 90 50 72 2 1 37 125 39 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 522,
                    "count": 0
                },
                {
                    "id": 523,
                    "count": 0
                },
                {
                    "id": 524,
                    "count": 0
                },
                {
                    "id": 525,
                    "count": 0
                },
                {
                    "id": 526,
                    "count": 0
                },
                {
                    "id": 527,
                    "count": 0
                },
                {
                    "id": 528,
                    "count": 0
                },
                {
                    "id": 529,
                    "count": 0
                },
                {
                    "id": 530,
                    "count": 0
                }
            ]
        },
        "map": "Walco",
        "coords": {
            "x": "19",
            "y": "19"
        }
    },
    {
        "id": 221,
        "n": "Walco Lumberjack",
        "t": "4",
        "img_hash": "18 0 92 52 72 2 1 36 47 39 6 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 595,
                    "count": 0
                },
                {
                    "id": 152,
                    "count": 5,
                    "spawn": true
                }
            ]
        },
        "map": "Walco",
        "coords": {
            "x": "21",
            "y": "21"
        }
    },
    {
        "id": 222,
        "n": "Whiland Weapon Merchant",
        "t": "4",
        "img_hash": "18 0 87 16 72 2 1 39 111 17 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 535,
                    "count": 0
                },
                {
                    "id": 536,
                    "count": 0
                },
                {
                    "id": 538,
                    "count": 0
                },
                {
                    "id": 520,
                    "count": 0
                },
                {
                    "id": 519,
                    "count": 0
                },
                {
                    "id": 521,
                    "count": 0
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "26",
            "y": "26"
        }
    },
    {
        "id": 223,
        "n": "Whiland Armor Merchant",
        "t": "4",
        "img_hash": "18 0 81 52 72 0 1 37 0 51 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 132,
                    "count": 0
                },
                {
                    "id": 341,
                    "count": 0
                },
                {
                    "id": 565,
                    "count": 0
                },
                {
                    "id": 589,
                    "count": 0
                },
                {
                    "id": 590,
                    "count": 0
                },
                {
                    "id": 591,
                    "count": 0
                },
                {
                    "id": 592,
                    "count": 0
                },
                {
                    "id": 656,
                    "count": 0
                },
                {
                    "id": 170,
                    "count": 0
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "26",
            "y": "26"
        }
    },
    {
        "id": 224,
        "n": "Whiland Shopkeeper",
        "t": "4",
        "img_hash": "18 0 81 52 72 0 1 33 0 39 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 6,
                    "count": 35,
                    "spawn": true
                },
                {
                    "id": 5,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 21,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 47,
                    "count": 0
                },
                {
                    "id": 20,
                    "count": 0
                },
                {
                    "id": 260,
                    "count": 0
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "28",
            "y": "28"
        }
    },
    {
        "id": 225,
        "n": "Clouds Armor Merchant",
        "t": "4",
        "img_hash": "18 0 82 50 72 0 0 0 0 39 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 172,
                    "count": 0
                },
                {
                    "id": 180,
                    "count": 0
                },
                {
                    "id": 181,
                    "count": 0
                },
                {
                    "id": 182,
                    "count": 0
                },
                {
                    "id": 343,
                    "count": 0
                },
                {
                    "id": 472,
                    "count": 0
                }
            ]
        },
        "map": "Clouds",
        "coords": {
            "x": "59",
            "y": "59"
        }
    },
    {
        "id": 226,
        "n": "Clouds Pet Trader",
        "t": "4",
        "img_hash": "18 0 15 16 72 0 0 0 188 17 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 677,
                    "count": 0
                },
                {
                    "id": 678,
                    "count": 0
                },
                {
                    "id": 679,
                    "count": 0
                },
                {
                    "id": 680,
                    "count": 0
                },
                {
                    "id": 681,
                    "count": 0
                },
                {
                    "id": 886,
                    "count": 0
                },
                {
                    "id": 695,
                    "count": 0
                },
                {
                    "id": 696,
                    "count": 0
                },
                {
                    "id": 697,
                    "count": 0
                }
            ]
        },
        "map": "Clouds",
        "coords": {
            "x": "64",
            "y": "64"
        }
    },
    {
        "id": 227,
        "n": "Heaven Weapon Merchant",
        "t": "4",
        "img_hash": "18 0 79 50 72 2 1 36 133 39 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 532,
                    "count": 0
                },
                {
                    "id": 533,
                    "count": 0
                },
                {
                    "id": 534,
                    "count": 0
                },
                {
                    "id": 517,
                    "count": 0
                },
                {
                    "id": 619,
                    "count": 0
                },
                {
                    "id": 621,
                    "count": 0
                }
            ]
        },
        "map": "Heaven",
        "coords": {
            "x": "57",
            "y": "57"
        }
    },
    {
        "id": 228,
        "n": "Heaven Jeweler",
        "t": "4",
        "img_hash": "18 0 76 50 72 2 1 33 111 17 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 297,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 582,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 30,
                    "count": 30,
                    "spawn": true
                },
                {
                    "id": 372,
                    "count": 0
                },
                {
                    "id": 373,
                    "count": 0
                },
                {
                    "id": 200,
                    "count": 0
                },
                {
                    "id": 201,
                    "count": 0
                },
                {
                    "id": 198,
                    "count": 0
                },
                {
                    "id": 199,
                    "count": 0
                },
                {
                    "id": 196,
                    "count": 0
                },
                {
                    "id": 197,
                    "count": 0
                },
                {
                    "id": 194,
                    "count": 0
                },
                {
                    "id": 195,
                    "count": 0
                },
                {
                    "id": 385,
                    "count": 0
                },
                {
                    "id": 386,
                    "count": 0
                },
                {
                    "id": 387,
                    "count": 0
                },
                {
                    "id": 388,
                    "count": 0
                },
                {
                    "id": 389,
                    "count": 0
                },
                {
                    "id": 390,
                    "count": 0
                },
                {
                    "id": 374,
                    "count": 0
                },
                {
                    "id": 379,
                    "count": 0
                },
                {
                    "id": 375,
                    "count": 0
                },
                {
                    "id": 376,
                    "count": 0
                },
                {
                    "id": 377,
                    "count": 0
                },
                {
                    "id": 378,
                    "count": 0
                },
                {
                    "id": 391,
                    "count": 0
                },
                {
                    "id": 812,
                    "count": 0
                },
                {
                    "id": 380,
                    "count": 0
                },
                {
                    "id": 382,
                    "count": 0
                },
                {
                    "id": 381,
                    "count": 0
                },
                {
                    "id": 395,
                    "count": 0
                },
                {
                    "id": 822,
                    "count": 0
                },
                {
                    "id": 823,
                    "count": 0
                },
                {
                    "id": 392,
                    "count": 0
                },
                {
                    "id": 1098,
                    "count": 0
                },
                {
                    "id": 1099,
                    "count": 0
                },
                {
                    "id": 1100,
                    "count": 0
                },
                {
                    "id": 1101,
                    "count": 0
                },
                {
                    "id": 1102,
                    "count": 0
                },
                {
                    "id": 1103,
                    "count": 0
                },
                {
                    "id": 1104,
                    "count": 0
                },
                {
                    "id": 1118,
                    "count": 0
                },
                {
                    "id": 1119,
                    "count": 0
                },
                {
                    "id": 1120,
                    "count": 0
                },
                {
                    "id": 1121,
                    "count": 0
                },
                {
                    "id": 1122,
                    "count": 0
                },
                {
                    "id": 1123,
                    "count": 0
                },
                {
                    "id": 1124,
                    "count": 0
                }
            ]
        },
        "map": "Heaven",
        "coords": {
            "x": "59",
            "y": "59"
        }
    },
    {
        "id": 229,
        "n": "Heaven Potion Master",
        "t": "4",
        "img_hash": "18 0 79 52 72 1 0 0 166 44 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 323,
                    "count": 0
                },
                {
                    "id": 324,
                    "count": 0
                },
                {
                    "id": 325,
                    "count": 0
                },
                {
                    "id": 326,
                    "count": 0
                },
                {
                    "id": 327,
                    "count": 0
                },
                {
                    "id": 328,
                    "count": 0
                },
                {
                    "id": 329,
                    "count": 0
                }
            ]
        },
        "map": "Heaven",
        "coords": {
            "x": "61",
            "y": "61"
        }
    },
    {
        "id": 230,
        "n": "Blood River Pet Trader",
        "t": "4",
        "img_hash": "18 0 33 50 72 0 0 0 0 32 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 682,
                    "count": 0
                },
                {
                    "id": 683,
                    "count": 0
                },
                {
                    "id": 684,
                    "count": 0
                },
                {
                    "id": 685,
                    "count": 0
                },
                {
                    "id": 686,
                    "count": 0
                },
                {
                    "id": 687,
                    "count": 0
                },
                {
                    "id": 692,
                    "count": 0
                },
                {
                    "id": 693,
                    "count": 0
                },
                {
                    "id": 694,
                    "count": 0
                },
                {
                    "id": 711,
                    "count": 0
                }
            ]
        },
        "map": "Blood River",
        "coords": {
            "x": "34",
            "y": "34"
        }
    },
    {
        "id": 231,
        "n": "Blood River Shopkeeper",
        "t": "4",
        "img_hash": "18 0 0 36 72 0 0 0 0 39 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 6,
                    "count": 35,
                    "spawn": true
                },
                {
                    "id": 366,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 39,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 661,
                    "count": 0
                },
                {
                    "id": 659,
                    "count": 0
                },
                {
                    "id": 281,
                    "count": 0
                }
            ]
        },
        "map": "Blood River",
        "coords": {
            "x": "40",
            "y": "40"
        }
    },
    {
        "id": 232,
        "n": "Hell Potion Master",
        "t": "4",
        "img_hash": "18 0 92 36 72 1 0 0 166 17 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 330,
                    "count": 0
                },
                {
                    "id": 331,
                    "count": 0
                },
                {
                    "id": 332,
                    "count": 0
                },
                {
                    "id": 333,
                    "count": 0
                },
                {
                    "id": 334,
                    "count": 0
                },
                {
                    "id": 335,
                    "count": 0
                },
                {
                    "id": 336,
                    "count": 0
                },
                {
                    "id": 337,
                    "count": 0
                },
                {
                    "id": 338,
                    "count": 0
                }
            ]
        },
        "map": "Hell",
        "coords": {
            "x": "26",
            "y": "26"
        }
    },
    {
        "id": 233,
        "n": "Hell Blacksmith",
        "t": "4",
        "img_hash": "18 0 78 50 72 0 0 0 188 44 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 36,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 2,
                    "spawn": true
                },
                {
                    "id": 581,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 657,
                    "count": 0
                },
                {
                    "id": 658,
                    "count": 0
                },
                {
                    "id": 174,
                    "count": 0
                },
                {
                    "id": 178,
                    "count": 0
                },
                {
                    "id": 666,
                    "count": 0
                },
                {
                    "id": 668,
                    "count": 0
                },
                {
                    "id": 618,
                    "count": 0
                },
                {
                    "id": 616,
                    "count": 0
                },
                {
                    "id": 620,
                    "count": 0
                },
                {
                    "id": 622,
                    "count": 0
                },
                {
                    "id": 624,
                    "count": 0
                },
                {
                    "id": 159,
                    "count": 0
                },
                {
                    "id": 477,
                    "count": 0
                },
                {
                    "id": 344,
                    "count": 0
                },
                {
                    "id": 500,
                    "count": 0
                },
                {
                    "id": 664,
                    "count": 0
                },
                {
                    "id": 665,
                    "count": 0
                }
            ]
        },
        "map": "Hell",
        "coords": {
            "x": "34",
            "y": "34"
        }
    },
    {
        "id": 234,
        "n": "Hell Merchant",
        "t": "4",
        "img_hash": "18 0 62 36 72 2 1 33 111 32 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 566,
                    "count": 0
                },
                {
                    "id": 583,
                    "count": 0
                },
                {
                    "id": 584,
                    "count": 0
                },
                {
                    "id": 585,
                    "count": 0
                },
                {
                    "id": 499,
                    "count": 0
                },
                {
                    "id": 647,
                    "count": 0
                },
                {
                    "id": 652,
                    "count": 0
                }
            ]
        },
        "map": "Hell",
        "coords": {
            "x": "30",
            "y": "30"
        }
    },
    {
        "id": 235,
        "n": "Hell Pet Trader",
        "t": "4",
        "img_hash": "18 0 62 36 72 0 0 0 0 17 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 700,
                    "count": 0
                },
                {
                    "id": 701,
                    "count": 0
                },
                {
                    "id": 688,
                    "count": 0
                },
                {
                    "id": 689,
                    "count": 0
                },
                {
                    "id": 690,
                    "count": 0
                },
                {
                    "id": 691,
                    "count": 0
                },
                {
                    "id": 888,
                    "count": 0
                },
                {
                    "id": 889,
                    "count": 0
                },
                {
                    "id": 890,
                    "count": 0
                }
            ]
        },
        "map": "Hell",
        "coords": {
            "x": "30",
            "y": "30"
        }
    },
    {
        "id": 236,
        "n": "Shopkeeper",
        "t": "4",
        "img_hash": "6 0 47 52 9 1 0 0 60 0 0 7 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 463,
                    "count": 0
                },
                {
                    "id": 465,
                    "count": 0
                },
                {
                    "id": 151,
                    "count": 0
                },
                {
                    "id": 363,
                    "count": 0
                },
                {
                    "id": 160,
                    "count": 0
                },
                {
                    "id": 158,
                    "count": 0
                },
                {
                    "id": 157,
                    "count": 0
                },
                {
                    "id": 489,
                    "count": 0
                }
            ]
        },
        "map": "Pernau",
        "coords": {
            "x": "15",
            "y": "15"
        }
    },
    {
        "id": 237,
        "n": "Tutorial Fishing Master",
        "t": "4",
        "img_hash": "18 0 44 26 72 2 0 0 80 0 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 7,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 124,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 68,
                    "count": 0
                },
                {
                    "id": 8,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 9,
                    "count": 0
                },
                {
                    "id": 10,
                    "count": 8,
                    "spawn": true
                },
                {
                    "id": 11,
                    "count": 0
                }
            ]
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "39",
            "y": "39"
        }
    },
    {
        "id": 238,
        "n": "Narwa Weapon Merchant",
        "t": "4",
        "img_hash": "18 0 81 50 72 2 0 0 133 51 6 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 129,
                    "count": 0
                },
                {
                    "id": 150,
                    "count": 0
                },
                {
                    "id": 363,
                    "count": 0
                },
                {
                    "id": 531,
                    "count": 0
                },
                {
                    "id": 537,
                    "count": 0
                },
                {
                    "id": 615,
                    "count": 0
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "70",
            "y": "70"
        }
    },
    {
        "id": 239,
        "n": "Narwa Armor Merchant",
        "t": "4",
        "img_hash": "18 0 25 52 72 0 1 33 0 39 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 133,
                    "count": 0
                },
                {
                    "id": 153,
                    "count": 0
                },
                {
                    "id": 154,
                    "count": 0
                },
                {
                    "id": 155,
                    "count": 0
                },
                {
                    "id": 156,
                    "count": 0
                },
                {
                    "id": 165,
                    "count": 0
                },
                {
                    "id": 472,
                    "count": 0
                },
                {
                    "id": 558,
                    "count": 0
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "65",
            "y": "65"
        }
    },
    {
        "id": 240,
        "n": "Narwa Shopkeeper",
        "t": "4",
        "img_hash": "18 0 62 36 72 1 0 0 61 17 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 6,
                    "count": 35,
                    "spawn": true
                },
                {
                    "id": 366,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 39,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 661,
                    "count": 0
                },
                {
                    "id": 659,
                    "count": 0
                },
                {
                    "id": 261,
                    "count": 0
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "66",
            "y": "66"
        }
    },
    {
        "id": 241,
        "n": "Narwa Jeweler",
        "t": "4",
        "img_hash": "18 0 88 52 72 2 1 36 125 44 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 297,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 582,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 292,
                    "count": 0
                },
                {
                    "id": 293,
                    "count": 0
                },
                {
                    "id": 30,
                    "count": 25,
                    "spawn": true
                },
                {
                    "id": 184,
                    "count": 0
                },
                {
                    "id": 202,
                    "count": 0
                },
                {
                    "id": 200,
                    "count": 0
                },
                {
                    "id": 201,
                    "count": 0
                },
                {
                    "id": 198,
                    "count": 0
                },
                {
                    "id": 199,
                    "count": 0
                },
                {
                    "id": 196,
                    "count": 0
                },
                {
                    "id": 197,
                    "count": 0
                },
                {
                    "id": 194,
                    "count": 0
                },
                {
                    "id": 195,
                    "count": 0
                },
                {
                    "id": 385,
                    "count": 0
                },
                {
                    "id": 386,
                    "count": 0
                },
                {
                    "id": 387,
                    "count": 0
                },
                {
                    "id": 388,
                    "count": 0
                },
                {
                    "id": 389,
                    "count": 0
                },
                {
                    "id": 390,
                    "count": 0
                },
                {
                    "id": 24,
                    "count": 0
                },
                {
                    "id": 28,
                    "count": 0
                },
                {
                    "id": 805,
                    "count": 0
                },
                {
                    "id": 298,
                    "count": 0
                },
                {
                    "id": 131,
                    "count": 0
                },
                {
                    "id": 806,
                    "count": 0
                },
                {
                    "id": 815,
                    "count": 0
                },
                {
                    "id": 816,
                    "count": 0
                },
                {
                    "id": 130,
                    "count": 0
                },
                {
                    "id": 817,
                    "count": 0
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "64",
            "y": "64"
        }
    },
    {
        "id": 242,
        "n": "Narwa Farmer",
        "t": "4",
        "img_hash": "18 0 88 52 72 2 0 0 160 0 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 779,
                    "count": 3,
                    "spawn": true
                },
                {
                    "id": 767,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 778,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 776,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 794,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 773,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 787,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 788,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 789,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 790,
                    "count": 30,
                    "spawn": true
                },
                {
                    "id": 780,
                    "count": 0
                },
                {
                    "id": 781,
                    "count": 0
                },
                {
                    "id": 782,
                    "count": 0
                },
                {
                    "id": 783,
                    "count": 0
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "69",
            "y": "69"
        }
    },
    {
        "id": 243,
        "n": "Wandering Farmer",
        "t": "4",
        "img_hash": "18 0 88 16 72 2 1 39 125 17 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 779,
                    "count": 3,
                    "spawn": true
                },
                {
                    "id": 767,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 774,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 1035,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 854,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 775,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 791,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 792,
                    "count": 40,
                    "spawn": true
                },
                {
                    "id": 793,
                    "count": 30,
                    "spawn": true
                },
                {
                    "id": 1364,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 1358,
                    "count": 3,
                    "spawn": true
                },
                {
                    "id": 1359,
                    "count": 1,
                    "spawn": true
                },
                {
                    "id": 784,
                    "count": 0
                },
                {
                    "id": 785,
                    "count": 0
                },
                {
                    "id": 786,
                    "count": 0
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "10",
            "y": "10"
        }
    },
    {
        "id": 246,
        "n": "Whiland Blacksmith",
        "t": "4",
        "img_hash": "18 0 15 52 72 0 0 0 181 17 6 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 36,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 23,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 31,
                    "count": 25,
                    "spawn": true
                },
                {
                    "id": 50,
                    "count": 0
                },
                {
                    "id": 254,
                    "count": 0
                },
                {
                    "id": 173,
                    "count": 0
                },
                {
                    "id": 177,
                    "count": 0
                },
                {
                    "id": 932,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 933,
                    "count": 0
                },
                {
                    "id": 934,
                    "count": 0
                },
                {
                    "id": 935,
                    "count": 0
                },
                {
                    "id": 936,
                    "count": 0
                },
                {
                    "id": 937,
                    "count": 0
                },
                {
                    "id": 938,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 939,
                    "count": 0
                },
                {
                    "id": 940,
                    "count": 0
                },
                {
                    "id": 941,
                    "count": 0
                },
                {
                    "id": 942,
                    "count": 0
                },
                {
                    "id": 943,
                    "count": 0
                },
                {
                    "id": 944,
                    "count": 0
                },
                {
                    "id": 945,
                    "count": 0
                }
            ]
        },
        "map": "Whiland",
        "coords": {
            "x": "32",
            "y": "32"
        }
    },
    {
        "id": 247,
        "n": "Cupid",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 897,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 899,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 901,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 902,
                    "count": 20,
                    "spawn": true
                }
            ]
        }
    },
    {
        "id": 260,
        "n": "Sailor",
        "t": "4",
        "img_hash": "18 0 88 52 72 0 0 0 0 0 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 948,
                    "count": 50,
                    "spawn": true
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "74",
            "y": "74"
        }
    },
    {
        "id": 261,
        "n": "Road Sign",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Dorpat",
        "coords": {
            "x": "21",
            "y": "21"
        }
    },
    {
        "id": 262,
        "n": "Road Sign",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Dorpat",
        "coords": {
            "x": "20",
            "y": "20"
        }
    },
    {
        "id": 263,
        "n": "Road Sign",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Dorpat",
        "coords": {
            "x": "80",
            "y": "80"
        }
    },
    {
        "id": 264,
        "n": "Road Sign",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Dorpat",
        "coords": {
            "x": "82",
            "y": "82"
        }
    },
    {
        "id": 265,
        "n": "Dorpat Magic Crafter",
        "t": "4",
        "img_hash": "18 0 32 33 72 2 0 49 53 15 12 5",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 265,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 988,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1084,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 989,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 991,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1159,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 990,
                    "count": 30,
                    "spawn": true
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "28",
            "y": "28"
        }
    },
    {
        "id": 266,
        "n": "Reval Magic Crafter",
        "t": "4",
        "img_hash": "18 0 66 40 72 0 0 0 0 51 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 266,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 988,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1084,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 989,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 991,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1159,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 990,
                    "count": 30,
                    "spawn": true
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "19",
            "y": "19"
        }
    },
    {
        "id": 267,
        "n": "Blood River Magic Crafter",
        "t": "4",
        "img_hash": "18 0 79 50 72 1 0 0 166 51 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1012,
                    "count": 0
                },
                {
                    "id": 988,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1084,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 989,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 991,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1159,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 990,
                    "count": 30,
                    "spawn": true
                }
            ]
        },
        "map": "Blood River",
        "coords": {
            "x": "35",
            "y": "35"
        }
    },
    {
        "id": 268,
        "n": "Heaven Magic Crafter",
        "t": "4",
        "img_hash": "18 0 79 54 72 1 0 54 166 51 0 4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1013,
                    "count": 0
                },
                {
                    "id": 1014,
                    "count": 0
                },
                {
                    "id": 988,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1084,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 989,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 991,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 1159,
                    "count": 10,
                    "spawn": true
                },
                {
                    "id": 990,
                    "count": 30,
                    "spawn": true
                }
            ]
        },
        "map": "Heaven",
        "coords": {
            "x": "62",
            "y": "62"
        }
    },
    {
        "id": 270,
        "n": "Quest Instructor",
        "t": "4",
        "img_hash": "18 0 79 60 72 0 0 0 0 32 12 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "31",
            "y": "31"
        }
    },
    {
        "id": 279,
        "n": "Loot Master",
        "t": "4",
        "img_hash": "17 0 85 59 72 2 1 12 148 40 14 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "No Man's Land",
        "coords": {
            "x": "21",
            "y": "21"
        }
    },
    {
        "id": 287,
        "n": "Ancient Magician",
        "t": "4",
        "img_hash": "18 0 88 52 72 1 0 54 168 17 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 348,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 349,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 350,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 351,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 352,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 866,
                    "count": 0
                },
                {
                    "id": 858,
                    "count": 0
                },
                {
                    "id": 862,
                    "count": 0
                },
                {
                    "id": 1075,
                    "count": 0
                },
                {
                    "id": 454,
                    "count": 0
                },
                {
                    "id": 483,
                    "count": 0
                },
                {
                    "id": 451,
                    "count": 0
                },
                {
                    "id": 867,
                    "count": 0
                },
                {
                    "id": 859,
                    "count": 0
                },
                {
                    "id": 863,
                    "count": 0
                },
                {
                    "id": 985,
                    "count": 0
                },
                {
                    "id": 987,
                    "count": 0
                },
                {
                    "id": 980,
                    "count": 0
                },
                {
                    "id": 986,
                    "count": 0
                },
                {
                    "id": 979,
                    "count": 0
                },
                {
                    "id": 984,
                    "count": 0
                },
                {
                    "id": 467,
                    "count": 0
                },
                {
                    "id": 468,
                    "count": 0
                },
                {
                    "id": 469,
                    "count": 0
                },
                {
                    "id": 470,
                    "count": 0
                },
                {
                    "id": 465,
                    "count": 0
                }
            ]
        },
        "map": "Ancient Dungeon",
        "coords": {
            "x": "46",
            "y": "46"
        }
    },
    {
        "id": 289,
        "n": "Ancient Furniture Master",
        "t": "4",
        "img_hash": "18 0 79 50 72 0 0 0 0 51 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 836,
                    "count": 0
                },
                {
                    "id": 842,
                    "count": 0
                },
                {
                    "id": 848,
                    "count": 0
                },
                {
                    "id": 770,
                    "count": 0
                },
                {
                    "id": 771,
                    "count": 0
                },
                {
                    "id": 772,
                    "count": 0
                },
                {
                    "id": 835,
                    "count": 0
                },
                {
                    "id": 841,
                    "count": 0
                },
                {
                    "id": 847,
                    "count": 0
                },
                {
                    "id": 837,
                    "count": 0
                },
                {
                    "id": 843,
                    "count": 0
                },
                {
                    "id": 849,
                    "count": 0
                },
                {
                    "id": 838,
                    "count": 0
                },
                {
                    "id": 844,
                    "count": 0
                },
                {
                    "id": 850,
                    "count": 0
                },
                {
                    "id": 839,
                    "count": 0
                },
                {
                    "id": 845,
                    "count": 0
                },
                {
                    "id": 851,
                    "count": 0
                },
                {
                    "id": 840,
                    "count": 0
                },
                {
                    "id": 846,
                    "count": 0
                },
                {
                    "id": 852,
                    "count": 0
                }
            ]
        },
        "map": "Ancient Dungeon",
        "coords": {
            "x": "48",
            "y": "48"
        }
    },
    {
        "id": 290,
        "n": "Guild Shopkeeper Level",
        "t": "4",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 63,
                    "count": 0
                },
                {
                    "id": 173,
                    "count": 0
                },
                {
                    "id": 174,
                    "count": 0
                },
                {
                    "id": 175,
                    "count": 0
                }
            ]
        }
    },
    {
        "id": 296,
        "n": "Dorpat Breeding Master",
        "t": "4",
        "img_hash": "18 0 25 60 72 0 1 36 0 15 12 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1166,
                    "count": 0
                },
                {
                    "id": 1179,
                    "count": 0
                },
                {
                    "id": 1230,
                    "count": 0
                },
                {
                    "id": 1168,
                    "count": 0
                },
                {
                    "id": 1167,
                    "count": 0
                },
                {
                    "id": 1245,
                    "count": 0
                },
                {
                    "id": 1229,
                    "count": 0
                },
                {
                    "id": 1247,
                    "count": 0
                },
                {
                    "id": 1246,
                    "count": 0
                },
                {
                    "id": 1249,
                    "count": 0
                },
                {
                    "id": 1216,
                    "count": 0
                }
            ]
        },
        "map": "Dorpat",
        "coords": {
            "x": "30",
            "y": "30"
        }
    },
    {
        "id": 297,
        "n": "Reval Breeding Master",
        "t": "4",
        "img_hash": "18 0 87 57 72 0 1 37 0 46 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1244,
                    "count": 0
                },
                {
                    "id": 1169,
                    "count": 0
                },
                {
                    "id": 1236,
                    "count": 0
                },
                {
                    "id": 1234,
                    "count": 0
                },
                {
                    "id": 1235,
                    "count": 0
                },
                {
                    "id": 1206,
                    "count": 0
                },
                {
                    "id": 1207,
                    "count": 0
                },
                {
                    "id": 1205,
                    "count": 0
                },
                {
                    "id": 1199,
                    "count": 0
                },
                {
                    "id": 1255,
                    "count": 0
                },
                {
                    "id": 1184,
                    "count": 0
                }
            ]
        },
        "map": "Reval",
        "coords": {
            "x": "23",
            "y": "23"
        }
    },
    {
        "id": 298,
        "n": "Cesis Breeding Master",
        "t": "4",
        "img_hash": "18 0 47 30 72 0 0 0 0 51 0 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1252,
                    "count": 0
                },
                {
                    "id": 1209,
                    "count": 0
                },
                {
                    "id": 1180,
                    "count": 0
                },
                {
                    "id": 1217,
                    "count": 0
                },
                {
                    "id": 1251,
                    "count": 0
                },
                {
                    "id": 1250,
                    "count": 0
                },
                {
                    "id": 1196,
                    "count": 0
                },
                {
                    "id": 1256,
                    "count": 0
                },
                {
                    "id": 1211,
                    "count": 0
                },
                {
                    "id": 1233,
                    "count": 0
                },
                {
                    "id": 1198,
                    "count": 0
                }
            ]
        },
        "map": "Cesis",
        "coords": {
            "x": "57",
            "y": "57"
        }
    },
    {
        "id": 299,
        "n": "Narwa Breeding Master",
        "t": "4",
        "img_hash": "18 0 81 36 72 0 1 33 0 39 0 6",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1227,
                    "count": 0
                },
                {
                    "id": 1226,
                    "count": 0
                },
                {
                    "id": 1204,
                    "count": 0
                },
                {
                    "id": 1194,
                    "count": 0
                },
                {
                    "id": 1195,
                    "count": 0
                },
                {
                    "id": 1253,
                    "count": 0
                },
                {
                    "id": 1200,
                    "count": 0
                },
                {
                    "id": 1208,
                    "count": 0
                },
                {
                    "id": 1192,
                    "count": 0
                },
                {
                    "id": 1191,
                    "count": 0
                },
                {
                    "id": 1190,
                    "count": 0
                },
                {
                    "id": 1238,
                    "count": 0
                },
                {
                    "id": 1192,
                    "count": 0
                },
                {
                    "id": 1191,
                    "count": 0
                },
                {
                    "id": 1185,
                    "count": 0
                }
            ]
        },
        "map": "Narwa",
        "coords": {
            "x": "72",
            "y": "72"
        }
    },
    {
        "id": 300,
        "n": "Legendary Breeding Master",
        "t": "4",
        "img_hash": "17 0 37 25 20 2 0 0 153 31 5 0 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1242,
                    "count": 0
                },
                {
                    "id": 1241,
                    "count": 0
                },
                {
                    "id": 1218,
                    "count": 0
                },
                {
                    "id": 1219,
                    "count": 0
                },
                {
                    "id": 1181,
                    "count": 0
                },
                {
                    "id": 1237,
                    "count": 0
                },
                {
                    "id": 1182,
                    "count": 0
                },
                {
                    "id": 1215,
                    "count": 0
                }
            ]
        },
        "map": "No Man's Land",
        "coords": {
            "x": "11",
            "y": "11"
        }
    },
    {
        "id": 301,
        "n": "Legendary Breeding Master",
        "t": "4",
        "img_hash": "17 0 37 25 20 2 0 0 176 49 5 0 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1254,
                    "count": 0
                },
                {
                    "id": 1183,
                    "count": 0
                },
                {
                    "id": 1186,
                    "count": 0
                },
                {
                    "id": 1189,
                    "count": 0
                },
                {
                    "id": 1239,
                    "count": 0
                },
                {
                    "id": 1201,
                    "count": 0
                },
                {
                    "id": 1202,
                    "count": 0
                },
                {
                    "id": 1223,
                    "count": 0
                },
                {
                    "id": 1212,
                    "count": 0
                },
                {
                    "id": 1203,
                    "count": 0
                },
                {
                    "id": 1193,
                    "count": 0
                },
                {
                    "id": 1232,
                    "count": 0
                }
            ]
        },
        "map": "Ancient Dungeon",
        "coords": {
            "x": "25",
            "y": "25"
        }
    },
    {
        "id": 302,
        "n": "Dragons Breeding Master",
        "t": "4",
        "img_hash": "17 0 37 25 20 2 0 0 50 9 5 0 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 1225,
                    "count": 0
                },
                {
                    "id": 1187,
                    "count": 0
                },
                {
                    "id": 1188,
                    "count": 0
                },
                {
                    "id": 1224,
                    "count": 0
                },
                {
                    "id": 1221,
                    "count": 0
                },
                {
                    "id": 1213,
                    "count": 0
                },
                {
                    "id": 1220,
                    "count": 0
                },
                {
                    "id": 1214,
                    "count": 0
                },
                {
                    "id": 1222,
                    "count": 0
                }
            ]
        },
        "map": "Dragon's Lair",
        "coords": {
            "x": "53",
            "y": "53"
        }
    },
    {
        "id": 306,
        "n": "Magic Instructor",
        "t": "4",
        "img_hash": "18 0 90 54 72 1 0 54 166 46 12 5",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "31",
            "y": "31"
        }
    },
    {
        "id": 307,
        "n": "Alchemy Instructor",
        "t": "4",
        "img_hash": "17 0 42 26 72 2 0 0 160 0 9 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Tutorial Island",
        "coords": {
            "x": "66",
            "y": "66"
        }
    },
    {
        "id": 311,
        "n": "Party Quest Instructor",
        "t": "4",
        "img_hash": "0 0 18 17 72 0 0 0 0 14 9 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Dungeon",
        "coords": {
            "x": "24",
            "y": "24"
        }
    },
    {
        "id": 312,
        "n": "PVP Shopkeeper",
        "t": "4",
        "img_hash": "19 0 63 7 72 0 0 0 0 0 0 0",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [],
            "general": true
        },
        "map": "No Man's Land",
        "coords": {
            "x": "82",
            "y": "82"
        }
    },
    {
        "id": 313,
        "n": "Traitor",
        "t": "4",
        "img_hash": "18 0 88 52 70 0 0 0 123 51 6 7 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Walco",
        "coords": {
            "x": "13",
            "y": "13"
        }
    },
    {
        "id": 330,
        "n": "Broceliande Forest Magician",
        "t": "4",
        "img_hash": "0 0 90 54 68 0 0 0 0 44 14 3 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 482,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 450,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 456,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 612,
                    "count": 0
                },
                {
                    "id": 1074,
                    "count": 0
                },
                {
                    "id": 858,
                    "count": 0
                },
                {
                    "id": 862,
                    "count": 0
                },
                {
                    "id": 866,
                    "count": 0
                },
                {
                    "id": 1075,
                    "count": 0
                },
                {
                    "id": 856,
                    "count": 0
                },
                {
                    "id": 860,
                    "count": 0
                },
                {
                    "id": 864,
                    "count": 0
                },
                {
                    "id": 1071,
                    "count": 0
                },
                {
                    "id": 483,
                    "count": 0
                },
                {
                    "id": 451,
                    "count": 0
                },
                {
                    "id": 454,
                    "count": 0
                },
                {
                    "id": 1076,
                    "count": 0
                },
                {
                    "id": 859,
                    "count": 0
                },
                {
                    "id": 863,
                    "count": 0
                },
                {
                    "id": 867,
                    "count": 0
                },
                {
                    "id": 1077,
                    "count": 0
                }
            ]
        },
        "map": "Broceliande Forest",
        "coords": {
            "x": "60",
            "y": "60"
        }
    },
    {
        "id": 331,
        "n": "Broceliande Forest Spellcaster",
        "t": "4",
        "img_hash": "0 0 88 54 71 2 0 0 172 44 14 3 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 413,
                    "count": 5,
                    "spawn": true
                },
                {
                    "id": 412,
                    "count": 15,
                    "spawn": true
                },
                {
                    "id": 414,
                    "count": 0
                },
                {
                    "id": 415,
                    "count": 0
                },
                {
                    "id": 416,
                    "count": 0
                },
                {
                    "id": 417,
                    "count": 0
                },
                {
                    "id": 418,
                    "count": 0
                },
                {
                    "id": 419,
                    "count": 0
                },
                {
                    "id": 420,
                    "count": 0
                },
                {
                    "id": 421,
                    "count": 0
                },
                {
                    "id": 459,
                    "count": 0
                },
                {
                    "id": 458,
                    "count": 0
                }
            ]
        },
        "map": "Broceliande Forest",
        "coords": {
            "x": "49",
            "y": "49"
        }
    },
    {
        "id": 332,
        "n": "Traitor",
        "t": "4",
        "img_hash": "0 0 88 52 70 0 1 33 0 51 14 3 1",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": []
        },
        "map": "Devil's Triangle",
        "coords": {
            "x": "55",
            "y": "55"
        }
    },
    {
        "id": 433,
        "n": "Survivor",
        "t": "4",
        "img_hash": "0 0 46 30 72 2 1 37 111 10 19 7",
        "temp": {
            "health": 99,
            "total_defense": 99,
            "total_strength": 99,
            "total_accuracy": 99,
            "content": [
                {
                    "id": 95,
                    "count": 20,
                    "spawn": true
                },
                {
                    "id": 93,
                    "count": 20,
                    "spawn": true
                }
            ]
        },
        "map": "Cathedral",
        "coords": {
            "x": "44",
            "y": "44"
        }
    }
]
},{}],337:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , _npcs = require('./NPCDB.js')
  , _store = []
  , _filters = {show:false,map:-1,orderBy:['map','n']}
  , _lastTerm = ''
  , _ = require('lodash')
;

var _findByItemId = function(itemId) {
  _store = [];
  var id = parseInt(itemId);
  _npcs.map(function(npc, idx){
    var found = false
      , i = 0
      , maxI = npc.temp.content.length;

    while (!found && i<maxI) {
      found = npc.temp.content[i++].id == id;
    }

    if (found) {
      _store.push(npc);
    }

  });

}

var _search = function(term) {
  var re = new RegExp(term.toLowerCase(), 'i');
  _store = [];
  // var min = parseInt(_filters.minPrice);
  // var max = parseInt(_filters.maxPrice);

  _npcs.map(function(npc, idx){
    if (
      npc && npc.n && npc.n.toLowerCase().match(re)
      && (_filters.map == -1 || npc.map == _filters.map)
      // && (_filters.minPrice=='' || min <= ip)
      // && (_filters.maxPrice=='' || max >= ip)
    ) {
      _store.push(npc);
    }
  });
  NPCStore.emitChange()
};

var NPCStore = assign({}, EventEmitter.prototype, {
  getResults: function() {
    return _store;
  },
  get: function(id) {
    return _.findWhere(_npcs, {id:parseInt(id)});
  },
  init: function() {
    _search(_lastTerm);
  },
  getFilters: function() {
    return _filters
  },
  findByItem: function(itemId) {
    var npcs = [];
    var id = parseInt(itemId);
    _npcs.map(function(npc, idx){
      var found = false
        , i = 0
        , maxI = npc.temp.content.length;

      while (!found && i<maxI) {
        found = npc.temp.content[i++].id == id;
      }

      if (found) {
        npcs.push(npc);
      }

    });
    return npcs;
  },
  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },
  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },


  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;

    switch(action.actionType) {
      case AppConstants.ActionTypes.NPCS_BY_ITEM:
        _findByItemId(action.itemId);
      break;

      case AppConstants.ActionTypes.SET_NPC_MAP:
        _filters.map = action.map.trim() || -1;
        _search(_lastTerm);
      break;

      case AppConstants.ActionTypes.SEARCH:
        q = action.q.trim();
        _lastTerm = q;
        _search(q);
      break;

      case AppConstants.ActionTypes.TOGGLE_VENDOR_FILTERS:
        _filters.show = !_filters.show;
        NPCStore.emitChange();
      break;
    }


    return true; // No errors. Needed by promise in Dispatcher.
  })
});

module.exports = NPCStore;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"./NPCDB.js":336,"events":4,"lodash":6,"object-assign":8}],338:[function(require,module,exports){
module.exports = [
    {
        "id": 1,
        "n": "Baby Ruby Dragon [Common]",
        "item_id": 669,
        "params": {
            "item_id": 669,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 671,
            "level": 1
        }
    },
    {
        "id": 2,
        "n": "Gray Dog [Common]",
        "item_id": 670,
        "params": {
            "item_id": 670,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 674,
            "level": 1
        }
    },
    {
        "id": 3,
        "n": "Ruby Dragon [Common]",
        "item_id": 671,
        "params": {
            "item_id": 671,
            "xp_required": 500000,
            "inventory_slots": 8,
            "next_pet_item_id": 672,
            "level": 2
        }
    },
    {
        "id": 4,
        "n": "King Ruby Dragon [Common]",
        "item_id": 672,
        "params": {
            "item_id": 672,
            "inventory_slots": 12,
            "requires_stone": true,
            "stones": 2,
            "next_pet_item_id": 673,
            "level": 3,
            "eats": {
                "285": 0.15,
                "494": 0.05
            },
            "eat_interval": 4,
            "happiness": 20,
            "insurance_cost": [
                97500,
                70
            ],
            "breeding_level": 58,
            "likes": [
                {
                    "pet_id": 5,
                    "xp": 868,
                    "returns": [
                        {
                            "pet_id": 117,
                            "base_chance": 0.6,
                            "max_chance": 0.85
                        }
                    ]
                },
                {
                    "pet_id": 38,
                    "xp": 1388,
                    "returns": [
                        {
                            "pet_id": 114,
                            "base_chance": 0.6,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 116,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 42,
                    "xp": 859,
                    "returns": [
                        {
                            "pet_id": 106,
                            "base_chance": 0.6,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 105,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 5,
        "n": "Chaotic Ruby Dragon [Rare]",
        "item_id": 673,
        "params": {
            "item_id": 673,
            "inventory_slots": 16,
            "level": 4,
            "eats": {
                "238": 0.25,
                "283": 0.05
            },
            "eat_interval": 10,
            "happiness": 30,
            "insurance_cost": [
                397500,
                270
            ],
            "breeding_level": 80,
            "likes": [
                {
                    "pet_id": 4,
                    "xp": 868,
                    "returns": [
                        {
                            "pet_id": 117,
                            "base_chance": 0.6,
                            "max_chance": 0.85
                        }
                    ]
                },
                {
                    "pet_id": 37,
                    "xp": 1125,
                    "returns": [
                        {
                            "pet_id": 113,
                            "base_chance": 0.6,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 96,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 41,
                    "xp": 859,
                    "returns": [
                        {
                            "pet_id": 118,
                            "base_chance": 0.6,
                            "max_chance": 0.835
                        },
                        {
                            "pet_id": 94,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 6,
        "n": "Gray Wolf [Common]",
        "item_id": 674,
        "params": {
            "item_id": 674,
            "inventory_slots": 8,
            "level": 2,
            "eats": {
                "8": 0.25,
                "271": 0.3
            },
            "eat_interval": 3,
            "happiness": 6,
            "insurance_cost": [
                19500,
                15
            ],
            "breeding_level": 1,
            "likes": [
                {
                    "pet_id": 6,
                    "xp": 68,
                    "returns": [
                        {
                            "pet_id": 62,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 63,
                            "base_chance": 0.05,
                            "max_chance": 0.08
                        }
                    ]
                },
                {
                    "pet_id": 66,
                    "xp": 62,
                    "returns": [
                        {
                            "pet_id": 64,
                            "base_chance": 0.65,
                            "max_chance": 0.85
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 7,
        "n": "Brown Dog [Common]",
        "item_id": 675,
        "params": {
            "item_id": 675,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 676,
            "level": 1
        }
    },
    {
        "id": 8,
        "n": "Brown Wolf [Common]",
        "item_id": 676,
        "params": {
            "item_id": 676,
            "inventory_slots": 8,
            "level": 2,
            "eats": {
                "8": 0.25,
                "272": 0.5
            },
            "eat_interval": 3,
            "happiness": 6,
            "insurance_cost": [
                19500,
                14
            ],
            "breeding_level": 1,
            "likes": [
                {
                    "pet_id": 8,
                    "xp": 68,
                    "returns": [
                        {
                            "pet_id": 62,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 63,
                            "base_chance": 0.06,
                            "max_chance": 0.08
                        }
                    ]
                },
                {
                    "pet_id": 66,
                    "xp": 62,
                    "returns": [
                        {
                            "pet_id": 64,
                            "base_chance": 0.65,
                            "max_chance": 0.85
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 9,
        "n": "Baby Dinosaur [Rare]",
        "item_id": 677,
        "params": {
            "item_id": 677,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 678,
            "level": 1
        }
    },
    {
        "id": 10,
        "n": "Dinosaur [Rare]",
        "item_id": 678,
        "params": {
            "item_id": 678,
            "xp_required": 500000,
            "inventory_slots": 8,
            "next_pet_item_id": 679,
            "level": 2
        }
    },
    {
        "id": 11,
        "n": "Spiky Dinosaur [Rare]",
        "item_id": 679,
        "params": {
            "item_id": 679,
            "inventory_slots": 12,
            "level": 3,
            "eats": {
                "271": 0.15,
                "274": 0.2,
                "760": 0.1
            },
            "eat_interval": 5,
            "happiness": 20,
            "insurance_cost": [
                97500,
                70
            ],
            "breeding_level": 60,
            "likes": [
                {
                    "pet_id": 11,
                    "xp": 342,
                    "returns": [
                        {
                            "pet_id": 127,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 128,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 32,
                    "xp": 294,
                    "returns": [
                        {
                            "pet_id": 99,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 100,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 12,
        "n": "White Horse [Rare]",
        "item_id": 680,
        "params": {
            "item_id": 680,
            "xp_required": 500000,
            "inventory_slots": 8,
            "next_pet_item_id": 681,
            "level": 1,
            "eats": {
                "757": 0.05,
                "758": 0.15
            },
            "eat_interval": 8,
            "happiness": 24,
            "insurance_cost": [
                300000,
                210
            ],
            "breeding_level": 75,
            "likes": [
                {
                    "pet_id": 44,
                    "xp": 557,
                    "returns": [
                        {
                            "pet_id": 141,
                            "base_chance": 0.55,
                            "max_chance": 0.72
                        },
                        {
                            "pet_id": 109,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 135,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 13,
        "n": "Unicorn [Rare]",
        "item_id": 681,
        "params": {
            "item_id": 681,
            "inventory_slots": 12,
            "next_pet_item_id": 886,
            "requires_stone": true,
            "stones": 2,
            "level": 2
        }
    },
    {
        "id": 14,
        "n": "Baby Beholder [Common]",
        "item_id": 682,
        "params": {
            "item_id": 682,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 683,
            "level": 1
        }
    },
    {
        "id": 15,
        "n": "Beholder [Common]",
        "item_id": 683,
        "params": {
            "item_id": 683,
            "xp_required": 500000,
            "inventory_slots": 8,
            "next_pet_item_id": 684,
            "level": 2
        }
    },
    {
        "id": 16,
        "n": "King Beholder [Common]",
        "item_id": 684,
        "params": {
            "item_id": 684,
            "inventory_slots": 12,
            "next_pet_item_id": 685,
            "requires_stone": true,
            "stones": 2,
            "level": 3,
            "eats": {
                "268": 0.05,
                "269": 0.08
            },
            "eat_interval": 3,
            "happiness": 14,
            "insurance_cost": [
                90675,
                65
            ],
            "breeding_level": 45,
            "likes": [
                {
                    "pet_id": 16,
                    "xp": 318,
                    "returns": [
                        {
                            "pet_id": 119,
                            "base_chance": 0.7,
                            "max_chance": 0.85
                        }
                    ]
                },
                {
                    "pet_id": 52,
                    "xp": 1260,
                    "returns": [
                        {
                            "pet_id": 97,
                            "base_chance": 0.65,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 75,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 32,
                    "xp": 282,
                    "returns": [
                        {
                            "pet_id": 87,
                            "base_chance": 0.55,
                            "max_chance": 0.72
                        },
                        {
                            "pet_id": 88,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 108,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 17,
        "n": "Demonic Beholder [Rare]",
        "item_id": 685,
        "params": {
            "item_id": 685,
            "inventory_slots": 16,
            "level": 4,
            "eats": {
                "268": 0.15,
                "269": 0.2
            },
            "eat_interval": 8,
            "happiness": 30,
            "insurance_cost": [
                390675,
                280
            ],
            "breeding_level": 77,
            "likes": [
                {
                    "pet_id": 55,
                    "xp": 3212,
                    "returns": [
                        {
                            "pet_id": 78,
                            "base_chance": 0.6,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 18,
        "n": "Ghost [Common]",
        "item_id": 686,
        "params": {
            "item_id": 686,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 687,
            "level": 1
        }
    },
    {
        "id": 19,
        "n": "Nightmare Ghost [Common]",
        "item_id": 687,
        "params": {
            "item_id": 687,
            "inventory_slots": 8,
            "level": 2,
            "eats": {
                "233": 0.2,
                "269": 0.15,
                "1300": 0.3,
                "1301": 0.4
            },
            "eat_interval": 3,
            "happiness": 8,
            "insurance_cost": [
                23400,
                20
            ],
            "breeding_level": 5,
            "likes": [
                {
                    "pet_id": 19,
                    "xp": 82,
                    "returns": [
                        {
                            "pet_id": 137,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 122,
                            "base_chance": 0.05,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 42,
                    "xp": 729,
                    "returns": [
                        {
                            "pet_id": 65,
                            "base_chance": 0.58,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 129,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 20,
        "n": "Angel [Rare]",
        "item_id": 688,
        "params": {
            "item_id": 688,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 689,
            "level": 1
        }
    },
    {
        "id": 21,
        "n": "Archangel [Rare]",
        "item_id": 689,
        "params": {
            "item_id": 689,
            "xp_required": 500000,
            "inventory_slots": 8,
            "next_pet_item_id": 690,
            "level": 2
        }
    },
    {
        "id": 22,
        "n": "Sacred Archangel [Rare]",
        "item_id": 690,
        "params": {
            "item_id": 690,
            "inventory_slots": 12,
            "next_pet_item_id": 691,
            "requires_stone": true,
            "stones": 4,
            "level": 3,
            "eats": {
                "225": 0.15,
                "1150": 0.5
            },
            "eat_interval": 10,
            "happiness": 30,
            "insurance_cost": [
                585000,
                420
            ],
            "breeding_level": 82,
            "likes": [
                {
                    "pet_id": 53,
                    "xp": 2558,
                    "returns": [
                        {
                            "pet_id": 131,
                            "base_chance": 0.38,
                            "max_chance": 0.58
                        },
                        {
                            "pet_id": 132,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 23,
        "n": "Saint Archangel [Legendary]",
        "item_id": 691,
        "params": {
            "item_id": 691,
            "inventory_slots": 16,
            "level": 4,
            "eats": {
                "225": 0.05,
                "1150": 0.25
            },
            "eat_interval": 20,
            "happiness": 50,
            "insurance_cost": [
                1185000,
                850
            ],
            "breeding_level": 95,
            "likes": [
                {
                    "pet_id": 23,
                    "xp": 4157,
                    "returns": [
                        {
                            "pet_id": 83,
                            "base_chance": 0.6,
                            "max_chance": 0.836
                        },
                        {
                            "pet_id": 82,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 26,
                    "xp": 2185,
                    "returns": [
                        {
                            "pet_id": 85,
                            "base_chance": 0.55,
                            "max_chance": 0.72
                        },
                        {
                            "pet_id": 84,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 125,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 24,
        "n": "Skeleton [Common]",
        "item_id": 692,
        "params": {
            "item_id": 692,
            "xp_required": 200000,
            "inventory_slots": 4,
            "next_pet_item_id": 693,
            "level": 1
        }
    },
    {
        "id": 25,
        "n": "Skeleton Warrior [Common]",
        "item_id": 693,
        "params": {
            "item_id": 693,
            "xp_required": 800000,
            "inventory_slots": 8,
            "next_pet_item_id": 694,
            "level": 2
        }
    },
    {
        "id": 26,
        "n": "Skeleton King [Common]",
        "item_id": 694,
        "params": {
            "item_id": 694,
            "inventory_slots": 12,
            "next_pet_item_id": 711,
            "requires_stone": true,
            "stones": 4,
            "level": 3,
            "eats": {
                "221": 0.5,
                "233": 0.15,
                "1300": 0.3,
                "1301": 0.4
            },
            "eat_interval": 3,
            "happiness": 8,
            "insurance_cost": [
                60450,
                45
            ],
            "breeding_level": 12,
            "likes": [
                {
                    "pet_id": 23,
                    "xp": 2185,
                    "returns": [
                        {
                            "pet_id": 85,
                            "base_chance": 0.55,
                            "max_chance": 0.72
                        },
                        {
                            "pet_id": 84,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 125,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 27,
        "n": "Skeleton Overlord [Rare]",
        "item_id": 711,
        "params": {
            "item_id": 711,
            "inventory_slots": 16,
            "level": 4,
            "eats": {
                "270": 0.1,
                "271": 0.15
            },
            "eat_interval": 12,
            "happiness": 35,
            "insurance_cost": [
                660450,
                450
            ],
            "breeding_level": 85,
            "likes": [
                {
                    "pet_id": 52,
                    "xp": 2260,
                    "returns": [
                        {
                            "pet_id": 77,
                            "base_chance": 0.54,
                            "max_chance": 0.831
                        },
                        {
                            "pet_id": 79,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 28,
        "n": "Baby Gryffin [Common]",
        "item_id": 695,
        "params": {
            "item_id": 695,
            "xp_required": 150000,
            "inventory_slots": 4,
            "next_pet_item_id": 696,
            "level": 1
        }
    },
    {
        "id": 29,
        "n": "Gryffin [Common]",
        "item_id": 696,
        "params": {
            "item_id": 696,
            "xp_required": 300000,
            "inventory_slots": 8,
            "next_pet_item_id": 697,
            "level": 2
        }
    },
    {
        "id": 30,
        "n": "Royal Gryffin [Common]",
        "item_id": 697,
        "params": {
            "item_id": 697,
            "inventory_slots": 12,
            "level": 3,
            "eats": {
                "80": 0.05,
                "762": 0.15,
                "1300": 0.3,
                "1301": 0.4
            },
            "eat_interval": 4,
            "happiness": 16,
            "insurance_cost": [
                94575,
                68
            ],
            "breeding_level": 50,
            "likes": [
                {
                    "pet_id": 121,
                    "xp": 301,
                    "returns": [
                        {
                            "pet_id": 126,
                            "base_chance": 0.6,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 31,
        "n": "Emerald Geko [Common]",
        "item_id": 698,
        "params": {
            "item_id": 698,
            "xp_required": 700000,
            "inventory_slots": 8,
            "next_pet_item_id": 699,
            "level": 1
        }
    },
    {
        "id": 32,
        "n": "Moss Wyvern [Common]",
        "item_id": 699,
        "params": {
            "item_id": 699,
            "inventory_slots": 12,
            "level": 2,
            "eats": {
                "267": 0.5,
                "268": 0.05
            },
            "eat_interval": 4,
            "happiness": 12,
            "insurance_cost": [
                70200,
                50
            ],
            "breeding_level": 30,
            "likes": [
                {
                    "pet_id": 16,
                    "xp": 282,
                    "returns": [
                        {
                            "pet_id": 87,
                            "base_chance": 0.55,
                            "max_chance": 0.72
                        },
                        {
                            "pet_id": 88,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 108,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 32,
                    "xp": 246,
                    "returns": [
                        {
                            "pet_id": 144,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 102,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 11,
                    "xp": 294,
                    "returns": [
                        {
                            "pet_id": 99,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 100,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 34,
                    "xp": 246,
                    "returns": [
                        {
                            "pet_id": 101,
                            "base_chance": 0.6,
                            "max_chance": 0.73
                        },
                        {
                            "pet_id": 146,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 33,
        "n": "Ruby Geko [Common]",
        "item_id": 700,
        "params": {
            "item_id": 700,
            "xp_required": 700000,
            "inventory_slots": 8,
            "next_pet_item_id": 701,
            "level": 1
        }
    },
    {
        "id": 34,
        "n": "Flame Wyvern [Common]",
        "item_id": 701,
        "params": {
            "item_id": 701,
            "inventory_slots": 12,
            "level": 2,
            "eats": {
                "94": 0.05,
                "206": 0.15,
                "1300": 0.3,
                "1301": 0.4
            },
            "eat_interval": 4,
            "happiness": 12,
            "insurance_cost": [
                70200,
                50
            ],
            "breeding_level": 25,
            "likes": [
                {
                    "pet_id": 34,
                    "xp": 246,
                    "returns": [
                        {
                            "pet_id": 145,
                            "base_chance": 0.6,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 93,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 32,
                    "xp": 246,
                    "returns": [
                        {
                            "pet_id": 101,
                            "base_chance": 0.6,
                            "max_chance": 0.73
                        },
                        {
                            "pet_id": 146,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 35,
        "n": "Baby Black Dragon [Common]",
        "item_id": 702,
        "params": {
            "item_id": 702,
            "xp_required": 200000,
            "inventory_slots": 4,
            "next_pet_item_id": 703,
            "level": 1
        }
    },
    {
        "id": 36,
        "n": "Black Dragon [Common]",
        "item_id": 703,
        "params": {
            "item_id": 703,
            "xp_required": 600000,
            "inventory_slots": 8,
            "next_pet_item_id": 704,
            "level": 2
        }
    },
    {
        "id": 37,
        "n": "King Black Dragon [Common]",
        "item_id": 704,
        "params": {
            "item_id": 704,
            "inventory_slots": 12,
            "next_pet_item_id": 705,
            "requires_stone": true,
            "stones": 3,
            "level": 3,
            "eats": {
                "285": 0.15,
                "494": 0.05
            },
            "eat_interval": 6,
            "happiness": 24,
            "insurance_cost": [
                243750,
                200
            ],
            "breeding_level": 73,
            "likes": [
                {
                    "pet_id": 5,
                    "xp": 1125,
                    "returns": [
                        {
                            "pet_id": 113,
                            "base_chance": 0.6,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 96,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 38,
                    "xp": 1644,
                    "returns": [
                        {
                            "pet_id": 107,
                            "base_chance": 0.56,
                            "max_chance": 0.832
                        },
                        {
                            "pet_id": 86,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 42,
                    "xp": 1116,
                    "returns": [
                        {
                            "pet_id": 115,
                            "base_chance": 0.6,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 38,
        "n": "Blood Black Dragon [Rare]",
        "item_id": 705,
        "params": {
            "item_id": 705,
            "inventory_slots": 16,
            "level": 4,
            "eats": {
                "239": 0.05,
                "1150": 0.25
            },
            "eat_interval": 12,
            "happiness": 35,
            "insurance_cost": [
                693750,
                470
            ],
            "breeding_level": 86,
            "likes": [
                {
                    "pet_id": 4,
                    "xp": 1388,
                    "returns": [
                        {
                            "pet_id": 114,
                            "base_chance": 0.6,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 116,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 37,
                    "xp": 1644,
                    "returns": [
                        {
                            "pet_id": 107,
                            "base_chance": 0.56,
                            "max_chance": 0.832
                        },
                        {
                            "pet_id": 86,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 41,
                    "xp": 1379,
                    "returns": [
                        {
                            "pet_id": 80,
                            "base_chance": 0.5,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 39,
        "n": "Baby Emerald Dragon [Common]",
        "item_id": 706,
        "params": {
            "item_id": 706,
            "xp_required": 100000,
            "inventory_slots": 4,
            "next_pet_item_id": 707,
            "level": 1
        }
    },
    {
        "id": 40,
        "n": "Emerald Dragon [Common]",
        "item_id": 707,
        "params": {
            "item_id": 707,
            "xp_required": 500000,
            "inventory_slots": 8,
            "next_pet_item_id": 708,
            "level": 2
        }
    },
    {
        "id": 41,
        "n": "King Emerald Dragon [Common]",
        "item_id": 708,
        "params": {
            "item_id": 708,
            "inventory_slots": 12,
            "next_pet_item_id": 709,
            "requires_stone": true,
            "stones": 2,
            "level": 3,
            "eats": {
                "285": 0.1,
                "494": 0.03,
                "760": 0.08
            },
            "eat_interval": 4,
            "happiness": 16,
            "insurance_cost": [
                92625,
                65
            ],
            "breeding_level": 48,
            "likes": [
                {
                    "pet_id": 5,
                    "xp": 859,
                    "returns": [
                        {
                            "pet_id": 118,
                            "base_chance": 0.6,
                            "max_chance": 0.835
                        },
                        {
                            "pet_id": 94,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 38,
                    "xp": 1379,
                    "returns": [
                        {
                            "pet_id": 80,
                            "base_chance": 0.5,
                            "max_chance": 0.86
                        }
                    ]
                },
                {
                    "pet_id": 42,
                    "xp": 851,
                    "returns": [
                        {
                            "pet_id": 81,
                            "base_chance": 0.6,
                            "max_chance": 0.835
                        },
                        {
                            "pet_id": 95,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 42,
        "n": "Cursed Dragon [Rare]",
        "item_id": 709,
        "params": {
            "item_id": 709,
            "inventory_slots": 16,
            "level": 4,
            "eats": {
                "274": 0.05,
                "275": 0.1
            },
            "eat_interval": 8,
            "happiness": 30,
            "insurance_cost": [
                392625,
                280
            ],
            "breeding_level": 79,
            "likes": [
                {
                    "pet_id": 4,
                    "xp": 859,
                    "returns": [
                        {
                            "pet_id": 106,
                            "base_chance": 0.6,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 105,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 19,
                    "xp": 729,
                    "returns": [
                        {
                            "pet_id": 65,
                            "base_chance": 0.58,
                            "max_chance": 0.75
                        },
                        {
                            "pet_id": 129,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 37,
                    "xp": 1116,
                    "returns": [
                        {
                            "pet_id": 115,
                            "base_chance": 0.6,
                            "max_chance": 0.86
                        }
                    ]
                },
                {
                    "pet_id": 41,
                    "xp": 851,
                    "returns": [
                        {
                            "pet_id": 81,
                            "base_chance": 0.6,
                            "max_chance": 0.835
                        },
                        {
                            "pet_id": 95,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 43,
        "n": "Pegasus [Rare]",
        "item_id": 886,
        "params": {
            "item_id": 886,
            "inventory_slots": 16,
            "level": 3,
            "eats": {
                "100": 0.05,
                "106": 0.08
            },
            "eat_interval": 20,
            "happiness": 40,
            "insurance_cost": [
                840000,
                600
            ],
            "breeding_level": 90,
            "likes": [
                {
                    "pet_id": 45,
                    "xp": 1789,
                    "returns": [
                        {
                            "pet_id": 143,
                            "base_chance": 0.5,
                            "max_chance": 0.721
                        },
                        {
                            "pet_id": 142,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 112,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 43,
                    "xp": 2947,
                    "returns": [
                        {
                            "pet_id": 120,
                            "base_chance": 0.6,
                            "max_chance": 0.834
                        },
                        {
                            "pet_id": 130,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 44,
        "n": "Donkey [Common]",
        "item_id": 887,
        "params": {
            "item_id": 887,
            "inventory_slots": 4,
            "level": 1,
            "eats": {
                "757": 0.25,
                "758": 0.4,
                "760": 0.6
            },
            "eat_interval": 3,
            "happiness": 6,
            "insurance_cost": [
                18000,
                13
            ],
            "breeding_level": 3,
            "likes": [
                {
                    "pet_id": 44,
                    "xp": 63,
                    "returns": [
                        {
                            "pet_id": 138,
                            "base_chance": 0.55,
                            "max_chance": 0.65
                        },
                        {
                            "pet_id": 139,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        }
                    ]
                },
                {
                    "pet_id": 12,
                    "xp": 557,
                    "returns": [
                        {
                            "pet_id": 141,
                            "base_chance": 0.55,
                            "max_chance": 0.72
                        },
                        {
                            "pet_id": 109,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 135,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 45,
                    "xp": 347,
                    "returns": [
                        {
                            "pet_id": 136,
                            "base_chance": 0.65,
                            "max_chance": 0.84
                        },
                        {
                            "pet_id": 134,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 45,
        "n": "Horror Steed [Rare]",
        "item_id": 888,
        "params": {
            "item_id": 888,
            "xp_required": 800000,
            "inventory_slots": 4,
            "next_pet_item_id": 889,
            "level": 1,
            "eats": {
                "757": 0.05,
                "758": 0.15,
                "760": 0.2
            },
            "eat_interval": 6,
            "happiness": 24,
            "insurance_cost": [
                180000,
                130
            ],
            "breeding_level": 68,
            "likes": [
                {
                    "pet_id": 43,
                    "xp": 1789,
                    "returns": [
                        {
                            "pet_id": 143,
                            "base_chance": 0.5,
                            "max_chance": 0.721
                        },
                        {
                            "pet_id": 142,
                            "base_chance": 0.06,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 112,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 44,
                    "xp": 347,
                    "returns": [
                        {
                            "pet_id": 136,
                            "base_chance": 0.65,
                            "max_chance": 0.84
                        },
                        {
                            "pet_id": 134,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 46,
        "n": "Nightmare Steed [Rare]",
        "item_id": 889,
        "params": {
            "item_id": 889,
            "inventory_slots": 8,
            "next_pet_item_id": 890,
            "requires_stone": true,
            "stones": 4,
            "level": 2
        }
    },
    {
        "id": 47,
        "n": "Underworld Steed [Legendary]",
        "item_id": 890,
        "params": {
            "item_id": 890,
            "inventory_slots": 16,
            "level": 3,
            "eats": {
                "757": 0.05,
                "758": 0.25
            },
            "eat_interval": 20,
            "happiness": 40,
            "insurance_cost": [
                834000,
                600
            ],
            "breeding_level": 88,
            "likes": [
                {
                    "pet_id": 47,
                    "xp": 2926,
                    "returns": [
                        {
                            "pet_id": 89,
                            "base_chance": 0.5,
                            "max_chance": 0.833
                        },
                        {
                            "pet_id": 74,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 56,
                    "xp": 2639,
                    "returns": [
                        {
                            "pet_id": 73,
                            "base_chance": 0.6,
                            "max_chance": 0.73
                        },
                        {
                            "pet_id": 110,
                            "base_chance": 0.06,
                            "max_chance": 0.09
                        },
                        {
                            "pet_id": 111,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 48,
        "n": "Baby Cupid [Legendary]",
        "item_id": 891,
        "params": {
            "item_id": 891,
            "xp_required": 700000,
            "inventory_slots": 4,
            "next_pet_item_id": 892,
            "level": 1
        }
    },
    {
        "id": 49,
        "n": "Cupid [Legendary]",
        "item_id": 892,
        "params": {
            "item_id": 892,
            "xp_required": 1000000,
            "inventory_slots": 8,
            "next_pet_item_id": 893,
            "level": 2
        }
    },
    {
        "id": 50,
        "n": "Cupid Archer [Legendary]",
        "item_id": 893,
        "params": {
            "item_id": 893,
            "xp_required": 1300000,
            "inventory_slots": 12,
            "next_pet_item_id": 894,
            "level": 3
        }
    },
    {
        "id": 51,
        "n": "Lady-Killer [Legendary]",
        "item_id": 894,
        "params": {
            "item_id": 894,
            "inventory_slots": 16,
            "level": 4
        }
    },
    {
        "id": 52,
        "n": "Efreet [Rare]",
        "item_id": 895,
        "params": {
            "item_id": 895,
            "inventory_slots": 8,
            "level": 1,
            "eats": {
                "244": 0.2,
                "245": 0.15
            },
            "eat_interval": 10,
            "happiness": 35,
            "insurance_cost": [
                627900,
                430
            ],
            "breeding_level": 83,
            "likes": [
                {
                    "pet_id": 52,
                    "xp": 2203,
                    "returns": [
                        {
                            "pet_id": 98,
                            "base_chance": 0.25,
                            "max_chance": 0.36
                        },
                        {
                            "pet_id": 92,
                            "base_chance": 0.25,
                            "max_chance": 0.35
                        },
                        {
                            "pet_id": 147,
                            "base_chance": 0.05,
                            "max_chance": 0.1
                        },
                        {
                            "pet_id": 76,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 27,
                    "xp": 2260,
                    "returns": [
                        {
                            "pet_id": 77,
                            "base_chance": 0.54,
                            "max_chance": 0.831
                        },
                        {
                            "pet_id": 79,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                },
                {
                    "pet_id": 16,
                    "xp": 1260,
                    "returns": [
                        {
                            "pet_id": 97,
                            "base_chance": 0.65,
                            "max_chance": 0.83
                        },
                        {
                            "pet_id": 75,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 53,
        "n": "Diablo [Legendary]",
        "item_id": 896,
        "params": {
            "item_id": 896,
            "inventory_slots": 16,
            "level": 5,
            "eats": {
                "122": 0.1,
                "222": 0.2
            },
            "eat_interval": 20,
            "happiness": 50,
            "insurance_cost": [
                873402,
                600
            ],
            "breeding_level": 93,
            "likes": [
                {
                    "pet_id": 22,
                    "xp": 2558,
                    "returns": [
                        {
                            "pet_id": 131,
                            "base_chance": 0.38,
                            "max_chance": 0.58
                        },
                        {
                            "pet_id": 132,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 54,
        "n": "Nephilim Slave [Rare]",
        "item_id": 1062,
        "params": {
            "item_id": 1062,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 55,
        "n": "Nephilim Protector [Legendary]",
        "item_id": 1063,
        "params": {
            "item_id": 1063,
            "inventory_slots": 16,
            "level": 5,
            "eats": {
                "229": 0.1,
                "244": 0.2
            },
            "eat_interval": 20,
            "happiness": 60,
            "insurance_cost": [
                1440600,
                1000
            ],
            "breeding_level": 98,
            "likes": [
                {
                    "pet_id": 17,
                    "xp": 3212,
                    "returns": [
                        {
                            "pet_id": 78,
                            "base_chance": 0.6,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 56,
        "n": "Flame Phoenix [Rare]",
        "item_id": 1064,
        "params": {
            "item_id": 1064,
            "inventory_slots": 16,
            "level": 5,
            "eats": {
                "244": 0.2,
                "245": 0.1
            },
            "eat_interval": 10,
            "happiness": 38,
            "insurance_cost": [
                670479,
                450
            ],
            "breeding_level": 85,
            "likes": [
                {
                    "pet_id": 47,
                    "xp": 2639,
                    "returns": [
                        {
                            "pet_id": 73,
                            "base_chance": 0.6,
                            "max_chance": 0.73
                        },
                        {
                            "pet_id": 110,
                            "base_chance": 0.06,
                            "max_chance": 0.09
                        },
                        {
                            "pet_id": 111,
                            "base_chance": 0.02,
                            "max_chance": 0.02
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 57,
        "n": "Angry Witch [Legendary]",
        "item_id": 1139,
        "params": {
            "item_id": 1139,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 58,
        "n": "Rudolph [Legendary]",
        "item_id": 1147,
        "params": {
            "item_id": 1147,
            "inventory_slots": 16,
            "level": 4
        }
    },
    {
        "id": 59,
        "n": "Piglet [Common]",
        "item_id": 1150,
        "params": {
            "item_id": 1150,
            "inventory_slots": 8,
            "next_pet_item_id": 1151,
            "requires_stone": true,
            "stones": 3,
            "level": 1
        }
    },
    {
        "id": 60,
        "n": "Pig [Common]",
        "item_id": 1151,
        "params": {
            "item_id": 1151,
            "inventory_slots": 16,
            "next_pet_item_id": 1155,
            "requires_stone": true,
            "stones": 3,
            "level": 2
        }
    },
    {
        "id": 61,
        "n": "Armored Pig [Rare]",
        "item_id": 1155,
        "params": {
            "item_id": 1155,
            "inventory_slots": 16,
            "level": 3
        }
    },
    {
        "id": 62,
        "n": "Gray Werewolf [Common]",
        "item_id": 1166,
        "params": {
            "item_id": 1166,
            "inventory_slots": 12,
            "level": 1
        }
    },
    {
        "id": 63,
        "n": "Warg [Rare]",
        "item_id": 1167,
        "params": {
            "item_id": 1167,
            "inventory_slots": 12,
            "level": 1
        }
    },
    {
        "id": 64,
        "n": "Swamp Guru [Common]",
        "item_id": 1168,
        "params": {
            "item_id": 1168,
            "inventory_slots": 12,
            "level": 1
        }
    },
    {
        "id": 65,
        "n": "Ghost Dragon [Common]",
        "item_id": 1169,
        "params": {
            "item_id": 1169,
            "inventory_slots": 12,
            "level": 1
        }
    },
    {
        "id": 66,
        "n": "Kobalos [Common]",
        "item_id": 1170,
        "params": {
            "item_id": 1170,
            "inventory_slots": 12,
            "level": 1,
            "eats": {
                "220": 0.15,
                "236": 0.35
            },
            "eat_interval": 3,
            "happiness": 4,
            "insurance_cost": [
                16200,
                12
            ],
            "breeding_level": 1,
            "likes": [
                {
                    "pet_id": 6,
                    "xp": 62,
                    "returns": [
                        {
                            "pet_id": 64,
                            "base_chance": 0.65,
                            "max_chance": 0.85
                        }
                    ]
                },
                {
                    "pet_id": 8,
                    "xp": 62,
                    "returns": [
                        {
                            "pet_id": 64,
                            "base_chance": 0.65,
                            "max_chance": 0.85
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 67,
        "n": "Leprechaun [Rare]",
        "item_id": 1171,
        "params": {
            "item_id": 1171,
            "inventory_slots": 12,
            "level": 1
        }
    },
    {
        "id": 68,
        "n": "Lion [Common]",
        "item_id": 1175,
        "params": {
            "item_id": 1175,
            "inventory_slots": 8,
            "level": 1,
            "eats": {
                "78": 0.2,
                "494": 0.05
            },
            "eat_interval": 3,
            "happiness": 8,
            "insurance_cost": [
                55620,
                40
            ],
            "breeding_level": 8,
            "likes": [
                {
                    "pet_id": 71,
                    "xp": 512,
                    "returns": [
                        {
                            "pet_id": 91,
                            "base_chance": 0.5,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 69,
        "n": "Desert Scorpion [Common]",
        "item_id": 1176,
        "params": {
            "item_id": 1176,
            "xp_required": 750000,
            "inventory_slots": 4,
            "next_pet_item_id": 1177,
            "level": 1
        }
    },
    {
        "id": 70,
        "n": "Deathstalker Scorpion [Common]",
        "item_id": 1177,
        "params": {
            "item_id": 1177,
            "inventory_slots": 8,
            "next_pet_item_id": 1178,
            "requires_stone": true,
            "stones": 1,
            "level": 2
        }
    },
    {
        "id": 71,
        "n": "Emperor Scorpion [Rare]",
        "item_id": 1178,
        "params": {
            "item_id": 1178,
            "inventory_slots": 16,
            "level": 3,
            "eats": {
                "8": 0.05,
                "10": 0.1
            },
            "eat_interval": 6,
            "happiness": 24,
            "insurance_cost": [
                236482,
                165
            ],
            "breeding_level": 70,
            "likes": [
                {
                    "pet_id": 68,
                    "xp": 512,
                    "returns": [
                        {
                            "pet_id": 91,
                            "base_chance": 0.5,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 72,
        "n": "Brown Werewolf [Common]",
        "item_id": 1179,
        "params": {
            "item_id": 1179,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 73,
        "n": "Dark Pegasus [Common]",
        "item_id": 1180,
        "params": {
            "item_id": 1180,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 74,
        "n": "Sleipnir [Legendary]",
        "item_id": 1181,
        "params": {
            "item_id": 1181,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 75,
        "n": "HellKyte [Legendary]",
        "item_id": 1182,
        "params": {
            "item_id": 1182,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 76,
        "n": "Ifrit [Legendary]",
        "item_id": 1183,
        "params": {
            "item_id": 1183,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 77,
        "n": "Death Knight [Common]",
        "item_id": 1184,
        "params": {
            "item_id": 1184,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 78,
        "n": "Shiva [Common]",
        "item_id": 1185,
        "params": {
            "item_id": 1185,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 79,
        "n": "Fire Overlord [Legendary]",
        "item_id": 1186,
        "params": {
            "item_id": 1186,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 80,
        "n": "Lionhead Dragon [Common]",
        "item_id": 1187,
        "params": {
            "item_id": 1187,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 81,
        "n": "Horntail [Common]",
        "item_id": 1188,
        "params": {
            "item_id": 1188,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 82,
        "n": "Rael [Legendary]",
        "item_id": 1189,
        "params": {
            "item_id": 1189,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 83,
        "n": "Cursed Archangel [Common]",
        "item_id": 1190,
        "params": {
            "item_id": 1190,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 84,
        "n": "Jophiel the archangel [Rare]",
        "item_id": 1191,
        "params": {
            "item_id": 1191,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 85,
        "n": "Michael the archangel [Common]",
        "item_id": 1192,
        "params": {
            "item_id": 1192,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 86,
        "n": "Obsidian Dragon [Legendary]",
        "item_id": 1193,
        "params": {
            "item_id": 1193,
            "inventory_slots": 16,
            "level": 1,
            "eats": {
                "275": 0.05,
                "276": 0.1
            },
            "eat_interval": 20,
            "happiness": 80,
            "insurance_cost": [
                1756687,
                1700
            ],
            "breeding_level": 103,
            "likes": [
                {
                    "pet_id": 113,
                    "xp": 4643,
                    "returns": [
                        {
                            "pet_id": 153,
                            "base_chance": 0.3,
                            "max_chance": 0.35
                        },
                        {
                            "pet_id": 154,
                            "base_chance": 0.05,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 87,
        "n": "Ancient Wyvern [Common]",
        "item_id": 1194,
        "params": {
            "item_id": 1194,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 88,
        "n": "Hydra [Rare]",
        "item_id": 1195,
        "params": {
            "item_id": 1195,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 89,
        "n": "Wildfire Steed [Common]",
        "item_id": 1196,
        "params": {
            "item_id": 1196,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 90,
        "n": "Giant Troll [Rare]",
        "item_id": 1197,
        "params": {
            "item_id": 1197,
            "inventory_slots": 8,
            "level": 1
        }
    },
    {
        "id": 91,
        "n": "Manticore [Common]",
        "item_id": 1198,
        "params": {
            "item_id": 1198,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 92,
        "n": "Fire Elemental [Common]",
        "item_id": 1199,
        "params": {
            "item_id": 1199,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 93,
        "n": "Rathalos [Rare]",
        "item_id": 1200,
        "params": {
            "item_id": 1200,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 94,
        "n": "Saint Dragon [Legendary]",
        "item_id": 1201,
        "params": {
            "item_id": 1201,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 95,
        "n": "Ancient Ironbelly [Legendary]",
        "item_id": 1202,
        "params": {
            "item_id": 1202,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 96,
        "n": "Archsky Dragon [Legendary]",
        "item_id": 1203,
        "params": {
            "item_id": 1203,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 97,
        "n": "Flame Beholder [Common]",
        "item_id": 1204,
        "params": {
            "item_id": 1204,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 98,
        "n": "Efreet Sultan [Common]",
        "item_id": 1205,
        "params": {
            "item_id": 1205,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 99,
        "n": "Spiked Emerald Wyvern [Common]",
        "item_id": 1206,
        "params": {
            "item_id": 1206,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 100,
        "n": "Spiked Ruby Wyvern [Common]",
        "item_id": 1207,
        "params": {
            "item_id": 1207,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 101,
        "n": "Magma Wyvern [Common]",
        "item_id": 1208,
        "params": {
            "item_id": 1208,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 102,
        "n": "Swamp Wyvern [Rare]",
        "item_id": 1209,
        "params": {
            "item_id": 1209,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 103,
        "n": "Naga [Common]",
        "item_id": 1210,
        "params": {
            "item_id": 1210,
            "inventory_slots": 8,
            "level": 2,
            "eats": {
                "228": 0.05,
                "230": 0.1
            },
            "eat_interval": 3,
            "happiness": 14,
            "insurance_cost": [
                82500,
                60
            ],
            "breeding_level": 38,
            "likes": [
                {
                    "pet_id": 103,
                    "xp": 289,
                    "returns": [
                        {
                            "pet_id": 148,
                            "base_chance": 0.58,
                            "max_chance": 0.77
                        },
                        {
                            "pet_id": 104,
                            "base_chance": 0.04,
                            "max_chance": 0.08
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 104,
        "n": "Gorgon [Rare]",
        "item_id": 1211,
        "params": {
            "item_id": 1211,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 105,
        "n": "Rubysoul Dragon [Legendary]",
        "item_id": 1212,
        "params": {
            "item_id": 1212,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 106,
        "n": "Crystal Dragon [Common]",
        "item_id": 1213,
        "params": {
            "item_id": 1213,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 107,
        "n": "Undead Dragon [Common]",
        "item_id": 1214,
        "params": {
            "item_id": 1214,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 108,
        "n": "Beholder Worm [Legendary]",
        "item_id": 1215,
        "params": {
            "item_id": 1215,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 109,
        "n": "Royal Horse [Rare]",
        "item_id": 1216,
        "params": {
            "item_id": 1216,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 110,
        "n": "Lava Pegasus [Rare]",
        "item_id": 1217,
        "params": {
            "item_id": 1217,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 111,
        "n": "Nightmare Pegasus [Legendary]",
        "item_id": 1218,
        "params": {
            "item_id": 1218,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 112,
        "n": "Sun Pegasus [Legendary]",
        "item_id": 1219,
        "params": {
            "item_id": 1219,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 113,
        "n": "Flaming Dragon [Common]",
        "item_id": 1220,
        "params": {
            "item_id": 1220,
            "inventory_slots": 16,
            "level": 1,
            "eats": {
                "220": 0.03,
                "236": 0.1
            },
            "eat_interval": 20,
            "happiness": 80,
            "insurance_cost": [
                890055,
                855
            ],
            "breeding_level": 102,
            "likes": [
                {
                    "pet_id": 86,
                    "xp": 4643,
                    "returns": [
                        {
                            "pet_id": 153,
                            "base_chance": 0.3,
                            "max_chance": 0.35
                        },
                        {
                            "pet_id": 154,
                            "base_chance": 0.05,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 114,
        "n": "Lava Dragon [Common]",
        "item_id": 1221,
        "params": {
            "item_id": 1221,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 115,
        "n": "White Belly Dragon [Common]",
        "item_id": 1222,
        "params": {
            "item_id": 1222,
            "inventory_slots": 16,
            "level": 1,
            "eats": {
                "228": 0.03,
                "230": 0.03
            },
            "eat_interval": 20,
            "happiness": 74,
            "insurance_cost": [
                883288,
                850
            ],
            "breeding_level": 100,
            "likes": [
                {
                    "pet_id": 116,
                    "xp": 4150,
                    "returns": [
                        {
                            "pet_id": 151,
                            "base_chance": 0.3,
                            "max_chance": 0.35
                        },
                        {
                            "pet_id": 152,
                            "base_chance": 0.05,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 116,
        "n": "Underworld Dragon [Legendary]",
        "item_id": 1223,
        "params": {
            "item_id": 1223,
            "inventory_slots": 16,
            "level": 1,
            "eats": {
                "8": 0.01,
                "10": 0.02
            },
            "eat_interval": 20,
            "happiness": 74,
            "insurance_cost": [
                1482643,
                1300
            ],
            "breeding_level": 101,
            "likes": [
                {
                    "pet_id": 115,
                    "xp": 4150,
                    "returns": [
                        {
                            "pet_id": 151,
                            "base_chance": 0.3,
                            "max_chance": 0.35
                        },
                        {
                            "pet_id": 152,
                            "base_chance": 0.05,
                            "max_chance": 0.1
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 117,
        "n": "Fire Heart Dragon [Common]",
        "item_id": 1224,
        "params": {
            "item_id": 1224,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 118,
        "n": "Dragonite [Common]",
        "item_id": 1225,
        "params": {
            "item_id": 1225,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 119,
        "n": "Ice Beholder [Common]",
        "item_id": 1226,
        "params": {
            "item_id": 1226,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 120,
        "n": "Cloudcaller [Common]",
        "item_id": 1227,
        "params": {
            "item_id": 1227,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 121,
        "n": "Centaur [Rare]",
        "item_id": 1228,
        "params": {
            "item_id": 1228,
            "inventory_slots": 4,
            "level": 1,
            "eats": {
                "239": 0.2,
                "264": 0.05,
                "760": 0.1
            },
            "eat_interval": 3,
            "happiness": 14,
            "insurance_cost": [
                77076,
                55
            ],
            "breeding_level": 33,
            "likes": [
                {
                    "pet_id": 30,
                    "xp": 301,
                    "returns": [
                        {
                            "pet_id": 126,
                            "base_chance": 0.6,
                            "max_chance": 0.86
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 122,
        "n": "Demon [Rare]",
        "item_id": 1229,
        "params": {
            "item_id": 1229,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 123,
        "n": "Dark Guru [Common]",
        "item_id": 1230,
        "params": {
            "item_id": 1230,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 124,
        "n": "Shadow Werewolf [Common]",
        "item_id": 1231,
        "params": {
            "item_id": 1231,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 125,
        "n": "Raguel the archangel [Legendary]",
        "item_id": 1232,
        "params": {
            "item_id": 1232,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 126,
        "n": "Winged Centaur [Rare]",
        "item_id": 1233,
        "params": {
            "item_id": 1233,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 127,
        "n": "Ankylosaurus [Common]",
        "item_id": 1234,
        "params": {
            "item_id": 1234,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 128,
        "n": "Tyrannosaurus [Rare]",
        "item_id": 1235,
        "params": {
            "item_id": 1235,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 129,
        "n": "Shadow Dragon [Rare]",
        "item_id": 1236,
        "params": {
            "item_id": 1236,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 130,
        "n": "Marble Unicorn [Legendary]",
        "item_id": 1237,
        "params": {
            "item_id": 1237,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 131,
        "n": "Underworld Lord [Common]",
        "item_id": 1238,
        "params": {
            "item_id": 1238,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 132,
        "n": "Lord Of Destruction [Legendary]",
        "item_id": 1239,
        "params": {
            "item_id": 1239,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 133,
        "n": "Game Master [Ancient]",
        "item_id": 1240,
        "params": {
            "item_id": 1240,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 134,
        "n": "Ruby Horse [Legendary]",
        "item_id": 1241,
        "params": {
            "item_id": 1241,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 135,
        "n": "Winged Sapphire Demon [Legendary]",
        "item_id": 1242,
        "params": {
            "item_id": 1242,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 136,
        "n": "Bone Horse [Common]",
        "item_id": 1244,
        "params": {
            "item_id": 1244,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 137,
        "n": "Disembodied Spirit [Common]",
        "item_id": 1245,
        "params": {
            "item_id": 1245,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 138,
        "n": "Royal Donkey [Common]",
        "item_id": 1246,
        "params": {
            "item_id": 1246,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 139,
        "n": "Undead Donkey [Rare]",
        "item_id": 1247,
        "params": {
            "item_id": 1247,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 140,
        "n": "Shadow Guru [Common]",
        "item_id": 1248,
        "params": {
            "item_id": 1248,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 141,
        "n": "Hinny [Common]",
        "item_id": 1249,
        "params": {
            "item_id": 1249,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 142,
        "n": "Crystallized Pegasus [Rare]",
        "item_id": 1250,
        "params": {
            "item_id": 1250,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 143,
        "n": "Demonic Unicorn [Common]",
        "item_id": 1251,
        "params": {
            "item_id": 1251,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 144,
        "n": "Lindworm [Common]",
        "item_id": 1252,
        "params": {
            "item_id": 1252,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 145,
        "n": "Soul Trapper [Common]",
        "item_id": 1253,
        "params": {
            "item_id": 1253,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 146,
        "n": "Dream Collector [Legendary]",
        "item_id": 1254,
        "params": {
            "item_id": 1254,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 147,
        "n": "Genie [Rare]",
        "item_id": 1255,
        "params": {
            "item_id": 1255,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 148,
        "n": "Euryale [Common]",
        "item_id": 1256,
        "params": {
            "item_id": 1256,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 149,
        "n": "Medusa [Common]",
        "item_id": 1257,
        "params": {
            "item_id": 1257,
            "xp_required": 150000,
            "inventory_slots": 8,
            "next_pet_item_id": 1210,
            "level": 1
        }
    },
    {
        "id": 150,
        "n": "Giant Bunny [Rare]",
        "item_id": 1258,
        "params": {
            "item_id": 1258,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 151,
        "n": "Mylanth [Legendary]",
        "item_id": 1344,
        "params": {
            "item_id": 1344,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 152,
        "n": "Tesselth [Ancient]",
        "item_id": 1345,
        "params": {
            "item_id": 1345,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 153,
        "n": "Xirador [Legendary]",
        "item_id": 1346,
        "params": {
            "item_id": 1346,
            "inventory_slots": 16,
            "level": 1
        }
    },
    {
        "id": 154,
        "n": "Xalanth [Ancient]",
        "item_id": 1347,
        "params": {
            "item_id": 1347,
            "inventory_slots": 16,
            "level": 1
        }
    }
]
},{}],339:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , _pets = require('./PetDB.js')
  , _store = []
  , _filters = {show:false,cat1:-1,cat2:-2,minPrice:'',maxPrice:''}
  , _lastTerm = ''
;

var _search = function(term) {
  var re = new RegExp(term.toLowerCase(), 'i');
  _store = [];
  // var min = parseInt(_filters.minPrice);
  // var max = parseInt(_filters.maxPrice);

  _pets.map(function(item, idx){
    if (
      item && item.n && item.n.toLowerCase().match(re)
      // && (_filters.cat1==-1 || parseInt(item.t) == _filters.cat1)
      // && (_filters.minPrice=='' || min <= ip)
      // && (_filters.maxPrice=='' || max >= ip)
    ) {
      _store.push(item);
    }
  });
  PetStore.emitChange()
};

var PetStore = assign({}, EventEmitter.prototype, {
  getResults: function() {
    return _store;
  },
  get: function(id) {
    for (var i in _pets) {
      if (_pets[i].id == id) return _pets[i];
    }
  },
  getAll: function() {
    return _pets;
  },
  getFilters: function() {
    return _filters
  },
  getByItemId:function(itemId) {
    itemId = parseInt(itemId);
    for (var i=0;i<_pets.length;i++) {
      if (_pets[i].id == itemId) {
        return _pets[i];
      }
    }
    return null;
  },

  findPetsThatEat: function(itemId) {
    itemId = itemId.toString();
    var ret = [];
    for (var i=0;i<_pets.length;i++) {
      if (_pets[i].params.eats && Object.keys(_pets[i].params.eats).indexOf(itemId)>-1) {
        ret.push(_pets[i]);
      }
    }
    return ret;
  },

  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },

  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },

  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;

    switch(action.actionType) {
      case AppConstants.ActionTypes.SEARCH_PETS:
        q = action.q.trim();
        _lastTerm = q;
        _search(q);
        break;
    }


    return true; // No errors. Needed by promise in Dispatcher.
  })
});

module.exports = PetStore;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"./PetDB.js":338,"events":4,"object-assign":8}],340:[function(require,module,exports){
var AppDispatcher = require('../dispatcher/AppDispatcher')
  , EventEmitter = require('events').EventEmitter
  , AppConstants = require('../constants/AppConstants.js')
  , assign = require('object-assign')
  , CHANGE_EVENT = 'change'
  , _items = require('./ItemDB.js')
  , util = require('../util.js')
  , _store = []
  , _lastTerm = ''
  , _filters = {
      show:false,
      cat1:-1,
      cat2:-1,
      subCat:-1,
      minPrice:'',
      maxPrice:'',
      output: 'grid'
    }
;
window.SearchStoreFilters = _filters;

var _search = function(term) {
  var re = new RegExp(term.toLowerCase(), 'i');
  var tmpStore = [];
  var min = parseInt(_filters.minPrice);
  var max = parseInt(_filters.maxPrice);

  _items.map(function(item, idx){
    var ip = parseInt(item.params.price);
    if (
      item && item.n && item.n.toLowerCase().match(re)
      && (_filters.cat1==-1 || parseInt(item.t) == _filters.cat1)
      && (_filters.cat2==-1 || parseInt(item.params.slot) == _filters.cat2)
      && (_filters.subCat==-1 || parseInt(item.params.sc) == _filters.subCat)
      && (_filters.minPrice=='' || min <= ip)
      && (_filters.maxPrice=='' || max >= ip)
    ) {
      tmpStore.push(item);
    }
  });
  _store = util.sortByKey(tmpStore, 'n');
  SearchStore.emitChange()
};

var SearchStore = assign({}, EventEmitter.prototype, {
  init: function() {
    return _search('');
  },
  getResults: function() {
    return _store;
  },
  getFilters: function() {
    return _filters
  },

  emitChange: function() {
    this.emit(CHANGE_EVENT);
  },
  /**
   * @param {function} callback
   */
  addChangeListener: function(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
   * @param {function} callback
   */
  removeChangeListener: function(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },


  dispatcherIndex: AppDispatcher.register(function(payload) {
    var action = payload.action;

    switch(action.actionType) {
      case AppConstants.ActionTypes.SET_SEARCH_CAT1:
        _filters.cat1 = parseInt(action.cat1);
        _filters.cat2 = -1
        _filters.subCat = -1
        _search(_lastTerm);
        break;
      case AppConstants.ActionTypes.SET_SEARCH_CAT2:
        _filters.cat2 = parseInt(action.cat2);
        _search(_lastTerm);
        break;
      case AppConstants.ActionTypes.SET_SEARCH_SUB_CAT: // special category added my modb export script
        _filters.subCat = parseInt(action.subCat);
        _search(_lastTerm);
        break;
      case AppConstants.ActionTypes.SET_MIN_PRICE:
        _filters.minPrice = action.minPrice == '' ? '' : parseInt(action.minPrice);
        _search(_lastTerm);
        break;
      case AppConstants.ActionTypes.SET_MAX_PRICE:
        _filters.maxPrice = action.maxPrice == '' ? '' : parseInt(action.maxPrice);
        _search(_lastTerm);
        break;
      case AppConstants.ActionTypes.TOGGLE_FILTERS:
        _filters.show = !_filters.show;
        SearchStore.emitChange();
        break;
      case AppConstants.ActionTypes.SET_OUTPUT_FORMAT:
        _filters.output = action.format.trim();
        _search(_lastTerm);
        break;
      case AppConstants.ActionTypes.SEARCH:
        q = action.q.trim();
        _lastTerm = q;
        _search(q);
        break;
    }


    return true; // No errors. Needed by promise in Dispatcher.
  })
});

module.exports = SearchStore;

},{"../constants/AppConstants.js":321,"../dispatcher/AppDispatcher":322,"../util.js":341,"./ItemDB.js":332,"events":4,"object-assign":8}],341:[function(require,module,exports){
var AppConstants = require('./constants/AppConstants.js')
  , SHEETS = AppConstants.sheets
  , numeral = require('numeral');

var Util = {
  sortByKey: function(array, key) {
    return array.sort(function(a, b) {
        var x = a[key];
        var y = b[key];

        if (typeof x == "string")
        {
            x = x.toLowerCase(); 
            y = y.toLowerCase();
        }

        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
  },

  getItemLevel: function(item) {
    var re = /^min_/
    if(item.params) {
     for (var k in item.params) {
      if (k.match(re)) {
        return item.params[k];
      }
     }
    }
    return '-';
  },
  getItemSkill: function(item) {
    var re = /^min_/
    if(item.params) {
     for (var k in item.params) {
      if (k.match(re)) {
        return k.replace(re, '');
      }
     }
    }
    return '-';
  },
  valOrDash: function(v) {
    return v ? v : '-';
  },

  itemPresents: function(i) {
    if (i.params.no_present) return false;
    var price = i.params.price;
    if (price == 1) return ['Rare Present'];
    var presents = [];
    if (price > 2499 && price < 80001) presents.push('Good Present');
    if (price > 7999 && price < 170001) presents.push('Great Present');
    if (price > 34999 && price < 450001) presents.push('Best Present');
    if (price > 149999 && price < 1500001) presents.push('Legendary Present');
    return presents.length ? presents : false;
  },

  vendorStockCount: function(npc, itemId) {
    var c = npc.temp.content;
    for (var i in c) {
      if (c[i].id == itemId) return c[i].count ? c[i].count : 0;
    }
    return false; // doesn't even stock the item.
  },
  itemGraphicStyle: function(item) {
    var sheet = SHEETS[item.img.sheet-1]
    return {
      backgroundPosition: '-' + (sheet.w*item.img.x) +'px -' + (sheet.h*item.img.y) +'px',
      width: sheet.w,
      height: sheet.h,
    };
  },

  calcLevel: function(obj) {
    if (obj.params && obj.params.combat_level) return obj.params.combat_level;
    return Math.ceil((obj.temp.total_strength + obj.temp.total_accuracy + obj.temp.total_defense + obj.temp.health + (obj.temp.total_magic||0))/4);
  },

  hideLoader: function() {
    document.getElementById('loading').style.display = 'none';
  },

  showLoader: function() {
    document.getElementById('loading').style.display = 'block';
  },
  titleCase: function(str) {
    var strs = str.toLowerCase().split(' ');
    for (i in strs) {
      var ss = strs[i].split('');
      ss[0] = ss[0].toUpperCase();
      strs[i] = ss.join('');
    }
    return strs.join(' ');
  },

  chanceStr: function(obj) {
    var min = obj.min_chance || null;
    var max = obj.max_chance || null;
    if (min && max && min != max) {
      return Util.toPercent(min) + ' to ' + Util.toPercent(max);
    } else if (min) {
      return Util.toPercent(min);
    } else if (max) {
      return  Util.toPercent(max);
    }
    return '';
  },

  toPercent: function(n) {
    n = n || 1;
    return numeral(n*100).format('0') + '%';

  },
}

module.exports = Util;

},{"./constants/AppConstants.js":321,"numeral":7}]},{},[284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,328]);
